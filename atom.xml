<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>WangYangYang</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://wangyangyangisme.github.io/"/>
  <updated>2020-04-10T10:38:48.398Z</updated>
  <id>http://wangyangyangisme.github.io/</id>
  
  <author>
    <name>Wang YangYang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>最常用的150个命令汇总</title>
    <link href="http://wangyangyangisme.github.io/2020/04/10/linux-%E6%9C%80%E5%B8%B8%E7%94%A8%E7%9A%84150%E4%B8%AA%E5%91%BD%E4%BB%A4%E6%B1%87%E6%80%BB/"/>
    <id>http://wangyangyangisme.github.io/2020/04/10/linux-最常用的150个命令汇总/</id>
    <published>2020-04-10T10:38:36.000Z</published>
    <updated>2020-04-10T10:38:48.398Z</updated>
    
    <content type="html"><![CDATA[<div class="note success">            <p>一、线上查询及帮助命令(2个)</p>          </div><p><img src="/" alt="img" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/wangyangyangisme/CDN@latest/blog/linux/linuxcmd1.png"></p><div class="note success">            <p>二、文件和目录操作命令(18个)</p>          </div><p><img src="/" alt="img" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/wangyangyangisme/CDN@latest/blog/linux/linuxcmd2.jpg"></p><div class="note success">            <p>三、查看文件及内容处理命令（21个）</p>          </div><p><img src="/" alt="img" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/wangyangyangisme/CDN@latest/blog/linux/linuxcmd3.jpg"></p><div class="note success">            <p>四、文件压缩及解压缩命令（4个）</p>          </div><p><img src="/" alt="img" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/wangyangyangisme/CDN@latest/blog/linux/linuxcmd4.png"></p><div class="note success">            <p>五、信息显示命令（11个）</p>          </div><p><img src="/" alt="img" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/wangyangyangisme/CDN@latest/blog/linux/linuxcmd5.jpg"></p><div class="note success">            <p>六、搜索文件命令（4个）</p>          </div><p><img src="/" alt="img" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/wangyangyangisme/CDN@latest/blog/linux/linuxcmd6.png"></p><div class="note success">            <p>七、用户管理命令（10个）</p>          </div><p><img src="/" alt="img" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/wangyangyangisme/CDN@latest/blog/linux/linuxcmd7.jpg"></p><div class="note success">            <p>八、基础网络操作命令（11个）</p>          </div><p><img src="/" alt="img" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/wangyangyangisme/CDN@latest/blog/linux/linuxcmd8.jpg"></p><div class="note success">            <p>九、深入网络操作命令（9个）</p>          </div><p><img src="/" alt="img" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/wangyangyangisme/CDN@latest/blog/linux/linuxcmd9.jpg"></p><div class="note success">            <p>十、有关磁盘与文件系统的命令（16个）</p>          </div><p><img src="/" alt="img" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/wangyangyangisme/CDN@latest/blog/linux/linuxcmd10.jpg"></p><div class="note success">            <p>十一、系统权限及用户授权相关命令（4个）</p>          </div><p><img src="/" alt="img" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/wangyangyangisme/CDN@latest/blog/linux/linuxcmd11.png"></p><div class="note success">            <p>十二、查看系统用户登陆信息的命令（7个）</p>          </div><p><img src="/" alt="img" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/wangyangyangisme/CDN@latest/blog/linux/linuxcmd12.png"></p><div class="note success">            <p>十三、内置命令及其它（19个）</p>          </div><p><img src="/" alt="img" class="lazyload" data-src="C:%5CUsers%5CWindows10%5CDesktop%5Clinux-%E6%9C%80%E5%B8%B8%E7%94%A8%E7%9A%84150%E4%B8%AA%E5%91%BD%E4%BB%A4%E6%B1%87%E6%80%BB.assets%5Clinuxcmd13.jpg"></p><div class="note success">            <p>十四、系统管理与性能监视命令(9个)</p>          </div><p><img src="/" alt="img" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/wangyangyangisme/CDN@latest/blog/linux/linuxcmd14.jpg"></p><div class="note success">            <p>十五、关机/重启/注销和查看系统信息的命令（6个）</p>          </div><p><img src="/" alt="img" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/wangyangyangisme/CDN@latest/blog/linux/linuxcmd15.png"></p><div class="note success">            <p>十六、进程管理相关命令（15个）</p>          </div><p><img src="/" alt="img" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/wangyangyangisme/CDN@latest/blog/linux/linuxcmd16.jpg"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;div class=&quot;note success&quot;&gt;
            &lt;p&gt;一、线上查询及帮助命令(2个)&lt;/p&gt;
          &lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/&quot; alt=&quot;img&quot; class=&quot;lazyload&quot; data-src=&quot;https:/
      
    
    </summary>
    
    
      <category term="linux" scheme="http://wangyangyangisme.github.io/categories/linux/"/>
    
    
      <category term="linux" scheme="http://wangyangyangisme.github.io/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>ubuntu安装mysql</title>
    <link href="http://wangyangyangisme.github.io/2020/03/30/mysql-ubuntu%E5%AE%89%E8%A3%85mysql/"/>
    <id>http://wangyangyangisme.github.io/2020/03/30/mysql-ubuntu安装mysql/</id>
    <published>2020-03-30T09:38:36.000Z</published>
    <updated>2020-03-30T10:17:48.751Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ubuntu安装mysql"><a href="#ubuntu安装mysql" class="headerlink" title="ubuntu安装mysql"></a>ubuntu安装mysql</h1><blockquote><p>ubuntu16.04</p></blockquote><p>apt-get资源库中mysql的最新版本为：mysql-5.7.29</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="一、卸载-清理残余"><a href="#一、卸载-清理残余" class="headerlink" title="一、卸载/清理残余"></a>一、卸载/清理残余</h3><p>1.查看mysql有没有已安装的依赖包</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dpkg --list|grep mysql</span><br></pre></td></tr></table></figure><p>先卸载mysql-common</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get remove mysql-common</span><br></pre></td></tr></table></figure><p>再执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get autoremove --purge mysql-server-5.0</span><br></pre></td></tr></table></figure><p>然后继续用 <code>dpkg --list|grep mysql</code> 查看，还剩什么就卸载什么；</p><h3 id="二、安装mysql"><a href="#二、安装mysql" class="headerlink" title="二、安装mysql"></a>二、安装mysql</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#更新apt-get，更新后将会使用最新资源库</span></span><br><span class="line">sudo apt-get update</span><br><span class="line"></span><br><span class="line"><span class="comment">#安装MySQL:</span></span><br><span class="line">sudo apt-get install mysql-server</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看MySQL版本: </span></span><br><span class="line">mysql -V</span><br><span class="line"></span><br><span class="line"><span class="comment">#进入MySQL: </span></span><br><span class="line">mysql -u root -p</span><br><span class="line"><span class="comment">#启动: </span></span><br><span class="line">sudo service mysql start</span><br><span class="line"></span><br><span class="line"><span class="comment">#重启:</span></span><br><span class="line">sudo  service mysql restart </span><br><span class="line"></span><br><span class="line"><span class="comment">#关闭: </span></span><br><span class="line">sudo service mysql stop</span><br></pre></td></tr></table></figure><p><strong>Ubuntu16 - Ubuntu18安装mysql5.7未提示输入密码，mysql默认密码为空；直接登录即可；</strong></p><p>如果使用<code>mysql -uroot -p</code>命令连接mysql时，报错</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ERROR 1045 (28000): Access denied <span class="keyword">for</span> user ‘root’@<span class="string">'localhost’</span></span><br></pre></td></tr></table></figure><p>此时修改root的默认密码即可：<br>1.进入到/etc/mysql/ 目录下，查看debian.cnf文件</p><p><img src="/" alt="img" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/wangyangyangisme/CDN@latest/blog/mysql/install_mysql1.png"></p><p><img src="/" alt="img" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/wangyangyangisme/CDN@latest/blog/mysql/install_mysql2.png"></p><p>2.找到用户名，密码 ，使用此账号登录mysql<br>用户名：debian-sys-maint<br>密码：sL1y1gRBbzlX6iyb<br>登录：<strong>mysql -udebian-sys-maint -psL1y1gRBbzlX6iyb</strong></p><p><img src="/" alt="img" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/wangyangyangisme/CDN@latest/blog/mysql/install_mysql3.png"></p><p>3.修改root用户的的密码<br>这里是关键点，由于mysql5.7没有password字段，密码存储在authentication_string字段中，password()方法还能用在mysql中执行下面语句修改密码：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">databases</span>;</span><br><span class="line"><span class="keyword">use</span> mysql;</span><br><span class="line"><span class="keyword">update</span> <span class="keyword">user</span> <span class="keyword">set</span> authentication_string=<span class="keyword">PASSWORD</span>(<span class="string">"123456"</span>) <span class="keyword">where</span> <span class="keyword">user</span>=<span class="string">'root'</span>;</span><br><span class="line"><span class="keyword">update</span> <span class="keyword">user</span> <span class="keyword">set</span> <span class="keyword">plugin</span>=<span class="string">"mysql_native_password"</span>;</span><br><span class="line"><span class="keyword">flush</span> <span class="keyword">privileges</span>;</span><br><span class="line">exit;</span><br></pre></td></tr></table></figure><p>4.修改完密码，需要重启mysql；再次登录就可以了；</p><p><em>如果这篇文章确实帮到了你，在这里，也请不要吝啬你的点赞 ~</em></p><h3 id="三、修改数据库编码格式"><a href="#三、修改数据库编码格式" class="headerlink" title="三、修改数据库编码格式"></a>三、修改数据库编码格式</h3><p>进入mysql命令行输入：<code>show variables like &#39;character%&#39;;</code></p><p>我们需要把database和server调成utf8即可；</p><p>首先我们找到mysqld.cnf文件：<code>find / -name mysqld.cnf</code></p><p><img src="/" alt="img" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/wangyangyangisme/CDN@latest/blog/mysql/install_mysql4.png"></p><p>修改mysqld.cnf内容：在相应标签下添加即可（如下图），<strong>没有[mysql]标签就加上</strong>；</p><p><img src="/" alt="img" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/wangyangyangisme/CDN@latest/blog/mysql/install_mysql5.png"></p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[mysql]</span></span><br><span class="line"><span class="attr">default-character-set</span>=utf8</span><br><span class="line"></span><br><span class="line"><span class="section">[mysqld]</span></span><br><span class="line"><span class="attr">character_set_server</span>=utf8</span><br><span class="line"><span class="attr">collation_server</span>=utf8_general_ci</span><br></pre></td></tr></table></figure><p>保存后重启mysql：<code>service mysql restart;</code>重启后再次登陆mysql命令行</p><p>输入<code>show variables like &#39;character%&#39;;</code></p><p>出现下图说明数据库配置完成；</p><p><img src="/" alt="img" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/wangyangyangisme/CDN@latest/blog/mysql/install_mysql6.png"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;ubuntu安装mysql&quot;&gt;&lt;a href=&quot;#ubuntu安装mysql&quot; class=&quot;headerlink&quot; title=&quot;ubuntu安装mysql&quot;&gt;&lt;/a&gt;ubuntu安装mysql&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;ubuntu16.04&lt;/
      
    
    </summary>
    
    
      <category term="mysql" scheme="http://wangyangyangisme.github.io/categories/mysql/"/>
    
    
      <category term="mysql" scheme="http://wangyangyangisme.github.io/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>goland远程调试</title>
    <link href="http://wangyangyangisme.github.io/2020/03/30/golang-goland%E8%BF%9C%E7%A8%8B%E8%B0%83%E8%AF%95/"/>
    <id>http://wangyangyangisme.github.io/2020/03/30/golang-goland远程调试/</id>
    <published>2020-03-30T05:38:36.000Z</published>
    <updated>2020-03-30T05:16:06.784Z</updated>
    
    <content type="html"><![CDATA[<h1 id="goland远程调试"><a href="#goland远程调试" class="headerlink" title="goland远程调试"></a>goland远程调试</h1><blockquote><p>jetbrains golang: 2019.3</p><p>golang: 1.13</p></blockquote><h2 id="安装dlv"><a href="#安装dlv" class="headerlink" title="安装dlv"></a>安装dlv</h2><p><a href="https://github.com/go-delve/delve" target="_blank" rel="noopener">https://github.com/go-delve/delve</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">mkdir $GOPATH/src</span><br><span class="line">mkdir $GOPATH/src/golang.org</span><br><span class="line">mkdir $GOPATH/src/golang.org/x</span><br><span class="line">cd $GOPATH/src/golang.org/x</span><br><span class="line">git clone https://github.com/golang/net.git</span><br><span class="line">git clone https://github.com/golang/sys.git</span><br><span class="line">git clone https://github.com/golang/arch.git</span><br><span class="line">git clone https://github.com/golang/sync.git</span><br><span class="line">git clone https://github.com/golang/tools.git</span><br><span class="line">cd $GOPATH/src</span><br><span class="line">go get -u github.com/go-delve/delve/cmd/dlv</span><br><span class="line"></span><br><span class="line">dlv version</span><br></pre></td></tr></table></figure><h2 id="golang配置"><a href="#golang配置" class="headerlink" title="golang配置"></a>golang配置</h2><p>在本地创建一个项目</p><p><img src="/" alt="" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/wangyangyangisme/CDN@latest/blog/golang/golang-remote1.png"></p><p>添加远程服务器信息</p><p><img src="/" alt="" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/wangyangyangisme/CDN@latest/blog/golang/golang-remote2.png"></p><p><img src="/" alt="" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/wangyangyangisme/CDN@latest/blog/golang/golang-remote3.png"></p><p><img src="/" alt="" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/wangyangyangisme/CDN@latest/blog/golang/golang-remote4.png"></p><p>添加远程主机的ip，指定登录的用户名和密码</p><p><img src="/" alt="" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/wangyangyangisme/CDN@latest/blog/golang/golang-remote5.png"></p><p>这里映射远程主机的目录，目录名可以和本地的不一样<img src="/" alt="" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/wangyangyangisme/CDN@latest/blog/golang/golang-remote6.png"></p><p><img src="/" alt="" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/wangyangyangisme/CDN@latest/blog/golang/golang-remote7.png"></p><p>将本地代码上传到远程主机</p><p><img src="/" alt="" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/wangyangyangisme/CDN@latest/blog/golang/golang-remote8.png"></p><p>配置远程调试</p><p><img src="/" alt="" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/wangyangyangisme/CDN@latest/blog/golang/golang-remote9.png"></p><p>设置远程主机的ip</p><p><img src="/" alt="" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/wangyangyangisme/CDN@latest/blog/golang/golang-remote10.png"></p><h2 id="运行调试"><a href="#运行调试" class="headerlink" title="运行调试"></a>运行调试</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cd /root/remote</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">dlv debug --headless --listen=:5002 --api-version=2 --accept-multiclient</span></span><br><span class="line"><span class="meta">#</span><span class="bash">加上--accept-multiclient选项后无法退出，这里就去掉这个选项</span></span><br><span class="line"><span class="meta">#</span><span class="bash">这个命令，同时完成了编译和运行，如果运行程序需要声明参数，直接加在后面就好</span></span><br><span class="line">dlv debug --headless --listen=:5002 --api-version=2</span><br></pre></td></tr></table></figure><p>在远程主机运行完上面的指令后，设置好断点，在golang ide中点击调试按钮即可</p><p><img src="/" alt="" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/wangyangyangisme/CDN@latest/blog/golang/golang-remote11.png"></p><p>在本地可以查看变量，打印的日志本地是看不到的，在远程主机上才能看到</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;goland远程调试&quot;&gt;&lt;a href=&quot;#goland远程调试&quot; class=&quot;headerlink&quot; title=&quot;goland远程调试&quot;&gt;&lt;/a&gt;goland远程调试&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;jetbrains golang: 2019.3&lt;
      
    
    </summary>
    
    
      <category term="goland" scheme="http://wangyangyangisme.github.io/categories/goland/"/>
    
    
      <category term="debug" scheme="http://wangyangyangisme.github.io/tags/debug/"/>
    
  </entry>
  
  <entry>
    <title>golang实现无限级菜单</title>
    <link href="http://wangyangyangisme.github.io/2020/03/18/golang-golang%E5%AE%9E%E7%8E%B0%E6%97%A0%E9%99%90%E7%BA%A7%E8%8F%9C%E5%8D%95/"/>
    <id>http://wangyangyangisme.github.io/2020/03/18/golang-golang实现无限级菜单/</id>
    <published>2020-03-18T06:38:36.000Z</published>
    <updated>2020-03-18T06:16:45.672Z</updated>
    
    <content type="html"><![CDATA[<h1 id="golang实现无限级菜单"><a href="#golang实现无限级菜单" class="headerlink" title="golang实现无限级菜单"></a>golang实现无限级菜单</h1><h2 id="查数据库"><a href="#查数据库" class="headerlink" title="查数据库"></a>查数据库</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Menu <span class="keyword">struct</span> &#123;</span><br><span class="line">    Id <span class="keyword">int</span><span class="string">`json:"id"`</span></span><br><span class="line">    Pid <span class="keyword">int</span><span class="string">`json:"pid"`</span></span><br><span class="line">    Name <span class="keyword">string</span> <span class="string">`json:"name"`</span></span><br><span class="line">    Sort <span class="keyword">int</span> <span class="string">`json:"sort"`</span></span><br><span class="line">    Route <span class="keyword">string</span><span class="string">`json:"route"`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> TreeList <span class="keyword">struct</span> &#123;</span><br><span class="line">    Id <span class="keyword">int</span><span class="string">`json:"id"`</span></span><br><span class="line">    Name <span class="keyword">string</span><span class="string">`json:"name"`</span></span><br><span class="line">    Pid <span class="keyword">int</span><span class="string">`json:"pid"`</span></span><br><span class="line">    Sort <span class="keyword">int</span> <span class="string">`json:"sort"`</span></span><br><span class="line">    Route <span class="keyword">string</span><span class="string">`json:"route"`</span></span><br><span class="line">    Children []*TreeList<span class="string">`json:"children"`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span>  &#123;</span><br><span class="line">    <span class="comment">// 注册模型</span></span><br><span class="line">    orm.RegisterModel(<span class="built_in">new</span>(Menu))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(m *Menu)</span><span class="title">TableName</span><span class="params">()</span> <span class="title">string</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"auth_menu"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">菜单列表</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(m *Menu)</span><span class="title">MenuList</span><span class="params">()</span> []*<span class="title">TreeList</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> m.getMenu(<span class="number">0</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">递归获取树形菜单</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(m *Menu)</span><span class="title">getMenu</span><span class="params">(pid <span class="keyword">int</span>)</span> []*<span class="title">TreeList</span></span> &#123;</span><br><span class="line">    o := orm.NewOrm()</span><br><span class="line">    <span class="keyword">var</span> menu []Menu</span><br><span class="line">    _,_ = o.QueryTable(<span class="string">"auth_menu"</span>).Filter(<span class="string">"pid"</span>, pid).OrderBy(<span class="string">"sort"</span>).All(&amp;menu)</span><br><span class="line">    treeList := []*TreeList&#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> _, v := <span class="keyword">range</span> menu&#123;</span><br><span class="line">        child := v.getMenu(v.Id)</span><br><span class="line">        node := &amp;TreeList&#123;</span><br><span class="line">            Id:v.Id,</span><br><span class="line">            Name:v.Name,</span><br><span class="line">            Sort:v.Sort,</span><br><span class="line">            Route:v.Route,</span><br><span class="line">            Pid:v.Pid,</span><br><span class="line">        &#125;</span><br><span class="line">        node.Children = child</span><br><span class="line">        treeList = <span class="built_in">append</span>(treeList, node)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> treeList</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="只查一次"><a href="#只查一次" class="headerlink" title="只查一次"></a>只查一次</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> tree</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"sort"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Tree 统一定义菜单树的数据结构，也可以自定义添加其他字段</span></span><br><span class="line"><span class="keyword">type</span> Tree <span class="keyword">struct</span> &#123;</span><br><span class="line">Title           <span class="keyword">string</span>      <span class="string">`json:"title"`</span>            <span class="comment">//节点名字</span></span><br><span class="line">Data            <span class="keyword">interface</span>&#123;&#125; <span class="string">`json:"data"`</span>             <span class="comment">//自定义对象</span></span><br><span class="line">Leaf            <span class="keyword">bool</span>        <span class="string">`json:"leaf"`</span>             <span class="comment">//叶子节点</span></span><br><span class="line">Selected        <span class="keyword">bool</span>        <span class="string">`json:"checked"`</span>          <span class="comment">//选中</span></span><br><span class="line">PartialSelected <span class="keyword">bool</span>        <span class="string">`json:"partial_selected"`</span> <span class="comment">//部分选中</span></span><br><span class="line">Children        []Tree      <span class="string">`json:"children"`</span>         <span class="comment">//子节点</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ConvertToINodeArray 其他的结构体想要生成菜单树，直接实现这个接口</span></span><br><span class="line"><span class="keyword">type</span> INode <span class="keyword">interface</span> &#123;</span><br><span class="line"><span class="comment">// GetTitle 获取显示名字</span></span><br><span class="line">GetTitle() <span class="keyword">string</span></span><br><span class="line"><span class="comment">// GetId获取id</span></span><br><span class="line">GetId() <span class="keyword">int</span></span><br><span class="line"><span class="comment">// GetFatherId 获取父id</span></span><br><span class="line">GetFatherId() <span class="keyword">int</span></span><br><span class="line"><span class="comment">// GetData 获取附加数据</span></span><br><span class="line">GetData() <span class="keyword">interface</span>&#123;&#125;</span><br><span class="line"><span class="comment">// IsRoot 判断当前节点是否是顶层根节点</span></span><br><span class="line">IsRoot() <span class="keyword">bool</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> INodes []INode</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(nodes INodes)</span> <span class="title">Len</span><span class="params">()</span> <span class="title">int</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">len</span>(nodes)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(nodes INodes)</span> <span class="title">Swap</span><span class="params">(i, j <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">nodes[i], nodes[j] = nodes[j], nodes[i]</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(nodes INodes)</span> <span class="title">Less</span><span class="params">(i, j <span class="keyword">int</span>)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> nodes[i].GetId() &lt; nodes[j].GetId()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// GenerateTree 自定义的结构体实现 INode 接口后调用此方法生成树结构</span></span><br><span class="line"><span class="comment">// nodes 需要生成树的节点</span></span><br><span class="line"><span class="comment">// selectedNode 生成树后选中的节点</span></span><br><span class="line"><span class="comment">// menuTrees 生成成功后的树结构对象</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GenerateTree</span><span class="params">(nodes, selectedNodes []INode)</span> <span class="params">(trees []Tree)</span></span> &#123;</span><br><span class="line">trees = []Tree&#123;&#125;</span><br><span class="line"><span class="comment">// 定义顶层根和子节点</span></span><br><span class="line"><span class="keyword">var</span> roots, childs []INode</span><br><span class="line"><span class="keyword">for</span> _, v := <span class="keyword">range</span> nodes &#123;</span><br><span class="line"><span class="keyword">if</span> v.IsRoot() &#123;</span><br><span class="line"><span class="comment">// 判断顶层根节点</span></span><br><span class="line">roots = <span class="built_in">append</span>(roots, v)</span><br><span class="line">&#125;</span><br><span class="line">childs = <span class="built_in">append</span>(childs, v)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _, v := <span class="keyword">range</span> roots &#123;</span><br><span class="line">childTree := &amp;Tree&#123;</span><br><span class="line">Title: v.GetTitle(),</span><br><span class="line">Data:  v.GetData(),</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 递归之前，根据父节点确认 childTree 的选中状态</span></span><br><span class="line">childTree.Selected = nodeSelected(v, selectedNodes, childTree.Children)</span><br><span class="line"><span class="comment">// 递归</span></span><br><span class="line">recursiveTree(childTree, childs, selectedNodes)</span><br><span class="line"><span class="comment">// 递归之后，根据子节点确认 childTree 的选中状态</span></span><br><span class="line"><span class="keyword">if</span> !childTree.Selected &#123;</span><br><span class="line">childTree.Selected = nodeSelected(v, selectedNodes, childTree.Children)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 递归之后，根据子节点确认 childTree 的半选中状态</span></span><br><span class="line">childTree.PartialSelected = nodePartialSelected(childTree.Children)</span><br><span class="line"><span class="comment">// 递归之后，根据子节确认是否是叶子节点</span></span><br><span class="line">childTree.Leaf = <span class="built_in">len</span>(childTree.Children) == <span class="number">0</span></span><br><span class="line">trees = <span class="built_in">append</span>(trees, *childTree)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// recursiveTree 递归生成树结构</span></span><br><span class="line"><span class="comment">// tree 递归的树对象</span></span><br><span class="line"><span class="comment">// nodes 递归的节点</span></span><br><span class="line"><span class="comment">// selectedNodes 选中的节点</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">recursiveTree</span><span class="params">(tree *Tree, nodes, selectedNodes []INode)</span></span> &#123;</span><br><span class="line">data := tree.Data.(INode)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _, v := <span class="keyword">range</span> nodes &#123;</span><br><span class="line"><span class="keyword">if</span> v.IsRoot() &#123;</span><br><span class="line"><span class="comment">// 如果当前节点是顶层根节点就跳过</span></span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> data.GetId() == v.GetFatherId() &#123;</span><br><span class="line">childTree := &amp;Tree&#123;</span><br><span class="line">Title: v.GetTitle(),</span><br><span class="line">Data:  v.GetData(),</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 递归之前，根据子节点和父节点确认 childTree 的选中状态</span></span><br><span class="line">childTree.Selected = nodeSelected(v, selectedNodes, childTree.Children) || tree.Selected</span><br><span class="line">recursiveTree(childTree, nodes, selectedNodes)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> !childTree.Selected &#123;</span><br><span class="line"><span class="comment">// 递归之后，根据子节点确认 childTree 的选中状态</span></span><br><span class="line">childTree.Selected = nodeSelected(v, selectedNodes, childTree.Children)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 递归之后，根据子节点确认 childTree 的半选中状态</span></span><br><span class="line">childTree.PartialSelected = nodePartialSelected(childTree.Children)</span><br><span class="line"><span class="comment">// 递归之后，根据子节确认是否是叶子节点</span></span><br><span class="line">childTree.Leaf = <span class="built_in">len</span>(childTree.Children) == <span class="number">0</span></span><br><span class="line">tree.Children = <span class="built_in">append</span>(tree.Children, *childTree)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// FindRelationNode 在 allTree 中查询 nodes 中节点的所有父节点</span></span><br><span class="line"><span class="comment">// nodes 要查询父节点的子节点数组</span></span><br><span class="line"><span class="comment">// allTree 所有节点数组</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">FindRelationNode</span><span class="params">(nodes, allNodes []INode)</span> <span class="params">(respNodes []INode)</span></span> &#123;</span><br><span class="line">nodeMap := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">int</span>]INode)</span><br><span class="line"><span class="keyword">for</span> _, v := <span class="keyword">range</span> nodes &#123;</span><br><span class="line">recursiveFindRelationNode(nodeMap, allNodes, v, <span class="number">0</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _, v := <span class="keyword">range</span> nodeMap &#123;</span><br><span class="line">respNodes = <span class="built_in">append</span>(respNodes, v)</span><br><span class="line">&#125;</span><br><span class="line">sort.Sort(INodes(respNodes))</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// recursiveFindRelationNode 递归查询关联父子节点</span></span><br><span class="line"><span class="comment">// nodeMap 查询结果搜集到map中</span></span><br><span class="line"><span class="comment">// allNodes 所有节点</span></span><br><span class="line"><span class="comment">// node 递归节点</span></span><br><span class="line"><span class="comment">// t 递归查找类型：0 查找父、子节点；1 只查找父节点；2 只查找子节点</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">recursiveFindRelationNode</span><span class="params">(nodeMap <span class="keyword">map</span>[<span class="keyword">int</span>]INode, allNodes []INode, node INode, t <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">nodeMap[node.GetId()] = node</span><br><span class="line"><span class="keyword">for</span> _, v := <span class="keyword">range</span> allNodes &#123;</span><br><span class="line"><span class="keyword">if</span> _, ok := nodeMap[v.GetId()]; ok &#123;</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 查找父节点</span></span><br><span class="line"><span class="keyword">if</span> t == <span class="number">0</span> || t == <span class="number">1</span> &#123;</span><br><span class="line"><span class="keyword">if</span> node.GetFatherId() == v.GetId() &#123;</span><br><span class="line">nodeMap[v.GetId()] = v</span><br><span class="line"><span class="keyword">if</span> v.IsRoot() &#123;</span><br><span class="line"><span class="comment">// 是顶层根节点时，不再进行递归</span></span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">&#125;</span><br><span class="line">recursiveFindRelationNode(nodeMap, allNodes, v, <span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 查找子节点</span></span><br><span class="line"><span class="keyword">if</span> t == <span class="number">0</span> || t == <span class="number">2</span> &#123;</span><br><span class="line"><span class="keyword">if</span> node.GetId() == v.GetFatherId() &#123;</span><br><span class="line">nodeMap[v.GetId()] = v</span><br><span class="line">recursiveFindRelationNode(nodeMap, allNodes, v, <span class="number">2</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// nodeSelected 判断节点的选中状态</span></span><br><span class="line"><span class="comment">// node 进行判断节点</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">nodeSelected</span><span class="params">(node INode, selectedNodes []INode, children []Tree)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> _, v := <span class="keyword">range</span> selectedNodes &#123;</span><br><span class="line"><span class="keyword">if</span> node.GetId() == v.GetId() &#123;</span><br><span class="line"><span class="comment">// 1. 如果选择节点数组中存在当前节点</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(children) == <span class="number">0</span> &#123;</span><br><span class="line"><span class="comment">// 2. 不满足前置条件1，且没有子节点</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line">selectedNum := <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> _, v := <span class="keyword">range</span> children &#123;</span><br><span class="line"><span class="keyword">if</span> v.Selected &#123;</span><br><span class="line">selectedNum++</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> selectedNum == <span class="built_in">len</span>(children) &#123;</span><br><span class="line"><span class="comment">// 不满足前置条件1，2 ，且子节点全部是选中状态</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// nodePartialSelected 判断节点的半选中状态</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">nodePartialSelected</span><span class="params">(trees []Tree)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line">selectedNum := <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> _, v := <span class="keyword">range</span> trees &#123;</span><br><span class="line"><span class="keyword">if</span> v.Selected &#123;</span><br><span class="line">selectedNum++</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> selectedNum == <span class="built_in">len</span>(trees) || selectedNum == <span class="number">0</span> &#123;</span><br><span class="line"><span class="comment">// 子节点全选中，或一个也没有选中</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>test</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> tree</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"encoding/json"</span></span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"github.com/tidwall/pretty"</span></span><br><span class="line"><span class="string">"testing"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义我们自己的菜单对象</span></span><br><span class="line"><span class="keyword">type</span> SystemMenu <span class="keyword">struct</span> &#123;</span><br><span class="line">Id       <span class="keyword">int</span>    <span class="string">`json:"id"`</span>        <span class="comment">//id</span></span><br><span class="line">FatherId <span class="keyword">int</span>    <span class="string">`json:"father_id"`</span> <span class="comment">//上级菜单id</span></span><br><span class="line">Name     <span class="keyword">string</span> <span class="string">`json:"name"`</span>      <span class="comment">//菜单名</span></span><br><span class="line">Route    <span class="keyword">string</span> <span class="string">`json:"route"`</span>     <span class="comment">//页面路径</span></span><br><span class="line">Icon     <span class="keyword">string</span> <span class="string">`json:"icon"`</span>      <span class="comment">//图标路径</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// region 实现ITree 所有接口</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s SystemMenu)</span> <span class="title">GetTitle</span><span class="params">()</span> <span class="title">string</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> s.Name</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s SystemMenu)</span> <span class="title">GetId</span><span class="params">()</span> <span class="title">int</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> s.Id</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s SystemMenu)</span> <span class="title">GetFatherId</span><span class="params">()</span> <span class="title">int</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> s.FatherId</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s SystemMenu)</span> <span class="title">GetData</span><span class="params">()</span> <span class="title">interface</span></span>&#123;&#125; &#123;</span><br><span class="line"><span class="keyword">return</span> s</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s SystemMenu)</span> <span class="title">IsRoot</span><span class="params">()</span> <span class="title">bool</span></span> &#123;</span><br><span class="line"><span class="comment">// 这里通过FatherId等于0 或者 FatherId等于自身Id表示顶层根节点</span></span><br><span class="line"><span class="keyword">return</span> s.FatherId == <span class="number">0</span> || s.FatherId == s.Id</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// endregion</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> SystemMenus []SystemMenu</span><br><span class="line"></span><br><span class="line"><span class="comment">// ConvertToINodeArray 将当前数组转换成父类 INode 接口 数组</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s SystemMenus)</span> <span class="title">ConvertToINodeArray</span><span class="params">()</span> <span class="params">(nodes []INode)</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> _, v := <span class="keyword">range</span> s &#123;</span><br><span class="line">nodes = <span class="built_in">append</span>(nodes, v)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestGenerateTree</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line"><span class="comment">// 模拟获取数据库中所有菜单，在其它所有的查询中，也是首先将数据库中所有数据查询出来放到数组中，</span></span><br><span class="line"><span class="comment">// 后面的遍历递归，都在这个 allMenu中进行，而不是在数据库中进行递归查询，减小数据库压力。</span></span><br><span class="line">allMenu := []SystemMenu&#123;</span><br><span class="line">&#123;Id: <span class="number">1</span>, FatherId: <span class="number">0</span>, Name: <span class="string">"系统总览"</span>, Route: <span class="string">"/systemOverview"</span>, Icon: <span class="string">"icon-system"</span>&#125;,</span><br><span class="line">&#123;Id: <span class="number">2</span>, FatherId: <span class="number">0</span>, Name: <span class="string">"系统配置"</span>, Route: <span class="string">"/systemConfig"</span>, Icon: <span class="string">"icon-config"</span>&#125;,</span><br><span class="line"></span><br><span class="line">&#123;Id: <span class="number">3</span>, FatherId: <span class="number">1</span>, Name: <span class="string">"资产"</span>, Route: <span class="string">"/asset"</span>, Icon: <span class="string">"icon-asset"</span>&#125;,</span><br><span class="line">&#123;Id: <span class="number">4</span>, FatherId: <span class="number">1</span>, Name: <span class="string">"动环"</span>, Route: <span class="string">"/pe"</span>, Icon: <span class="string">"icon-pe"</span>&#125;,</span><br><span class="line"></span><br><span class="line">&#123;Id: <span class="number">5</span>, FatherId: <span class="number">2</span>, Name: <span class="string">"菜单配置"</span>, Route: <span class="string">"/menuConfig"</span>, Icon: <span class="string">"icon-menu-config"</span>&#125;,</span><br><span class="line">&#123;Id: <span class="number">6</span>, FatherId: <span class="number">3</span>, Name: <span class="string">"设备"</span>, Route: <span class="string">"/device"</span>, Icon: <span class="string">"icon-device"</span>&#125;,</span><br><span class="line">&#123;Id: <span class="number">7</span>, FatherId: <span class="number">3</span>, Name: <span class="string">"机柜"</span>, Route: <span class="string">"/device"</span>, Icon: <span class="string">"icon-device"</span>&#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 生成完全树</span></span><br><span class="line">resp := GenerateTree(SystemMenus.ConvertToINodeArray(allMenu), <span class="literal">nil</span>)</span><br><span class="line">bytes, _ := json.MarshalIndent(resp, <span class="string">""</span>, <span class="string">"\t"</span>)</span><br><span class="line"><span class="comment">//fmt.Println(string(pretty.Color(pretty.PrettyOptions(bytes, pretty.DefaultOptions), nil)))</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 模拟选中 '资产' 菜单</span></span><br><span class="line">selectedNode := []SystemMenu&#123;allMenu[<span class="number">2</span>]&#125;</span><br><span class="line">resp = GenerateTree(SystemMenus.ConvertToINodeArray(allMenu), SystemMenus.ConvertToINodeArray(selectedNode))</span><br><span class="line">bytes, _ = json.Marshal(resp)</span><br><span class="line"><span class="comment">//fmt.Println(string(pretty.Color(pretty.PrettyOptions(bytes, pretty.DefaultOptions), nil)))</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 模拟从数据库中查询出 '设备'</span></span><br><span class="line">device := []SystemMenu&#123;allMenu[<span class="number">5</span>]&#125;</span><br><span class="line"><span class="comment">// 查询 设备 的所有父节点</span></span><br><span class="line">respNodes := FindRelationNode(SystemMenus.ConvertToINodeArray(device), SystemMenus.ConvertToINodeArray(allMenu))</span><br><span class="line">resp = GenerateTree(respNodes, <span class="literal">nil</span>)</span><br><span class="line">bytes, _ = json.Marshal(resp)</span><br><span class="line">fmt.Println(<span class="keyword">string</span>(pretty.Color(pretty.PrettyOptions(bytes, pretty.DefaultOptions), <span class="literal">nil</span>)))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://github.com/azhengyongqin/golang-tree-menu" target="_blank" rel="noopener">https://github.com/azhengyongqin/golang-tree-menu</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;golang实现无限级菜单&quot;&gt;&lt;a href=&quot;#golang实现无限级菜单&quot; class=&quot;headerlink&quot; title=&quot;golang实现无限级菜单&quot;&gt;&lt;/a&gt;golang实现无限级菜单&lt;/h1&gt;&lt;h2 id=&quot;查数据库&quot;&gt;&lt;a href=&quot;#查数据库&quot;
      
    
    </summary>
    
    
      <category term="golang" scheme="http://wangyangyangisme.github.io/categories/golang/"/>
    
    
  </entry>
  
  <entry>
    <title>MySql时间计算</title>
    <link href="http://wangyangyangisme.github.io/2020/03/17/mysql-mysql%E6%97%B6%E9%97%B4%E8%AE%A1%E7%AE%97/"/>
    <id>http://wangyangyangisme.github.io/2020/03/17/mysql-mysql时间计算/</id>
    <published>2020-03-17T10:10:36.000Z</published>
    <updated>2020-03-18T02:14:40.832Z</updated>
    
    <content type="html"><![CDATA[<h1 id="MySql时间计算"><a href="#MySql时间计算" class="headerlink" title="MySql时间计算"></a>MySql时间计算</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">SELECT </span><br><span class="line">TIME_TO_SEC(TIMEDIFF('2018-09-30 19:38:45', '2018-08-23 10:13:01')) AS DIFF_SECOND1, -- 秒</span><br><span class="line">UNIX_TIMESTAMP('2018-09-30 19:38:45')-UNIX_TIMESTAMP('2018-08-23 10:13:01') AS DIFF_SECOND2, -- 秒</span><br><span class="line">TIMESTAMPDIFF(SECOND,'2018-08-23 10:13:01','2018-09-30 19:38:45') AS DIFF_SECOND3, -- 秒</span><br><span class="line">TIMESTAMPDIFF(MINUTE,'2018-08-23 10:13:01','2018-09-30 19:38:45') AS DIFF_MINUTE, -- 分</span><br><span class="line">TIMESTAMPDIFF(HOUR,'2018-08-23 10:13:01','2018-09-30 19:38:45') AS DIFF_HOUR, -- 小时</span><br><span class="line">TIMESTAMPDIFF(DAY ,'2018-08-23 10:13:01','2018-09-30 19:38:45') AS DIFF_DATE1, -- 天</span><br><span class="line">DATEDIFF('2018-09-30 19:38:45','2018-08-23 10:13:01') AS DIFF_DATE2, -- 天</span><br><span class="line">TIMESTAMPDIFF(MONTH,'2018-08-23 10:13:01','2018-09-25 19:38:45') AS DIFF_MONTH, -- 月</span><br><span class="line">TIMESTAMPDIFF(YEAR,'2018-08-23 10:13:01','2020-07-25 19:38:45') AS DIFF_YEAR -- 年</span><br><span class="line">FROM DUAL;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;MySql时间计算&quot;&gt;&lt;a href=&quot;#MySql时间计算&quot; class=&quot;headerlink&quot; title=&quot;MySql时间计算&quot;&gt;&lt;/a&gt;MySql时间计算&lt;/h1&gt;&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;t
      
    
    </summary>
    
    
      <category term="mysql" scheme="http://wangyangyangisme.github.io/categories/mysql/"/>
    
    
  </entry>
  
  <entry>
    <title>开源镜像源</title>
    <link href="http://wangyangyangisme.github.io/2020/03/17/ubuntu-%E5%BC%80%E6%BA%90%E9%95%9C%E5%83%8F%E6%BA%90/"/>
    <id>http://wangyangyangisme.github.io/2020/03/17/ubuntu-开源镜像源/</id>
    <published>2020-03-17T09:38:36.000Z</published>
    <updated>2020-03-18T02:14:16.630Z</updated>
    
    <content type="html"><![CDATA[<h1 id="开源软件镜像地址"><a href="#开源软件镜像地址" class="headerlink" title="开源软件镜像地址"></a>开源软件镜像地址</h1><p>如果要是下载软件的话，直接执行 </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">weget wget https://mirrors.aliyun.com/apache/maven/maven-3/3.6.2/binaries/apache-maven-3.6.2-bin.tar.gz</span><br></pre></td></tr></table></figure><ol><li><p><a href="http://mirror.bit.edu.cn/web/" target="_blank" rel="noopener">http://mirror.bit.edu.cn/web/</a>                #北京理工大学开源软件镜像服务 (比较全一些软件)</p></li><li><p><a href="https://mirrors.tuna.tsinghua.edu.cn/" target="_blank" rel="noopener">https://mirrors.tuna.tsinghua.edu.cn/</a> #清华大学开源软件镜像站(比较全一些软件)</p></li><li><p><a href="http://mirrors.aliyun.com/" target="_blank" rel="noopener">http://mirrors.aliyun.com/</a>                     #阿里云 （阿里巴巴比较全的一些软件，包括服务呀，使用文档呀，也是软件开发者们首先下载目标）</p></li><li><p><a href="http://mirrors.zju.edu.cn/" target="_blank" rel="noopener">http://mirrors.zju.edu.cn/</a>            #浙江大学（学校级别的开源网，相对于软件数量不是很多）</p></li><li><p><a href="http://mirrors.sohu.com/" target="_blank" rel="noopener">http://mirrors.sohu.com/</a>             #搜狐</p></li><li><p><a href="http://mirrors.tuna.tsinghua.edu.cn/" target="_blank" rel="noopener">http://mirrors.tuna.tsinghua.edu.cn/</a>        #清华大学</p></li><li><p><a href="http://mirrors.cn99.com" target="_blank" rel="noopener">http://mirrors.cn99.com</a>        #网易（企业级别的开源网站，维护时间呀，维护软件更新速度都是要比学校级别高很多的）</p></li><li><p><a href="http://mirrors.163.com/" target="_blank" rel="noopener">http://mirrors.163.com/</a>        #网易</p></li><li><p><a href="http://mirrors.nju.edu.cn/" target="_blank" rel="noopener">http://mirrors.nju.edu.cn/</a>    #南京大学</p></li><li><p><a href="http://mirror.lzu.edu.cn/" target="_blank" rel="noopener">http://mirror.lzu.edu.cn/</a>       #兰州大学</p></li><li><p><a href="http://mirrors.shuosc.org/" target="_blank" rel="noopener">http://mirrors.shuosc.org/</a>    #上海大学</p></li><li><p><a href="https://mirror.azure.cn/" target="_blank" rel="noopener">https://mirror.azure.cn/</a>        #开源镜像站点</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;开源软件镜像地址&quot;&gt;&lt;a href=&quot;#开源软件镜像地址&quot; class=&quot;headerlink&quot; title=&quot;开源软件镜像地址&quot;&gt;&lt;/a&gt;开源软件镜像地址&lt;/h1&gt;&lt;p&gt;如果要是下载软件的话，直接执行 &lt;/p&gt;
&lt;figure class=&quot;highlight 
      
    
    </summary>
    
    
      <category term="ubuntu" scheme="http://wangyangyangisme.github.io/categories/ubuntu/"/>
    
    
  </entry>
  
  <entry>
    <title>Drone+Gitea自动化部署</title>
    <link href="http://wangyangyangisme.github.io/2020/03/12/CICD-Drone+Gitea%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2/"/>
    <id>http://wangyangyangisme.github.io/2020/03/12/CICD-Drone+Gitea自动化部署/</id>
    <published>2020-03-12T07:38:36.000Z</published>
    <updated>2020-03-12T06:58:06.607Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Drone-Gitea自动化部署"><a href="#Drone-Gitea自动化部署" class="headerlink" title="Drone+Gitea自动化部署"></a>Drone+Gitea自动化部署</h1><blockquote><p><a href="https://wangyangyangisme.github.io/2020/03/02/vagrant-Vagrant%E6%90%AD%E5%BB%BA%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83/">本使用Vagrant搭建虚拟环境</a></p><p>新建一个虚拟机ip为192.168.56.100</p></blockquote><h2 id="1-安装私有仓库harbor"><a href="#1-安装私有仓库harbor" class="headerlink" title="1.安装私有仓库harbor"></a>1.安装私有仓库harbor</h2><p><img src="/" alt="" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/wangyangyangisme/CDN@latest/blog/drone/drone1.png"></p><p>下载地址：<a href="https://github.com/goharbor/harbor/releases" target="_blank" rel="noopener">https://github.com/goharbor/harbor/releases</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> vagrant ssh</span></span><br><span class="line"><span class="meta">#</span><span class="bash">密码vagrant</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo su</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> tar xvf harbor-offline-installer-v1.10.1.tgz</span></span><br></pre></td></tr></table></figure><p>编辑harbor.yml文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> ./harbor</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> vi harbor.yml</span></span><br></pre></td></tr></table></figure><p><img src="/" alt="" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/wangyangyangisme/CDN@latest/blog/drone/drone2.png"></p><p>安装执行install.sh</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ./install.sh</span></span><br></pre></td></tr></table></figure><p><img src="/" alt="" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/wangyangyangisme/CDN@latest/blog/drone/drone3.png"></p><p>编辑 /etc/docker/daemon.json</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"insecure-registries"</span>:[<span class="string">"192.168.56.100"</span>],</span><br><span class="line">  <span class="attr">"registry-mirrors"</span>: [<span class="string">"https://c8x7u9xt.mirror.aliyuncs.com"</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重启docker：<code>systemctl restart docker</code></p><p>重启harbor</p><p>登录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker login 192.168.56.100</span></span><br><span class="line"><span class="meta">#</span><span class="bash">用户名: admin</span></span><br><span class="line"><span class="meta">#</span><span class="bash">密码: Harbor12345</span></span><br></pre></td></tr></table></figure><p><img src="/" alt="" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/wangyangyangisme/CDN@latest/blog/drone/drone5.png"></p><p>浏览器访问 192.168.56.100</p><h2 id="2-安装Gitea"><a href="#2-安装Gitea" class="headerlink" title="2.安装Gitea"></a>2.安装Gitea</h2><p>docker-compose.yml</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">'3'</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">mysql:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">mysql:5.7</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">gitea_mysql</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">"13306:3306"</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">TZ=Asia/Shanghai</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">MYSQL_ROOT_PASSWORD=123456</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">MYSQL_USER=gitea</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">MYSQL_PASSWORD=gitea</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">MYSQL_DATABASE=gitea</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">MYSQL_DATABASE_CHARSET=utf8mb4</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">MYSQL_DATABASE_COLLATION=utf8mb4_general_ci</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/root/docker/data/gitea/mysql:/var/lib/mysql</span></span><br><span class="line">  <span class="attr">gitea:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">gitea/gitea:latest</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">gitea</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">"10022:22"</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">"10080:3000"</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">TZ=Asia/Shanghai</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">DB_TYPE=mysql</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">DB_HOST=gitea_mysql:3306</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">DB_NAME=gitea</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">DB_USER=gitea</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">DB_PASSWD=gitea</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/root/docker/data/gitea/gitea:/data</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">mysql</span></span><br></pre></td></tr></table></figure><p>安装</p><p><code>docker-compose up -d</code></p><p>打开浏览器访问 <a href="http://192.168.56.102:10080/install" target="_blank" rel="noopener">http://192.168.56.102:10080/install</a></p><p>配置数据库</p><p><img src="/" alt="" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/wangyangyangisme/CDN@latest/blog/drone/drone6.png"></p><p>基础配置</p><p><img src="/" alt="" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/wangyangyangisme/CDN@latest/blog/drone/drone7.png"></p><p>设置账号</p><p><img src="/" alt="" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/wangyangyangisme/CDN@latest/blog/drone/drone8.png"></p><h2 id="3-安装Drone"><a href="#3-安装Drone" class="headerlink" title="3.安装Drone"></a>3.安装Drone</h2><p><img src="/" alt="" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/wangyangyangisme/CDN@latest/blog/drone/drone9.png"></p><p><img src="/" alt="" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/wangyangyangisme/CDN@latest/blog/drone/drone10.png"></p><p>记住客户端ID与客户端密钥，将用于docker-compse.yml中</p><p>docker-compose.yml</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">'3'</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">mysql:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">mysql:5.7</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">drone_mysql</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">"13307:3306"</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">TZ=Asia/Shanghai</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">MYSQL_ROOT_PASSWORD=123456</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">MYSQL_USER=drone</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">MYSQL_PASSWORD=drone</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">MYSQL_DATABASE=drone</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">MYSQL_DATABASE_CHARSET=utf8mb4</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">MYSQL_DATABASE_COLLATION=utf8mb4_general_ci</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/root/docker/data/drone/mysql:/var/lib/mysql</span></span><br><span class="line">  <span class="attr">drone-server:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">drone/drone:latest</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">drone</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">10081</span><span class="string">:80</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">8443</span><span class="string">:443</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">TZ=Asia/Shanghai</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">DRONE_AGENTS_ENABLED=true</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">DRONE_GITEA_SERVER=http://192.168.56.100:10080/</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">DRONE_GITEA_CLIENT_ID=e2a50d23-2a78-4bcd-8fa2-b656bb944904</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">DRONE_GITEA_CLIENT_SECRET=VGLOi5YC9XgauXcHbNTpAMpPcUnK6ALdR7hgatCV0ic=</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">DRONE_RPC_SECRET=5d1789d5aa2ee55e6a5b956bec3c328f</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">DRONE_SERVER_HOST=192.168.56.100:10081</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">DRONE_SERVER_PROTO=http</span></span><br><span class="line"><span class="comment"># gitea的用户名，否则没有</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">DRONE_USER_CREATE=username:gitea,admin:true</span></span><br><span class="line"><span class="comment">#      - DRONE_LOGS_DEBUG=true</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">DRONE_GIT_USERNAME=gitea</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">DRONE_GIT_PASSWORD=gitea</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">DRONE_GIT_ALWAYS_AUTH=false</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">DRONE_DATABASE_DRIVER=mysql</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">DRONE_DATABASE_DATASOURCE=drone:drone@tcp(drone_mysql:3306)/drone?parseTime=true</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/root/docker/data/drone/drone:/data</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">mysql</span></span><br><span class="line">  <span class="attr">drone-agent:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">drone/agent:latest</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">runner</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">13000</span><span class="string">:3000</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">TZ=Asia/Shanghai</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">DRONE_RPC_PROTO=http</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">DRONE_RPC_HOST=drone</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">DRONE_RPC_SECRET=5d1789d5aa2ee55e6a5b956bec3c328f</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">DRONE_RUNNER_CAPACITY=2</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">DRONE_RUNNER_NAME=$&#123;HOSTNAME&#125;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">DRONE_DEBUG=true</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/var/run/docker.sock:/var/run/docker.sock</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">drone-server</span></span><br></pre></td></tr></table></figure><p>注意：<code>DRONE_USER_CREATE=username:gitea,admin:true</code>中username是gitea的账号</p><p>执行命令<code>docker-compose up -d</code></p><p>访问192.168.56.100:10081，完成gitea的授权</p><p><img src="/" alt="" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/wangyangyangisme/CDN@latest/blog/drone/drone15.png"></p><p><img src="/" alt="" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/wangyangyangisme/CDN@latest/blog/drone/drone11.png"></p><p><img src="/" alt="" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/wangyangyangisme/CDN@latest/blog/drone/drone12.png"></p><p><img src="/" alt="" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/wangyangyangisme/CDN@latest/blog/drone/drone13.png"></p><p><img src="/" alt="" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/wangyangyangisme/CDN@latest/blog/drone/drone14.png"></p><p>在harbor新建一个项目wmicro</p><p>在项目根目录中编写 .drone.yml</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">kind:</span> <span class="string">pipeline</span></span><br><span class="line"><span class="attr">name:</span> <span class="string">wmicro</span></span><br><span class="line"></span><br><span class="line"><span class="attr">steps:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">build</span> <span class="string">micro</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">golang:1.13.6-alpine3.11</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">cache</span></span><br><span class="line">        <span class="attr">path:</span> <span class="string">/go</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">gocache</span></span><br><span class="line">        <span class="attr">path:</span> <span class="string">/root/.cache/go-build</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">CGO_ENABLED:</span> <span class="number">0</span></span><br><span class="line">      <span class="attr">GO111MODULE:</span> <span class="string">on</span></span><br><span class="line">      <span class="attr">GOPROXY:</span> <span class="string">https://mirrors.aliyun.com/goproxy,direct</span></span><br><span class="line">    <span class="attr">commands:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">go</span> <span class="string">version</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">go</span> <span class="string">env</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">cd</span> <span class="string">gate/micro</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">go</span> <span class="string">build</span> <span class="string">-o</span> <span class="string">micro</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">build</span> <span class="string">dd</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">golang:1.13.6-alpine3.11</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">cache</span></span><br><span class="line">        <span class="attr">path:</span> <span class="string">/go</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">gocache</span></span><br><span class="line">        <span class="attr">path:</span> <span class="string">/root/.cache/go-build</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">CGO_ENABLED:</span> <span class="number">0</span></span><br><span class="line">      <span class="attr">GO111MODULE:</span> <span class="string">on</span></span><br><span class="line">      <span class="attr">GOPROXY:</span> <span class="string">https://mirrors.aliyun.com/goproxy,direct</span></span><br><span class="line">    <span class="attr">commands:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">go</span> <span class="string">version</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">go</span> <span class="string">env</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">cd</span> <span class="string">web/dd</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">go</span> <span class="string">build</span> <span class="string">-o</span> <span class="string">dd</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">build</span> <span class="string">gid</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">golang:1.13.6-alpine3.11</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">cache</span></span><br><span class="line">        <span class="attr">path:</span> <span class="string">/go</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">gocache</span></span><br><span class="line">        <span class="attr">path:</span> <span class="string">/root/.cache/go-build</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">CGO_ENABLED:</span> <span class="number">0</span></span><br><span class="line">      <span class="attr">GO111MODULE:</span> <span class="string">on</span></span><br><span class="line">      <span class="attr">GOPROXY:</span> <span class="string">https://mirrors.aliyun.com/goproxy,direct</span></span><br><span class="line">    <span class="attr">commands:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">go</span> <span class="string">version</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">go</span> <span class="string">env</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">cd</span> <span class="string">srv/gid</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">go</span> <span class="string">build</span> <span class="string">-o</span> <span class="string">gid</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">build</span> <span class="string">passport</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">golang:1.13.6-alpine3.11</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">cache</span></span><br><span class="line">        <span class="attr">path:</span> <span class="string">/go</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">gocache</span></span><br><span class="line">        <span class="attr">path:</span> <span class="string">/root/.cache/go-build</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">CGO_ENABLED:</span> <span class="number">0</span></span><br><span class="line">      <span class="attr">GO111MODULE:</span> <span class="string">on</span></span><br><span class="line">      <span class="attr">GOPROXY:</span> <span class="string">https://mirrors.aliyun.com/goproxy,direct</span></span><br><span class="line">    <span class="attr">commands:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">go</span> <span class="string">version</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">go</span> <span class="string">env</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">cd</span> <span class="string">srv/passport</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">go</span> <span class="string">build</span> <span class="string">-o</span> <span class="string">passport</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">build</span> <span class="string">user</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">golang:1.13.6-alpine3.11</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">cache</span></span><br><span class="line">        <span class="attr">path:</span> <span class="string">/go</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">gocache</span></span><br><span class="line">        <span class="attr">path:</span> <span class="string">/root/.cache/go-build</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">CGO_ENABLED:</span> <span class="number">0</span></span><br><span class="line">      <span class="attr">GO111MODULE:</span> <span class="string">on</span></span><br><span class="line">      <span class="attr">GOPROXY:</span> <span class="string">https://mirrors.aliyun.com/goproxy,direct</span></span><br><span class="line">    <span class="attr">commands:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">go</span> <span class="string">version</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">go</span> <span class="string">env</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">cd</span> <span class="string">srv/user</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">go</span> <span class="string">build</span> <span class="string">-o</span> <span class="string">user</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">publish</span> <span class="string">micro</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">plugins/docker:18.09</span></span><br><span class="line">    <span class="attr">settings:</span></span><br><span class="line">      <span class="attr">username:</span> <span class="string">admin</span></span><br><span class="line">      <span class="attr">password:</span> <span class="string">Harbor12345</span></span><br><span class="line">      <span class="attr">context:</span> <span class="string">gate/micro</span></span><br><span class="line">      <span class="attr">dockerfile:</span> <span class="string">gate/micro/Dockerfile</span></span><br><span class="line">      <span class="attr">repo:</span> <span class="number">192.168</span><span class="number">.56</span><span class="number">.100</span><span class="string">/wmicro/micro</span></span><br><span class="line">      <span class="attr">registry:</span> <span class="number">192.168</span><span class="number">.56</span><span class="number">.100</span></span><br><span class="line">      <span class="attr">tags:</span> <span class="string">latest</span></span><br><span class="line">      <span class="attr">insecure:</span> <span class="literal">true</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">publish</span> <span class="string">dd</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">plugins/docker:18.09</span></span><br><span class="line">    <span class="attr">settings:</span></span><br><span class="line">      <span class="attr">username:</span> <span class="string">admin</span></span><br><span class="line">      <span class="attr">password:</span> <span class="string">Harbor12345</span></span><br><span class="line">      <span class="attr">context:</span> <span class="string">web/dd</span></span><br><span class="line">      <span class="attr">dockerfile:</span> <span class="string">web/dd/Dockerfile</span></span><br><span class="line">      <span class="attr">repo:</span> <span class="number">192.168</span><span class="number">.56</span><span class="number">.100</span><span class="string">/wmicro/dd</span></span><br><span class="line">      <span class="attr">registry:</span> <span class="number">192.168</span><span class="number">.56</span><span class="number">.100</span></span><br><span class="line">      <span class="attr">tags:</span> <span class="string">latest</span></span><br><span class="line">      <span class="attr">insecure:</span> <span class="literal">true</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">publish</span> <span class="string">gid</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">plugins/docker:18.09</span></span><br><span class="line">    <span class="attr">settings:</span></span><br><span class="line">      <span class="attr">username:</span> <span class="string">admin</span></span><br><span class="line">      <span class="attr">password:</span> <span class="string">Harbor12345</span></span><br><span class="line">      <span class="attr">context:</span> <span class="string">srv/gid</span></span><br><span class="line">      <span class="attr">dockerfile:</span> <span class="string">srv/gid/Dockerfile</span></span><br><span class="line">      <span class="attr">repo:</span> <span class="number">192.168</span><span class="number">.56</span><span class="number">.100</span><span class="string">/wmicro/gid</span></span><br><span class="line">      <span class="attr">registry:</span> <span class="number">192.168</span><span class="number">.56</span><span class="number">.100</span></span><br><span class="line">      <span class="attr">tags:</span> <span class="string">latest</span></span><br><span class="line">      <span class="attr">insecure:</span> <span class="literal">true</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">publish</span> <span class="string">passport</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">plugins/docker:18.09</span></span><br><span class="line">    <span class="attr">settings:</span></span><br><span class="line">      <span class="attr">username:</span> <span class="string">admin</span></span><br><span class="line">      <span class="attr">password:</span> <span class="string">Harbor12345</span></span><br><span class="line">      <span class="attr">context:</span> <span class="string">srv/passport</span></span><br><span class="line">      <span class="attr">dockerfile:</span> <span class="string">srv/passport/Dockerfile</span></span><br><span class="line">      <span class="attr">repo:</span> <span class="number">192.168</span><span class="number">.56</span><span class="number">.100</span><span class="string">/wmicro/passport</span></span><br><span class="line">      <span class="attr">registry:</span> <span class="number">192.168</span><span class="number">.56</span><span class="number">.100</span></span><br><span class="line">      <span class="attr">tags:</span> <span class="string">latest</span></span><br><span class="line">      <span class="attr">insecure:</span> <span class="literal">true</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">publish</span> <span class="string">user</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">plugins/docker:18.09</span></span><br><span class="line">    <span class="attr">settings:</span></span><br><span class="line">      <span class="attr">username:</span> <span class="string">admin</span></span><br><span class="line">      <span class="attr">password:</span> <span class="string">Harbor12345</span></span><br><span class="line">      <span class="attr">context:</span> <span class="string">srv/user</span></span><br><span class="line">      <span class="attr">dockerfile:</span> <span class="string">srv/user/Dockerfile</span></span><br><span class="line">      <span class="attr">repo:</span> <span class="number">192.168</span><span class="number">.56</span><span class="number">.100</span><span class="string">/wmicro/user</span></span><br><span class="line">      <span class="attr">registry:</span> <span class="number">192.168</span><span class="number">.56</span><span class="number">.100</span></span><br><span class="line">      <span class="attr">tags:</span> <span class="string">latest</span></span><br><span class="line">      <span class="attr">insecure:</span> <span class="literal">true</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">deploy</span> <span class="string">micro</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">appleboy/drone-ssh:1.5.5</span></span><br><span class="line">    <span class="attr">settings:</span></span><br><span class="line">      <span class="attr">host:</span> <span class="number">192.168</span><span class="number">.56</span><span class="number">.100</span></span><br><span class="line">      <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">      <span class="attr">password:</span> <span class="string">vagrant</span></span><br><span class="line">      <span class="attr">port:</span> <span class="number">22</span></span><br><span class="line">      <span class="attr">script:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">docker</span> <span class="string">pull</span> <span class="number">192.168</span><span class="number">.56</span><span class="number">.100</span><span class="string">/wmicro/micro</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">docker</span> <span class="string">rm</span> <span class="string">-f</span> <span class="string">micro</span> <span class="string">||</span> <span class="literal">true</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">docker</span> <span class="string">image</span> <span class="string">prune</span> <span class="string">-f</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">docker</span> <span class="string">run</span> <span class="string">-d</span> <span class="string">--name</span> <span class="string">micro</span> <span class="string">-p</span> <span class="number">8082</span><span class="string">:8082</span> <span class="number">192.168</span><span class="number">.56</span><span class="number">.100</span><span class="string">/wmicro/micro</span> <span class="string">web</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">deploy</span> <span class="string">dd</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">appleboy/drone-ssh:1.5.5</span></span><br><span class="line">    <span class="attr">settings:</span></span><br><span class="line">      <span class="attr">host:</span> <span class="number">192.168</span><span class="number">.56</span><span class="number">.100</span></span><br><span class="line">      <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">      <span class="attr">password:</span> <span class="string">vagrant</span></span><br><span class="line">      <span class="attr">port:</span> <span class="number">22</span></span><br><span class="line">      <span class="attr">script:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">docker</span> <span class="string">pull</span> <span class="number">192.168</span><span class="number">.56</span><span class="number">.100</span><span class="string">/wmicro/dd</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">docker</span> <span class="string">rm</span> <span class="string">-f</span> <span class="string">dd</span> <span class="string">||</span> <span class="literal">true</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">docker</span> <span class="string">image</span> <span class="string">prune</span> <span class="string">-f</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">docker</span> <span class="string">run</span> <span class="string">-d</span> <span class="string">--name</span> <span class="string">dd</span> <span class="number">192.168</span><span class="number">.56</span><span class="number">.100</span><span class="string">/wmicro/dd</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">deploy</span> <span class="string">gid</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">appleboy/drone-ssh:1.5.5</span></span><br><span class="line">    <span class="attr">settings:</span></span><br><span class="line">      <span class="attr">host:</span> <span class="number">192.168</span><span class="number">.56</span><span class="number">.100</span></span><br><span class="line">      <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">      <span class="attr">password:</span> <span class="string">vagrant</span></span><br><span class="line">      <span class="attr">port:</span> <span class="number">22</span></span><br><span class="line">      <span class="attr">script:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">docker</span> <span class="string">pull</span> <span class="number">192.168</span><span class="number">.56</span><span class="number">.100</span><span class="string">/wmicro/gid</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">docker</span> <span class="string">rm</span> <span class="string">-f</span> <span class="string">gid</span> <span class="string">||</span> <span class="literal">true</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">docker</span> <span class="string">image</span> <span class="string">prune</span> <span class="string">-f</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">docker</span> <span class="string">run</span> <span class="string">-d</span> <span class="string">--name</span> <span class="string">gid</span> <span class="number">192.168</span><span class="number">.56</span><span class="number">.100</span><span class="string">/wmicro/gid</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">deploy</span> <span class="string">passport</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">appleboy/drone-ssh:1.5.5</span></span><br><span class="line">    <span class="attr">settings:</span></span><br><span class="line">      <span class="attr">host:</span> <span class="number">192.168</span><span class="number">.56</span><span class="number">.100</span></span><br><span class="line">      <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">      <span class="attr">password:</span> <span class="string">vagrant</span></span><br><span class="line">      <span class="attr">port:</span> <span class="number">22</span></span><br><span class="line">      <span class="attr">script:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">docker</span> <span class="string">pull</span> <span class="number">192.168</span><span class="number">.56</span><span class="number">.100</span><span class="string">/wmicro/passport</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">docker</span> <span class="string">rm</span> <span class="string">-f</span> <span class="string">passport</span> <span class="string">||</span> <span class="literal">true</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">docker</span> <span class="string">image</span> <span class="string">prune</span> <span class="string">-f</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">docker</span> <span class="string">run</span> <span class="string">-d</span> <span class="string">--name</span> <span class="string">passport</span> <span class="number">192.168</span><span class="number">.56</span><span class="number">.100</span><span class="string">/wmicro/passport</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">deploy</span> <span class="string">user</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">appleboy/drone-ssh:1.5.5</span></span><br><span class="line">    <span class="attr">settings:</span></span><br><span class="line">      <span class="attr">host:</span> <span class="number">192.168</span><span class="number">.56</span><span class="number">.100</span></span><br><span class="line">      <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">      <span class="attr">password:</span> <span class="string">vagrant</span></span><br><span class="line">      <span class="attr">port:</span> <span class="number">22</span></span><br><span class="line">      <span class="attr">script:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">docker</span> <span class="string">pull</span> <span class="number">192.168</span><span class="number">.56</span><span class="number">.100</span><span class="string">/wmicro/user</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">docker</span> <span class="string">rm</span> <span class="string">-f</span> <span class="string">user</span> <span class="string">||</span> <span class="literal">true</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">docker</span> <span class="string">image</span> <span class="string">prune</span> <span class="string">-f</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">docker</span> <span class="string">run</span> <span class="string">-d</span> <span class="string">--name</span> <span class="string">user</span> <span class="number">192.168</span><span class="number">.56</span><span class="number">.100</span><span class="string">/wmicro/user</span></span><br><span class="line"><span class="attr">volumes:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">cache</span></span><br><span class="line">    <span class="attr">host:</span></span><br><span class="line">      <span class="attr">path:</span> <span class="string">/tmp/drone-cache/go</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">gocache</span></span><br><span class="line">    <span class="attr">host:</span></span><br><span class="line">      <span class="attr">path:</span> <span class="string">/tmp/drone-cache/go_build</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Drone-Gitea自动化部署&quot;&gt;&lt;a href=&quot;#Drone-Gitea自动化部署&quot; class=&quot;headerlink&quot; title=&quot;Drone+Gitea自动化部署&quot;&gt;&lt;/a&gt;Drone+Gitea自动化部署&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;
      
    
    </summary>
    
    
      <category term="CI/CD" scheme="http://wangyangyangisme.github.io/categories/CI-CD/"/>
    
    
      <category term="Drone" scheme="http://wangyangyangisme.github.io/tags/Drone/"/>
    
  </entry>
  
  <entry>
    <title>vagrantfile配置详解</title>
    <link href="http://wangyangyangisme.github.io/2020/03/02/vagrant-vagrantfile%E9%85%8D%E7%BD%AE%E8%AF%A6%E8%A7%A3/"/>
    <id>http://wangyangyangisme.github.io/2020/03/02/vagrant-vagrantfile配置详解/</id>
    <published>2020-03-02T05:38:36.000Z</published>
    <updated>2020-03-02T05:24:38.383Z</updated>
    
    <content type="html"><![CDATA[<h1 id="vagrantfile配置详解"><a href="#vagrantfile配置详解" class="headerlink" title="vagrantfile配置详解"></a>vagrantfile配置详解</h1><h2 id="1、简介"><a href="#1、简介" class="headerlink" title="1、简介"></a>1、简介</h2><p>在我们的工作目录下有一个Vagrantfile文件，里面包含有大量的配置信息，通过它可以定义虚拟机的各种配置，如网络、内存、主机名等，主要包括三个方面的配置，虚拟机的配置、SSH配置、Vagrant的一些基础配置。Vagrant是使用Ruby开发的，所以它的配置语法也是Ruby的，每个项目都需要有一个Vagrantfile，在执行vagrant init的目录下可以找到该文件</p><h2 id="2、Vagrantfile文件"><a href="#2、Vagrantfile文件" class="headerlink" title="2、Vagrantfile文件"></a>2、Vagrantfile文件</h2><p>Vagrantfile中有两行配置:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Vagrant.configure("2") do |config|</span><br><span class="line">config.vm.box = "centos7"</span><br></pre></td></tr></table></figure><p>这两行就是我们在vagrant init中后面所指定的参数。由此可以看出，vagrant init只是帮我们生成了配置文件而已，换句话说，如果我们写好了Vagrantfile，就不需要vagrant init，只需将准备好的配置文件放入到所需目录中，然后直接执行vagrant up即可。</p><p>还有很多注释掉的配置，那些都是一些常用的配置，包括网卡设置、IP地址、绑定目录，甚至可以指定内存大小、CPU个数、是否启动界面等等。如果需要，可以根据注释文本进行配置。</p><h2 id="3、-配置详解"><a href="#3、-配置详解" class="headerlink" title="3、 配置详解"></a>3、 配置详解</h2><p>下面是一些常用的配置：</p><ul><li><strong>config.vm.hostname</strong>：配置虚拟机主机名</li><li><strong>config.vm.network</strong>：这是配置虚拟机网络</li><li><strong>config.vm.synced_folder</strong>：除了默认的目录绑定外，还可以手动指定绑定</li><li><strong>config.ssh.username</strong>：默认的用户是vagrant，从官方下载的box往往使用的是这个用户名。如果是自定制的box，所使用的用户名可能会有所不同，通过这个配置设定所用的用户名。</li><li><strong>config.vm.provision</strong>：我们可以通过这个配置在虚拟机第一次启动的时候进行一些安装配置</li></ul><p>需要注意的是，Vagrantfile文件只会在第一次执行vagrant up时调用执行，之后如果不使用<code>vagrant reload</code>进行重新加载，则不会被强制重新加载。</p><h3 id="3-1、box设置"><a href="#3-1、box设置" class="headerlink" title="3.1、box设置"></a>3.1、box设置</h3><p><strong>config.vm.box</strong> = “centos7”</p><p>该名称是再使用 vagrant init 中后面跟的名字。</p><h3 id="3-2、hostname设置"><a href="#3-2、hostname设置" class="headerlink" title="3.2、hostname设置"></a>3.2、hostname设置</h3><p><strong>config.vm.hostname</strong> = “node1”<br>设置hostname非常重要，因为当我们有很多台虚拟服务器的时候，都是依靠hostname來做识别的。比如，我安装了centos1,centos2 两台虚拟机，再启动时，我可以通过vagrant up centos1来指定只启动哪一台。</p><h3 id="3-3、虚拟机网络设置"><a href="#3-3、虚拟机网络设置" class="headerlink" title="3.3、虚拟机网络设置"></a>3.3、虚拟机网络设置</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> Host-only模式</span></span><br><span class="line">config.vm.network "private_network", ip: "192.168.10.11"</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Bridge模式</span></span><br><span class="line">config.vm.network "public_network", ip: "10.1.2.61"</span><br></pre></td></tr></table></figure><p>Vagrant的网络连接方式有三种：</p><ul><li><p><strong>NAT</strong> : 缺省创建，用于让vm可以通过host转发访问局域网甚至互联网。</p></li><li><p><strong>host-only</strong> : 只有主机可以访问vm，其他机器无法访问它。</p></li><li><p><strong>bridge</strong> : 此模式下vm就像局域网中的一台独立的机器，可以被其他机器访问。</p></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 配置当前vm的host-only网络的IP地址为192.168.33.10</span></span><br><span class="line">config.vm.network :private_network, ip: "192.168.33.10"</span><br></pre></td></tr></table></figure><p>host-only 模式的IP可以不指定，而是采用dhcp自动生成的方式，如 :</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">创建一个bridge桥接网络，指定IP</span></span><br><span class="line">config.vm.network "private_network", type: "dhcp”</span><br><span class="line"><span class="meta">#</span><span class="bash">config.vm.network <span class="string">"public_network"</span>, ip: <span class="string">"192.168.0.17"</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash">创建一个bridge桥接网络，指定桥接适配器</span></span><br><span class="line"><span class="meta">#</span><span class="bash">config.vm.network <span class="string">"public_network"</span>, bridge: <span class="string">"en1: Wi-Fi (AirPort)"</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash">创建一个bridge桥接网络，不指定桥接适配器</span></span><br><span class="line">config.vm.network "public_network"</span><br></pre></td></tr></table></figure><h3 id="3-4、同步目录设置"><a href="#3-4、同步目录设置" class="headerlink" title="3.4、同步目录设置"></a>3.4、同步目录设置</h3><p><strong>config.vm.synced_folder</strong>  “D:/xxx/code”, “/home/www/“<br>前面的路径(D:/xxx/code)是本机代码的地址，后面的地址就是虚拟机的目录。虚拟机的/vagrant目录默认挂载宿主机的开发目录(可以在进入虚拟机机后，使用df -h 查看)，这是在虚拟机启动时自动挂载的。我们还可以设置额外的共享目录，上面这个设定，第一个参数是宿主机的目录，第二个参数是虚拟机挂载的目录。</p><h3 id="3-5、端口转发设置"><a href="#3-5、端口转发设置" class="headerlink" title="3.5、端口转发设置"></a>3.5、端口转发设置</h3><p><strong>config.vm.network</strong>  :forwarded_port, guest: 80, host: 8080<br>上面的配置把宿主机上的8080端口映射到客户虚拟机的80端口，例如你在虚拟机上使用nginx跑了一个Go应用，那么你在host上的浏览器中打开<a href="http://localhost:8080时，Vagrant就会把这个请求转发到虚拟机里跑在80端口的nginx服务上。不建议使用该方法，因为涉及端口占用问题，常常导致应用之间不能正常通信，建议使用Host-only和Bridge方式进行设置。">http://localhost:8080时，Vagrant就会把这个请求转发到虚拟机里跑在80端口的nginx服务上。不建议使用该方法，因为涉及端口占用问题，常常导致应用之间不能正常通信，建议使用Host-only和Bridge方式进行设置。</a></p><p>guest和host是必须的，还有几个可选属性：</p><ul><li>guest_ip：字符串，vm指定绑定的Ip，缺省为0.0.0.0</li><li>host_ip：字符串，host指定绑定的Ip，缺省为0.0.0.0</li><li>protocol：字符串，可选TCP或UDP，缺省为TCP</li></ul><h3 id="3-6、定义vm的configure配置节点"><a href="#3-6、定义vm的configure配置节点" class="headerlink" title="3.6、定义vm的configure配置节点"></a>3.6、定义vm的configure配置节点</h3><p>一个节点就是一个虚拟机</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">config.vm.define :mysql do |mysql_config|</span><br><span class="line">...</span><br><span class="line">end</span><br></pre></td></tr></table></figure><p>表示在config配置中，定义一个名为mysql的vm配置，该节点下的配置信息命名为mysql_config； 如果该Vagrantfile配置文件只定义了一个vm，这个配置节点层次可忽略。</p><p>还可以在一个Vagrantfile文件里建立多个虚拟机，一般情况下，你可以用多主机功能完成以下任务：</p><ul><li>分布式的服务，例如网站服务器和数据库服务器</li><li>分发系统</li><li>测试接口</li><li>灾难测试</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Vagrant.configure("2") do |config|  </span><br><span class="line">  config.vm.define "web" do |web|</span><br><span class="line">    web.vm.box = "apache"</span><br><span class="line">  end</span><br><span class="line"> </span><br><span class="line">  config.vm.define "db" do |db|</span><br><span class="line">    db.vm.box = "mysql"</span><br><span class="line">  end</span><br><span class="line">end</span><br></pre></td></tr></table></figure><p>当定义了多主机之后，在使用vagrant命令的时候，就需要加上主机名，例如vagrant ssh web；也有一些命令，如果你不指定特定的主机，那么将会对所有的主机起作用，比如vagrant up；你也可以使用表达式指定特定的主机名，例如vagrant up /follower[0-9]/。</p><h3 id="3-7、通用数据-设置一些基础数据，供配置信息中调用。"><a href="#3-7、通用数据-设置一些基础数据，供配置信息中调用。" class="headerlink" title="3.7、通用数据 设置一些基础数据，供配置信息中调用。"></a>3.7、通用数据 设置一些基础数据，供配置信息中调用。</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">app_servers = &#123;</span><br><span class="line">:service1 =&gt; '192.168.33.20',</span><br><span class="line">:service2 =&gt; '192.168.33.21'</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里是定义一个hashmap，以key-value方式来存储vm主机名和ip地址。</p><h3 id="3-8、配置信息"><a href="#3-8、配置信息" class="headerlink" title="3.8、配置信息"></a>3.8、配置信息</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ENV["LC_ALL"] = "en_US.UTF-8"</span><br><span class="line"><span class="meta">#</span><span class="bash">指定vm的语言环境，缺省地，会继承host的locale配置</span></span><br><span class="line">Vagrant.configure("2") do |config|</span><br><span class="line">    # ...</span><br><span class="line">end</span><br></pre></td></tr></table></figure><p>参数2，表示的是当前配置文件使用的vagrant configure版本号为Vagrant 1.1+,如果取值为1，表示为Vagrant 1.0.x Vagrantfiles，旧版本暂不考虑，记住就写2即可。</p><p>do … end 为配置的开始结束符，所有配置信息都写在这两段代码之间。 config是为当前配置命名，你可以指定任意名称，如myvmconfig，在后面引用的时候，改为自己的名字即可。</p><h3 id="3-9、vm提供者配置"><a href="#3-9、vm提供者配置" class="headerlink" title="3.9、vm提供者配置"></a>3.9、vm提供者配置</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">config.vm.provider :virtualbox do |vb|</span><br><span class="line">     # ...</span><br><span class="line">end</span><br></pre></td></tr></table></figure><p><strong>vm provider通用配置</strong></p><p>虚机容器提供者配置，对于不同的provider，特有的一些配置，此处配置信息是针对virtualbox定义一个提供者，命名为vb，跟前面一样，这个名字随意取，只要节点内部调用一致即可。<br>配置信息又分为通用配置和个性化配置，通用配置对于不同provider是通用的，常用的通用配置如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">指定vm-name，也就是virtualbox管理控制台中的虚机名称。如果不指会生成一个随机的名字，不容易区分。</span></span><br><span class="line">vb.name = "centos7"</span><br><span class="line"><span class="meta">#</span><span class="bash"> vagrant up启动时，是否自动打开virtual box的窗口，缺省为<span class="literal">false</span></span></span><br><span class="line">vb.gui = true</span><br><span class="line"><span class="meta">#</span><span class="bash">指定vm内存，单位为MB</span></span><br><span class="line">vb.memory = "1024"</span><br><span class="line"><span class="meta">#</span><span class="bash">设置CPU个数</span></span><br><span class="line">vb.cpus = 2</span><br></pre></td></tr></table></figure><p><strong>vm provider个性化配置(virtualbox)</strong></p><p>上面的provider配置是通用的配置，针对不同的虚拟机，还有一些的个性的配置，通过vb.customize配置来定制。</p><p>对virtual box的个性化配置，可以参考：VBoxManage modifyvm 命令的使用方法。详细的功能接口和使用说明，可以参考virtualbox官方文档。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">修改vb.name的值</span></span><br><span class="line">v.customize ["modifyvm", :id, "--name", "mfsmaster2"]</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">如修改显存，缺省为8M，如果启动桌面，至少需要10M，如下修改为16M：</span></span><br><span class="line">vb.customize ["modifyvm", :id, "--vram", "16"]</span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash">调整虚拟机的内存</span></span><br><span class="line">vb.customize ["modifyvm", :id, "--memory", "1024"]</span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash">指定虚拟CPU个数</span></span><br><span class="line">vb.customize ["modifyvm", :id, "--cpus", "2"]</span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash">增加光驱：</span></span><br><span class="line">vb.customize ["storageattach",:id,"--storagectl", "IDE Controller","--port","0","--device","0","--type","dvddrive","--medium","/Applications/VirtualBox.app/Contents/MacOS/VBoxGuestAdditions.iso"]</span><br><span class="line"><span class="meta">#</span><span class="bash">注：meduim参数不可以为空，如果只挂载驱动器不挂在iso，指定为“emptydrive”。如果要卸载光驱，medium传入none即可。</span></span><br><span class="line"><span class="meta">#</span><span class="bash">从这个指令可以看出，customize方法传入一个json数组，按照顺序传入参数即可。</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">json数组传入多个参数</span></span><br><span class="line">v.customize ["modifyvm", :id, "--name", “mfsserver3", "--memory", “2048"]</span><br></pre></td></tr></table></figure><h3 id="3-10、一组相同配置的vm"><a href="#3-10、一组相同配置的vm" class="headerlink" title="3.10、一组相同配置的vm"></a>3.10、一组相同配置的vm</h3><p>前面配置了一组vm的hash map，定义一组vm时，使用如下节点遍历。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">遍历app_servers map，将key和value分别赋值给app_server_name和app_server_ip</span></span><br><span class="line">app_servers.each do |app_server_name, app_server_ip|</span><br><span class="line">     #针对每一个app_server_name，来配置config.vm.define配置节点，命名为app_config</span><br><span class="line">     config.vm.define app_server_name do |app_config|</span><br><span class="line">          # 此处配置，参考config.vm.define</span><br><span class="line">     end</span><br><span class="line">end</span><br></pre></td></tr></table></figure><p>如果不想定义app_servers，下面也是一种方案:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">(1..3).each do |i|</span><br><span class="line">           config.vm.define "app-#&#123;i&#125;" do |node|</span><br><span class="line">           app_config.vm.hostname = "app-#&#123;i&#125;.vagrant.internal"</span><br><span class="line">           app_config.vm.provider "virtualbox" do |vb|</span><br><span class="line">               vb.name = app-#&#123;i&#125;</span><br><span class="line">           end</span><br><span class="line">     end</span><br><span class="line">   end</span><br></pre></td></tr></table></figure><h3 id="3-11、provision任务"><a href="#3-11、provision任务" class="headerlink" title="3.11、provision任务"></a>3.11、provision任务</h3><p>你可以编写一些命令，让vagrant在启动虚拟机的时候自动执行，这样你就可以省去手动配置环境的时间了。<br><strong>脚本何时会被执行</strong></p><ul><li>第一次执行vagrant up命令</li><li>执行vagrant provision命令</li><li>执行vagrant reload –provision或者vagrant up –provision命令</li><li>你也可以在启动虚拟机的时候添加–no-provision参数以阻止脚本被执行</li></ul><p><strong>provision任务是什么？</strong></p><p>provision任务是预先设置的一些操作指令，格式：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">config.vm.provision 命令字 json格式参数</span><br><span class="line"> </span><br><span class="line">config.vm.provion 命令字 do |s|</span><br><span class="line">    s.参数名 = 参数值</span><br><span class="line">end</span><br></pre></td></tr></table></figure><p>每一个 config.vm.provision 命令字 代码段，我们称之为一个provisioner。</p><p>根据任务操作的对象，provisioner可以分为：</p><ul><li>Shell</li><li>File</li><li>Ansible</li><li>CFEngine</li><li>Chef</li><li>Docker</li><li>Puppet</li><li>Salt</li></ul><p>根据vagrantfile的层次，分为：</p><p>configure级：它定义在 Vagrant.configure(“2”) 的下一层次，形如： config.vm.provision …</p><p>vm级：它定义在 config.vm.define “web” do |web| 的下一层次，web.vm.provision …</p><p>执行的顺序是先执行configure级任务，再执行vm级任务，即便configure级任务在vm定义的下面才定义。例如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Vagrant.configure("2") do |config|</span><br><span class="line">  config.vm.provision "shell", inline: "echo 1"</span><br><span class="line"> </span><br><span class="line">  config.vm.define "web" do |web|</span><br><span class="line">    web.vm.provision "shell", inline: "echo 2"</span><br><span class="line">  end</span><br><span class="line"> </span><br><span class="line">  config.vm.provision "shell", inline: "echo 3"</span><br><span class="line">end</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">==&gt; default: "1"</span><br><span class="line">==&gt; default: "2"</span><br><span class="line">==&gt; default: "3"</span><br></pre></td></tr></table></figure><p><strong>如何使用</strong></p><p>● 单行脚本</p><p>helloword只是一个开始，对于inline模式，命令只能在写在一行中。</p><p>单行脚本使用的基本格式：</p><p><strong>config.vm.provision</strong>  “shell”, inline: “echo fendo”</p><p>shell命令的参数还可以写入do … end代码块中，如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">config.vm.provision "shell" do |s|</span><br><span class="line">s.inline = "echo hello provision."</span><br><span class="line">end</span><br></pre></td></tr></table></figure><p>● 内联脚本</p><p>如果要执行脚本较多，可以在Vagrantfile中指定内联脚本，在Vagrant.configure节点外面，写入命名内联脚本：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash">script = &lt;&lt;SCRIPT</span></span><br><span class="line">echo I am provisioning...</span><br><span class="line">echo hello provision.</span><br><span class="line">SCRIPT</span><br></pre></td></tr></table></figure><p>然后，inline调用如下：</p><p><strong>config.vm.provision</strong>  “shell”, inline: $script</p><p>● 外部脚本</p><p>也可以把代码写入代码文件，并保存在一个shell里，进行调用：</p><p><strong>config.vm.provision</strong>  “shell”, path: “script.sh”</p><p>script.sh的内容：</p><p>echo hello provision.</p><p>注意:</p><p>如果使用provision来安装程序，如yum install lrzsz会出现如下错误:</p><p>使用<code>yum install -y</code>就行了。</p><p>修改完Vagrantfile的配置后，记得要重启虚拟机，才能使用虚拟机更新后的配置。</p><p><strong>vagrant reload</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;vagrantfile配置详解&quot;&gt;&lt;a href=&quot;#vagrantfile配置详解&quot; class=&quot;headerlink&quot; title=&quot;vagrantfile配置详解&quot;&gt;&lt;/a&gt;vagrantfile配置详解&lt;/h1&gt;&lt;h2 id=&quot;1、简介&quot;&gt;&lt;a href
      
    
    </summary>
    
    
      <category term="vagrant" scheme="http://wangyangyangisme.github.io/categories/vagrant/"/>
    
    
      <category term="vagrant" scheme="http://wangyangyangisme.github.io/tags/vagrant/"/>
    
  </entry>
  
  <entry>
    <title>Vagrant搭建虚拟环境</title>
    <link href="http://wangyangyangisme.github.io/2020/03/02/vagrant-Vagrant%E6%90%AD%E5%BB%BA%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83/"/>
    <id>http://wangyangyangisme.github.io/2020/03/02/vagrant-Vagrant搭建虚拟环境/</id>
    <published>2020-03-02T03:00:36.000Z</published>
    <updated>2020-03-02T03:12:42.823Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Vagrant搭建虚拟环境"><a href="#Vagrant搭建虚拟环境" class="headerlink" title="Vagrant搭建虚拟环境"></a>Vagrant搭建虚拟环境</h1><blockquote><p>Vagrant 是基于 VirtualBox 虚拟机的，通俗的讲，就是用虚拟机的环境运行本地的代码。代码可以在本地直接编辑和调试，你可以在本地浏览器里查看运行中 Web 应用。而这套虚拟机是可以直接导入到其他电脑上的使用的，这样团队其他成员省去了配置时间，更能保证开发环境和生产环境的统一。</p><p>Vagrant的强大在于是一个镜像，配置完以后镜像可以放到任何地方去，真正做到了一劳永逸了。</p></blockquote><p><strong>Vagrant的官方网站:</strong> <a href="http://www.vagrantup.com/" target="_blank" rel="noopener">http://www.vagrantup.com/</a></p><p><strong>Vagrant镜像</strong></p><ul><li>官方镜像：<a href="https://app.vagrantup.com/boxes/search" target="_blank" rel="noopener">https://app.vagrantup.com/boxes/search</a></li><li>三方镜像：<a href="http://www.vagrantbox.es/" target="_blank" rel="noopener">http://www.vagrantbox.es/</a></li></ul><h2 id="1-安装Virtualbox"><a href="#1-安装Virtualbox" class="headerlink" title="1.安装Virtualbox"></a>1.安装Virtualbox</h2><p>下载地址：<a href="https://www.virtualbox.org/wiki/Downloads" target="_blank" rel="noopener">https://www.virtualbox.org/wiki/Downloads</a></p><p><img src="/" alt="" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/wangyangyangisme/CDN@latest/blog/vagrant/vagrant1.png"></p><p>修改配置虚拟机安装路径</p><p><img src="/" alt="" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/wangyangyangisme/CDN@latest/blog/vagrant/vagrant2.png"></p><p><img src="/" alt="" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/wangyangyangisme/CDN@latest/blog/vagrant/vagrant3.png"></p><h2 id="2-安装Vagrant"><a href="#2-安装Vagrant" class="headerlink" title="2.安装Vagrant"></a>2.安装Vagrant</h2><p>下载地址：<a href="https://www.vagrantup.com/downloads.html" target="_blank" rel="noopener">https://www.vagrantup.com/downloads.html</a></p><p>更改vagrant配置文件的位置</p><p>将<code>C:\Users\user_name\.vagrant.d</code>移动到新的位置，新建环境变量<code>VAGRANT_HOME</code>，并指向新路径</p><h2 id="3-初始化虚拟机"><a href="#3-初始化虚拟机" class="headerlink" title="3.初始化虚拟机"></a>3.初始化虚拟机</h2><h3 id="3-1-在线方式"><a href="#3-1-在线方式" class="headerlink" title="3.1 在线方式"></a>3.1 在线方式</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">添加镜像</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> vagrant box add debian https://dl.dropboxusercontent.com/u/3523744/boxes/debian-8.1-amd64-lxc-puppet/debian-8.1-lxc-puppet.box</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">初始化</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> vagrant init debian</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">启动 </span></span><br><span class="line"><span class="meta">$</span><span class="bash"> vagrant up</span></span><br></pre></td></tr></table></figure><h3 id="3-2-本地方式"><a href="#3-2-本地方式" class="headerlink" title="3.2 本地方式"></a>3.2 本地方式</h3><p>CentOS 7 box地址：<a href="https://app.vagrantup.com/centos/boxes/7/versions/1902.01" target="_blank" rel="noopener">https://app.vagrantup.com/centos/boxes/7/versions/1902.01</a></p><p><img src="/" alt="" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/wangyangyangisme/CDN@latest/blog/vagrant/vagrant4.png"></p><p>由于在vagrant box hub上下载box速度很慢，这里提前下载好centos 7 boxes，保存于<strong>H:\vagrant\box_files</strong>文件夹下，注意：目录结构保持与我的一致。<br><strong>下载方法是box地址+提供商名字</strong>（用迅雷下载比较快）<br><strong>如：<a href="https://app.vagrantup.com/centos/boxes/7/versions/1902.01/providers/virtualbox.box" target="_blank" rel="noopener">https://app.vagrantup.com/centos/boxes/7/versions/1902.01/providers/virtualbox.box</a></strong></p><p><img src="/" alt="" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/wangyangyangisme/CDN@latest/blog/vagrant/vagrant5.png"></p><p>CentOS-7-x86_64-Vagrant-1902_01.VirtualBox.json文件内容如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"centos/7"</span>,</span><br><span class="line">  <span class="attr">"versions"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"version"</span>: <span class="string">"1902.01"</span>,</span><br><span class="line">      <span class="attr">"providers"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"name"</span>: <span class="string">"virtualbox"</span>,</span><br><span class="line">          <span class="attr">"url"</span>: <span class="string">"file://H:/vagrant/box_files/CentOS-7-x86_64-Vagrant-1902_01.VirtualBox.box"</span></span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>添加镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> H:/vagrant/box_files</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">执行以下命令</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> vagrant box add CentOS-7-x86_64-Vagrant-1902_01.VirtualBox.json</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">删除box模板</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> vagrant box remove centos/7</span></span><br></pre></td></tr></table></figure><h3 id="3-3-启动一个虚拟机"><a href="#3-3-启动一个虚拟机" class="headerlink" title="3.3 启动一个虚拟机"></a>3.3 启动一个虚拟机</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> mkdir -p H:/vagrant/box_files/<span class="built_in">test</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> H:/vagrant/box_files/<span class="built_in">test</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">初始化,生成vagrantfile</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> vagrant init centos/7</span></span><br></pre></td></tr></table></figure><p>修改Vagrantfile配置，并准备系统配置脚本，<strong>注意virtualbox的网段在192.168.56.1</strong></p><p>Vagrntfile文件内容如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> -*- mode: ruby -*-</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> vi: <span class="built_in">set</span> ft=ruby :</span></span><br><span class="line"></span><br><span class="line">Vagrant.require_version "&gt;= 1.6.0"</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">virtualbox虚拟机网段是192.168.56.1</span></span><br><span class="line">boxes = [</span><br><span class="line">    &#123;</span><br><span class="line">        :name =&gt; "test",</span><br><span class="line">        :eth1 =&gt; "192.168.56.100",</span><br><span class="line">        :mem =&gt; "2048",</span><br><span class="line">        :cpu =&gt; "2"</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">Vagrant.configure(2) do |config|</span><br><span class="line">  config.vm.box = "centos/7"</span><br><span class="line">  config.vbguest.auto_update = false</span><br><span class="line">  config.vbguest.no_remote = true</span><br><span class="line"></span><br><span class="line">  boxes.each do |opts|</span><br><span class="line">    config.vm.define opts[:name] do |config|</span><br><span class="line">      config.vm.hostname = opts[:name]</span><br><span class="line">      config.vm.provider "vmware_fusion" do |v|</span><br><span class="line">        v.vmx["memsize"] = opts[:mem]</span><br><span class="line">        v.vmx["numvcpus"] = opts[:cpu]</span><br><span class="line">      end</span><br><span class="line"></span><br><span class="line">      config.vm.provider "virtualbox" do |vb|</span><br><span class="line">        vb.name = "lab-#&#123;config.vm.hostname&#125;"</span><br><span class="line">        vb.customize ["modifyvm", :id, "--memory", opts[:mem]]</span><br><span class="line">        vb.customize ["modifyvm", :id, "--cpus", opts[:cpu]]</span><br><span class="line">      end</span><br><span class="line"></span><br><span class="line">      config.vm.provider :libvirt do |lv|</span><br><span class="line">          lv.host = "lab-#&#123;config.vm.hostname&#125;"</span><br><span class="line">      end</span><br><span class="line"></span><br><span class="line">      config.vm.network :private_network, ip: opts[:eth1]</span><br><span class="line">    end</span><br><span class="line">  end</span><br><span class="line"></span><br><span class="line"><span class="meta">  #</span><span class="bash"> 禁用vagrant的默认共享目录</span></span><br><span class="line"><span class="meta">  #</span><span class="bash"> config.vm.synced_folder <span class="string">"."</span>, <span class="string">"/vagrant"</span>, disabled:<span class="literal">true</span></span></span><br><span class="line"><span class="meta">  #</span><span class="bash"> config.vm.synced_folder <span class="string">"../public"</span>, <span class="string">"/opt"</span>, mount_options:[<span class="string">"dmode=777"</span>,<span class="string">"fmode=666"</span>]</span></span><br><span class="line">  config.vm.provision "shell", privileged: true, path: "./setup.sh"</span><br><span class="line">end</span><br></pre></td></tr></table></figure><p>setup.sh文件内容如下:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">/bin/sh</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">  Delta RPMs disabled because /usr/bin/applydeltarpm not installed.</span></span><br><span class="line">sudo yum install -y deltarpm</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 设置时区</span></span><br><span class="line">timedatectl set-timezone Asia/Shanghai</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 关闭防护墙及selinux</span></span><br><span class="line">sed -i '/SELINUX/s/enforcing/disabled/g' /etc/selinux/config</span><br><span class="line">setenforce 0</span><br><span class="line">systemctl stop firewalld.service</span><br><span class="line">systemctl disable firewalld.service</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 允许密码登录</span></span><br><span class="line">sed -i '/^PasswordAuthentication no/s/no/yes/g' /etc/ssh/sshd_config</span><br><span class="line">systemctl restart sshd.service</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> install some tools</span></span><br><span class="line">sudo yum install -y git vim gcc glibc-static telnet bridge-utils net-tools</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> install docker</span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># step 1: 安装必要的一些系统工具</span></span></span><br><span class="line">sudo yum install -y yum-utils device-mapper-persistent-data lvm2</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># Step 2: 添加软件源信息</span></span></span><br><span class="line">sudo yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># Step 3: 更新并安装 Docker-CE</span></span></span><br><span class="line">sudo yum makecache fast</span><br><span class="line">sudo yum -y install docker-ce</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 镜像加速器</span></span></span><br><span class="line">sudo mkdir -p /etc/docker</span><br><span class="line">sudo tee /etc/docker/daemon.json &lt;&lt;-'EOF'</span><br><span class="line">&#123;</span><br><span class="line">  "registry-mirrors": ["https://c8x7u9xt.mirror.aliyuncs.com"]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> start docker service</span></span><br><span class="line">sudo usermod -aG docker vagrant</span><br><span class="line">sudo systemctl start docker</span><br><span class="line">sudo systemctl enable docker</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> install docker-compose</span></span><br><span class="line">curl -L https://get.daocloud.io/docker/compose/releases/download/1.25.1/docker-compose-`uname -s`-`uname -m` &gt; /usr/local/bin/docker-compose</span><br><span class="line">chmod +x /usr/local/bin/docker-compose</span><br></pre></td></tr></table></figure><p>安装vagrant-vbguest插件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> vagrant plugin install vagrant-vbguest</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> vagrant vbguest</span></span><br></pre></td></tr></table></figure><p>安装vagrant-vbguest插件用于文件夹共享</p><p>启动虚拟机</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> vagrant up</span></span><br></pre></td></tr></table></figure><h3 id="3-4-vagrant-ssh登录虚拟机"><a href="#3-4-vagrant-ssh登录虚拟机" class="headerlink" title="3.4 vagrant ssh登录虚拟机"></a>3.4 vagrant ssh登录虚拟机</h3><p>虚拟机安装好后，默认已经创建了vagrant用户，密码是vagrant，root用户的默认密码也是vagrant。<br>在命令行下执行<strong>vagrant.exe ssh</strong>，将以vagrant用户登录虚拟机。也可以用Secure CRT、xshell等工具连接登录。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">SSH登录</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> vagrant ssh   <span class="comment">#ssh的后面可以跟你的title来连接不同的vm主机</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">默认账号密码</span></span><br><span class="line">vagrant/vagrant</span><br><span class="line">root/vagrant</span><br></pre></td></tr></table></figure><h2 id="4-常见命令"><a href="#4-常见命令" class="headerlink" title="4.常见命令"></a>4.常见命令</h2><table><thead><tr><th><strong>命令</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>vagrant box list</td><td>查看目前已有的box</td></tr><tr><td>vagrant box add</td><td>新增加一个box</td></tr><tr><td>vagrant box remove</td><td>删除指定box</td></tr><tr><td>vagrant init</td><td>初始化配置Vagrantfile</td></tr><tr><td>vagrant up</td><td>启动虚拟机</td></tr><tr><td>vagrant ssh</td><td>ssh登录虚拟机</td></tr><tr><td>vagrant suspend</td><td>暂停虚拟机，虚拟机内存等信息将以状态文件的方式保存在本地，可以执行恢复操作后继续使用</td></tr><tr><td>vagrant reload</td><td>重启虚拟机</td></tr><tr><td>vagrant halt</td><td>关闭虚拟机</td></tr><tr><td>vagrant status</td><td>查看虚拟机状态</td></tr><tr><td>vagrant destroy</td><td>销毁(删除)当前虚拟机(除Vagrantfile中的配置所有数据都不会保留)</td></tr><tr><td>vagrant resume</td><td>恢复虚拟机，与前面的暂停相对应</td></tr></tbody></table><h2 id="5-打包分发"><a href="#5-打包分发" class="headerlink" title="5.打包分发"></a>5.打包分发</h2><p>当你配置好开发环境后，退出并关闭虚拟机。在终端里对开发环境进行打包：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> vagrant package</span></span><br></pre></td></tr></table></figure><p>打包完成后会在当前目录生成一个package.box 的文件，将这个文件传给其他用户，其他用户只要添加这个box并用其初始化自己的开发目录就能得到一个一模一样的开发环境了。</p><blockquote><p>注：如果网络模式中使用 private_network 的话，在打包之前需要清除一下private_network的设置，避免不必要的错误：<br>sudo rm -f /etc/udev/rule.d/70-persistent-net.rules<br>制作完成之后直接将box文件拿到其他计算机上配置即可使用。</p></blockquote><p>更多内容请查阅官方文档<br><a href="http://docs.vagrantup.com/" target="_blank" rel="noopener">http://docs.vagrantup.com/</a></p><h2 id="6-Vagrant-插件："><a href="#6-Vagrant-插件：" class="headerlink" title="6.Vagrant 插件："></a>6.Vagrant 插件：</h2><h3 id="6-1-snapshot-插件"><a href="#6-1-snapshot-插件" class="headerlink" title="6.1 snapshot 插件"></a>6.1 snapshot 插件</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">vagrant plugin install vagrant-vbox-snapshot</span><br><span class="line"></span><br><span class="line">Installing the 'vagrant-vbox-snapshot' plugin. This can take a few minutes...</span><br><span class="line">Fetching: vagrant-vbox-snapshot-0.0.10.gem (100%)</span><br><span class="line">Installed the plugin 'vagrant-vbox-snapshot (0.0.10)'!</span><br></pre></td></tr></table></figure><p>Vagrant建立快照备份</p><blockquote><p>使用Vagrant的快照功能可以很方便快速的创建当前虚拟机的一个临时备份状态，在进行重要操作时可以先创建一个快照以便在操作失误后快速恢复。</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> vagrant snapshot</span></span><br><span class="line">Usage: vagrant snapshot &lt;command&gt; [&lt;args&gt;]</span><br><span class="line"></span><br><span class="line">Available subcommands:</span><br><span class="line">     back</span><br><span class="line">     delete</span><br><span class="line">     go</span><br><span class="line">     list</span><br><span class="line">     take</span><br><span class="line"></span><br><span class="line">For help on any individual command run `vagrant snapshot &lt;command&gt; -h</span><br></pre></td></tr></table></figure><p>使用方法：</p><ul><li>创建一个快照</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vagrant snapshot take [vm-name] &lt;SNAPSHOT_NAME&gt;</span><br></pre></td></tr></table></figure><ul><li>查看快照列表</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vagrant snapshot list [vm-name]</span><br></pre></td></tr></table></figure><ul><li>从指定快照中恢复</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vagrant snapshot go [vm-name] &lt;SNAPSHOT_NAME&gt;</span><br></pre></td></tr></table></figure><ul><li>删除一个快照</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vagrant snapshot delete [vm-name] &lt;SNAPSHOT_NAME&gt;</span><br></pre></td></tr></table></figure><h3 id="6-2-vbguest-插件"><a href="#6-2-vbguest-插件" class="headerlink" title="6.2 vbguest 插件"></a>6.2 vbguest 插件</h3><blockquote><p>自定义共享目录，有时候我们发现有些virtualbox无法使用自定义的共享目录，这时候就需要安装vbguest客户端（类似于VMware的client）</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vagrant plugin install vagrant-vbguest</span><br></pre></td></tr></table></figure><h3 id="6-3-hostmanager-插件"><a href="#6-3-hostmanager-插件" class="headerlink" title="6.3 hostmanager 插件"></a>6.3 hostmanager 插件</h3><blockquote><p>用主机名访问，可以实现虚机之间用主机名互相访问，也可以实现宿主机用主机名访问虚机。</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vagrant plugin install vagrant-hostmanager</span><br></pre></td></tr></table></figure><h3 id="6-4-vagrant-bindfs-支持多种共享模式"><a href="#6-4-vagrant-bindfs-支持多种共享模式" class="headerlink" title="6.4 vagrant-bindfs 支持多种共享模式"></a>6.4 vagrant-bindfs 支持多种共享模式</h3><p>插件bindfs可以支持多种共享模式，如nfs，samba</p><p>命令行下输入：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vagrant plugin install vagrant-bindfs</span><br></pre></td></tr></table></figure><p>修改Vgrantfile文件：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">config.vm.define <span class="string">"node1"</span> <span class="keyword">do</span> <span class="params">|node1|</span></span><br><span class="line">  node1.vm.network <span class="string">"private_network"</span>, <span class="symbol">ip:</span> <span class="string">"192.168.33.11"</span></span><br><span class="line">  node1.vm.hostname=<span class="string">"node1.yulongjun.com"</span></span><br><span class="line">  node1.vm.synced_folder <span class="string">"./app"</span> <span class="string">"/mnt/app-data"</span>, <span class="symbol">type:</span> <span class="string">"nfs"</span></span><br><span class="line">  node1.bindfs.bind_folder <span class="string">"/mnt/app-data"</span> <span class="string">"/app"</span></span><br><span class="line">    <span class="symbol">force_user:</span> <span class="string">"root"</span>, <span class="symbol">force_group:</span> <span class="string">"root"</span>, <span class="symbol">o:</span> <span class="string">"noempty"</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Vagrant搭建虚拟环境&quot;&gt;&lt;a href=&quot;#Vagrant搭建虚拟环境&quot; class=&quot;headerlink&quot; title=&quot;Vagrant搭建虚拟环境&quot;&gt;&lt;/a&gt;Vagrant搭建虚拟环境&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;Vagrant 是基于 V
      
    
    </summary>
    
    
      <category term="vagrant" scheme="http://wangyangyangisme.github.io/categories/vagrant/"/>
    
    
      <category term="vagrant" scheme="http://wangyangyangisme.github.io/tags/vagrant/"/>
    
  </entry>
  
  <entry>
    <title>github搜索技巧</title>
    <link href="http://wangyangyangisme.github.io/2020/02/27/git-github%E6%90%9C%E7%B4%A2%E6%8A%80%E5%B7%A7/"/>
    <id>http://wangyangyangisme.github.io/2020/02/27/git-github搜索技巧/</id>
    <published>2020-02-27T07:20:00.000Z</published>
    <updated>2020-02-27T07:37:40.383Z</updated>
    
    <content type="html"><![CDATA[<h1 id="github搜索技巧"><a href="#github搜索技巧" class="headerlink" title="github搜索技巧"></a>github搜索技巧</h1><h2 id="按仓库名称、说明或自述文件内容搜索"><a href="#按仓库名称、说明或自述文件内容搜索" class="headerlink" title="按仓库名称、说明或自述文件内容搜索"></a>按仓库名称、说明或自述文件内容搜索</h2><p>通过 in 限定符，您可以将搜索限制为仓库名称、仓库说明、自述文件内容或这些的任意组合。 如果省略此限定符，则只搜索仓库名称和说明。</p><table><thead><tr><th>限定符</th><th>示例</th></tr></thead><tbody><tr><td>in:name 关键字</td><td>in:name jquery匹配其名称中含有 “jquery” 的仓库。</td></tr><tr><td>in:description 关键字</td><td>in:name,description jquery匹配其名称或说明中含有 “jquery” 的仓库。</td></tr><tr><td>in:readme 关键字</td><td>in:readme jquery匹配其自述文件中提及 “jquery” 的仓库。</td></tr><tr><td>repo:owner/name</td><td>repo:octocat/hello-world 匹配特定仓库名称。</td></tr></tbody></table><h2 id="基于仓库的内容搜索"><a href="#基于仓库的内容搜索" class="headerlink" title="基于仓库的内容搜索"></a>基于仓库的内容搜索</h2><p>您可以使用 in:readme 限定符，通过搜索其自述文件中的内容来查找仓库。</p><p>除了使用 in:readme 以外，无法通过搜索仓库内的特定内容来查找仓库。 要搜索仓库内的特定文件或内容，您可以使用查找器或代码特定的搜索限定符。 更多信息请参阅“在 GitHub 上查找文件”和“搜索代码”。</p><table><thead><tr><th>限定符</th><th>示例</th></tr></thead><tbody><tr><td>in:name 关键字</td><td>in:name jquery</td></tr></tbody></table><p>在用户或组织的仓库内搜索<br> 要在特定用户或组织拥有的所有仓库中搜索，您可以使用 user 或 org 限定符。</p><table><thead><tr><th>限定符</th><th>示例</th></tr></thead><tbody><tr><td>user:USERNAME</td><td>user:defunkt forks:&gt;100 匹配来自 @defunkt、拥有超过 100 复刻的仓库。</td></tr><tr><td>org:ORGNAME</td><td>org:github 匹配来自 GitHub 的仓库。</td></tr></tbody></table><h2 id="按仓库大小搜索"><a href="#按仓库大小搜索" class="headerlink" title="按仓库大小搜索"></a>按仓库大小搜索</h2><p>size 限定符使用大于、小于和范围限定符查找匹配特定大小（以千字节为单位）的仓库。</p><table><thead><tr><th>限定符</th><th>示例</th></tr></thead><tbody><tr><td>size:n</td><td>size:1000 匹配恰好为 1 MB 的仓库。</td></tr><tr><td></td><td>size:&gt;=30000 匹配至少为 30 MB 的仓库。</td></tr><tr><td></td><td>size:&lt;50 匹配小于 50 KB 的仓库。</td></tr><tr><td></td><td>size:50..120 匹配介于 50 KB 与 120 KB 之间的仓库。</td></tr></tbody></table><h2 id="按关注者数量搜索"><a href="#按关注者数量搜索" class="headerlink" title="按关注者数量搜索"></a>按关注者数量搜索</h2><p>您可以使用 followers 限定符以及大于、小于和范围限定符基于仓库拥有的关注者数量过滤仓库。</p><table><thead><tr><th>限定符</th><th>示例</th></tr></thead><tbody><tr><td>followers:n</td><td>node followers:&gt;=10000 匹配拥有 10,000 或更多关注者并且提及 “node” 一词的仓库。</td></tr><tr><td></td><td>styleguide linter followers:1..10 匹配拥有 1 到 10 个关注者并且提及 “styleguide linter” 一词的的仓库。</td></tr></tbody></table><h2 id="按复刻数量搜索"><a href="#按复刻数量搜索" class="headerlink" title="按复刻数量搜索"></a>按复刻数量搜索</h2><p>forks 限定符使用大于、小于和范围限定符指定仓库应具有的复刻数量。</p><table><thead><tr><th>限定符</th><th>示例</th></tr></thead><tbody><tr><td>forks:n forks:5</td><td>匹配只有 5 个复刻的仓库。</td></tr><tr><td>forks:&gt;=205</td><td>匹配具有至少 205 个复刻的仓库。</td></tr><tr><td>forks:&lt;90</td><td>匹配具有少于 90 个复刻的仓库。</td></tr><tr><td>forks:10..20</td><td>匹配具有 10 到 20 个复刻的仓库。</td></tr></tbody></table><h2 id="按星号数量搜索"><a href="#按星号数量搜索" class="headerlink" title="按星号数量搜索"></a>按星号数量搜索</h2><p>您可以使用大于、小于和范围限定符基于仓库具有的星标数量搜索仓库</p><table><thead><tr><th>限定符</th><th>示例</th></tr></thead><tbody><tr><td>stars:n stars:500</td><td>匹配恰好具有 500 个星号的仓库。</td></tr><tr><td></td><td>stars:10..20 匹配具有 10 到 20 个星号、小于 1000 KB 的仓库。</td></tr><tr><td></td><td>stars:&gt;=500 fork:true language:php 匹配具有至少 500 个星号，包括复刻的星号（以 PHP 编写）的仓库。</td></tr></tbody></table><h2 id="按语言搜索"><a href="#按语言搜索" class="headerlink" title="按语言搜索"></a>按语言搜索</h2><p>您可以基于其编写采用的主要语言搜索仓库。</p><table><thead><tr><th>限定符</th><th>示例</th></tr></thead><tbody><tr><td>language:LANGUAGE</td><td>rails language:javascript 匹配具有 “rails” 字样、以 JavaScript 编写的仓库。</td></tr></tbody></table><h2 id="按主题搜索"><a href="#按主题搜索" class="headerlink" title="按主题搜索"></a>按主题搜索</h2><table><thead><tr><th>限定符</th><th>示例</th></tr></thead><tbody><tr><td>topic:TOPIC</td><td>topic:jekyll匹配已归类为 “jekyll” 主题的仓库。</td></tr></tbody></table><h2 id="按更新时间或创建时间搜索"><a href="#按更新时间或创建时间搜索" class="headerlink" title="按更新时间或创建时间搜索"></a>按更新时间或创建时间搜索</h2><table><thead><tr><th>限定符</th><th>示例</th></tr></thead><tbody><tr><td>pushed:&gt;时间 关键字</td><td>pushed:&gt; 2019-04-01 go</td></tr><tr><td>created:&gt;时间 关键字</td><td>pushed:&gt; 2019-04-01 go</td></tr></tbody></table><h2 id="按开源协议搜索"><a href="#按开源协议搜索" class="headerlink" title="按开源协议搜索"></a>按开源协议搜索</h2><table><thead><tr><th>限定符</th><th>示例</th></tr></thead><tbody><tr><td>license:&gt;协议 关键字</td><td>license:apache-2.0 go</td></tr></tbody></table><p><strong>以上查询条件可组合使用，空格隔开</strong><br><strong>以上是比较常用的搜索用法，详细的访问</strong><a href="https://help.github.com/cn/github/searching-for-information-on-github/searching-for-repositories" target="_blank" rel="noopener">搜索仓库</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;github搜索技巧&quot;&gt;&lt;a href=&quot;#github搜索技巧&quot; class=&quot;headerlink&quot; title=&quot;github搜索技巧&quot;&gt;&lt;/a&gt;github搜索技巧&lt;/h1&gt;&lt;h2 id=&quot;按仓库名称、说明或自述文件内容搜索&quot;&gt;&lt;a href=&quot;#按仓库名
      
    
    </summary>
    
    
      <category term="git" scheme="http://wangyangyangisme.github.io/categories/git/"/>
    
    
      <category term="git" scheme="http://wangyangyangisme.github.io/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>json时间格式化</title>
    <link href="http://wangyangyangisme.github.io/2020/01/22/golang-json%E6%97%B6%E9%97%B4%E6%A0%BC%E5%BC%8F%E5%8C%96/"/>
    <id>http://wangyangyangisme.github.io/2020/01/22/golang-json时间格式化/</id>
    <published>2020-01-22T05:44:36.000Z</published>
    <updated>2020-01-22T06:03:09.428Z</updated>
    
    <content type="html"><![CDATA[<h1 id="json时间格式化"><a href="#json时间格式化" class="headerlink" title="json时间格式化"></a>json时间格式化</h1><h2 id="Gorm-JSON-时间格式化"><a href="#Gorm-JSON-时间格式化" class="headerlink" title="Gorm JSON 时间格式化"></a>Gorm JSON 时间格式化</h2><p>JSON 解析与扩展已有类型</p><p>Go 语言是没有完整的 OOP 对象模型的，在 Golang 的世界里没有继承，只有组合和接口，并且是松散的接口结构，不强制声明实现接口。通过对结构体的组合对现有对象进行扩展也是很便利的，参考 interface &amp; struct 接口与结构体。</p><p>单一继承关系解决了 is-a  也就是定义问题，因此可以把子类当做父类来对待。但对于父类不同但又具有某些共同行为的数据，单一继承就不能解决了，C++  采取了多继承这种复杂的方式。GO 采取的组合方式更贴近现实世界的网状结构，不同于继承，GO  语言的接口是松散的结构，它不和定义绑定。从这一点上来说，Duck Type 相比传统的 extends  是更加松耦合的方式，可以同时从多个维度对数据进行抽象，找出它们的共同点，使用同一套逻辑来处理。</p><p>注意 People.Name 成员首字母大写，否则不会导出，解析 JSON 时不会正确赋值。 如果想在一个包中访问另一个包中结构体的字段，则必须是大写字母开头的变量，即可导出的变量。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="comment">// "database/sql/driver"</span></span><br><span class="line">    <span class="string">"encoding/json"</span></span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">    <span class="string">"time"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> People <span class="keyword">struct</span> &#123;</span><br><span class="line">    Name <span class="keyword">string</span> <span class="string">`json:"name"`</span></span><br><span class="line">    Time TimeNormal</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    js := <span class="string">`&#123;</span></span><br><span class="line"><span class="string">            "name":"Aob"</span></span><br><span class="line"><span class="string">        &#125;`</span></span><br><span class="line">    <span class="keyword">var</span> p People</span><br><span class="line">    err := json.Unmarshal([]<span class="keyword">byte</span>(js), &amp;p)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        fmt.Println(<span class="string">"err: "</span>, err)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    fmt.Println(<span class="string">"people: "</span>, p)</span><br><span class="line"></span><br><span class="line">    p.Time = TimeNormal&#123;time.Now()&#125;</span><br><span class="line">    data, err := json.Marshal(p)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        fmt.Println(<span class="string">"JSON marshaling failed: %s"</span>, err)</span><br><span class="line">    &#125;</span><br><span class="line">    fmt.Printf(<span class="string">"JSON: %s\n"</span>, data)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// type TimeNormal time.Time // 别名方式扩展</span></span><br><span class="line"><span class="keyword">type</span> TimeNormal <span class="keyword">struct</span> &#123; <span class="comment">// 内嵌方式（推荐）</span></span><br><span class="line">    time.Time</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t TimeNormal)</span> <span class="title">MarshalJSON</span><span class="params">()</span> <span class="params">([]<span class="keyword">byte</span>, error)</span></span> &#123;</span><br><span class="line">    <span class="comment">// tune := fmt.Sprintf(`"%s"`, t.Format("2006-01-02 15:04:05"))</span></span><br><span class="line">    tune := t.Format(<span class="string">`"2006-01-02 15:04:05"`</span>)</span><br><span class="line">    <span class="keyword">return</span> []<span class="keyword">byte</span>(tune), <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>GO 的 time 包中实现 json.Marshaler 接口的序列化方法 MarshalJSON 指定 RFC3339Nano 格式：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// MarshalJSON implements the json.Marshaler interface.</span></span><br><span class="line"><span class="comment">// The time is a quoted string in RFC 3339 format, with sub-second precision added if present.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t Time)</span> <span class="title">MarshalJSON</span><span class="params">()</span> <span class="params">([]<span class="keyword">byte</span>, error)</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> y := t.Year(); y &lt; <span class="number">0</span> || y &gt;= <span class="number">10000</span> &#123;</span><br><span class="line">        <span class="comment">// RFC 3339 is clear that years are 4 digits exactly.</span></span><br><span class="line">        <span class="comment">// See golang.org/issue/4556#c15 for more discussion.</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span>, errors.New(<span class="string">"Time.MarshalJSON: year outside of range [0,9999]"</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    b := <span class="built_in">make</span>([]<span class="keyword">byte</span>, <span class="number">0</span>, <span class="built_in">len</span>(RFC3339Nano)+<span class="number">2</span>)</span><br><span class="line">    b = <span class="built_in">append</span>(b, <span class="string">'"'</span>)</span><br><span class="line">    b = t.AppendFormat(b, RFC3339Nano)</span><br><span class="line">    b = <span class="built_in">append</span>(b, <span class="string">'"'</span>)</span><br><span class="line">    <span class="keyword">return</span> b, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以使用格式化函数进行转换，下面是12H、24H两种格式的转换，年份和小时格式代码分别是06、03，使用4位数年份就是 2006，使用24H制就是 15：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">time</span><span class="selector-class">.Now</span>()<span class="selector-class">.Format</span>("06<span class="selector-tag">-01-02</span> 03<span class="selector-pseudo">:04</span><span class="selector-pseudo">:05")</span></span><br><span class="line"><span class="selector-tag">time</span><span class="selector-class">.Now</span>()<span class="selector-class">.Format</span>("2006<span class="selector-tag">-01-02</span> 15<span class="selector-pseudo">:04</span><span class="selector-pseudo">:05")</span></span><br></pre></td></tr></table></figure><p>也可以直接给 Format 函数传入格式类型：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">time</span><span class="selector-class">.ANSIC</span>:       <span class="selector-tag">Fri</span> <span class="selector-tag">Aug</span>  2 23<span class="selector-pseudo">:02</span><span class="selector-pseudo">:02</span> 2019</span><br><span class="line"><span class="selector-tag">time</span><span class="selector-class">.UnixDate</span>:    <span class="selector-tag">Fri</span> <span class="selector-tag">Aug</span>  2 23<span class="selector-pseudo">:02</span><span class="selector-pseudo">:02</span> <span class="selector-tag">CST</span> 2019</span><br><span class="line"><span class="selector-tag">time</span><span class="selector-class">.RFC1123</span>:     <span class="selector-tag">Fri</span>, 02 <span class="selector-tag">Aug</span> 2019 23<span class="selector-pseudo">:02</span><span class="selector-pseudo">:02</span> <span class="selector-tag">CST</span></span><br><span class="line"><span class="selector-tag">time</span><span class="selector-class">.RFC3339</span>:     2019<span class="selector-tag">-08-02T23</span><span class="selector-pseudo">:02</span><span class="selector-pseudo">:02+08</span><span class="selector-pseudo">:00</span></span><br><span class="line"><span class="selector-tag">time</span><span class="selector-class">.RFC822</span>:      02 <span class="selector-tag">Aug</span> 19 23<span class="selector-pseudo">:02</span> <span class="selector-tag">CST</span></span><br><span class="line"><span class="selector-tag">time</span><span class="selector-class">.RFC850</span>:      <span class="selector-tag">Friday</span>, 02<span class="selector-tag">-Aug-19</span> 23<span class="selector-pseudo">:02</span><span class="selector-pseudo">:02</span> <span class="selector-tag">CST</span></span><br><span class="line"><span class="selector-tag">time</span><span class="selector-class">.RFC1123Z</span>:    <span class="selector-tag">Fri</span>, 02 <span class="selector-tag">Aug</span> 2019 23<span class="selector-pseudo">:02</span><span class="selector-pseudo">:02</span> +0800</span><br><span class="line"><span class="selector-tag">time</span><span class="selector-class">.RFC3339Nano</span>: 2019<span class="selector-tag">-08-02T23</span><span class="selector-pseudo">:02</span><span class="selector-pseudo">:02.6227628+08</span><span class="selector-pseudo">:00</span></span><br><span class="line"><span class="selector-tag">time</span><span class="selector-class">.RFC822Z</span>:     02 <span class="selector-tag">Aug</span> 19 23<span class="selector-pseudo">:02</span> +0800</span><br><span class="line"><span class="selector-tag">time</span><span class="selector-class">.Kitchen</span>:     11<span class="selector-pseudo">:02PM</span></span><br><span class="line"><span class="selector-tag">time</span><span class="selector-class">.Stamp</span>:       <span class="selector-tag">Aug</span>  2 23<span class="selector-pseudo">:02</span><span class="selector-pseudo">:02</span></span><br><span class="line"><span class="selector-tag">time</span><span class="selector-class">.StampMicro</span>:  <span class="selector-tag">Aug</span>  2 23<span class="selector-pseudo">:02</span><span class="selector-pseudo">:02.629703</span></span><br><span class="line"><span class="selector-tag">time</span><span class="selector-class">.StampMilli</span>:  <span class="selector-tag">Aug</span>  2 23<span class="selector-pseudo">:02</span><span class="selector-pseudo">:02.631</span></span><br><span class="line"><span class="selector-tag">time</span><span class="selector-class">.StampNano</span>:   <span class="selector-tag">Aug</span>  2 23<span class="selector-pseudo">:02</span><span class="selector-pseudo">:02.631646200</span></span><br></pre></td></tr></table></figure><p>Go 不允许在包外新增或重写方法 cannot define new methods on non-local  type，只能通过在外部定义别名或者内嵌结构体进行内置对象的扩展。需要注意别名方式只能使用原始类型的字段，不能使用其方法，只重写字段的时候可以考虑使用。</p><p>在 gorm 中只重写 MarshalJSON 是不够的，因为 ORM 在插入记录、读取记录时需要的相应执行 Value 和 Scan  方法，需要引入 database/sql/driver 包。为了方便使用，可以定义一个 BaseModel 来替代 gorm.Model。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">"database/sql/driver"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> TimeNormal <span class="keyword">struct</span> &#123; <span class="comment">// 内嵌方式（推荐）</span></span><br><span class="line">    time.Time</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t TimeNormal)</span> <span class="title">MarshalJSON</span><span class="params">()</span> <span class="params">([]<span class="keyword">byte</span>, error)</span></span> &#123;</span><br><span class="line">    <span class="comment">// tune := fmt.Sprintf(`"%s"`, t.Format("2006-01-02 15:04:05"))</span></span><br><span class="line">    tune := t.Format(<span class="string">`"2006-01-02 15:04:05"`</span>)</span><br><span class="line">    <span class="keyword">return</span> []<span class="keyword">byte</span>(tune), <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Value insert timestamp into mysql need this function.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t TimeNormal)</span> <span class="title">Value</span><span class="params">()</span> <span class="params">(driver.Value, error)</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> zeroTime time.Time</span><br><span class="line">    <span class="keyword">if</span> t.Time.UnixNano() == zeroTime.UnixNano() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span>, <span class="literal">nil</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> t.Time, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Scan valueof time.Time</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t *TimeNormal)</span> <span class="title">Scan</span><span class="params">(v <span class="keyword">interface</span>&#123;&#125;)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">    value, ok := v.(time.Time)</span><br><span class="line">    <span class="keyword">if</span> ok &#123;</span><br><span class="line">        *t = TimeNormal&#123;Time: value&#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> fmt.Errorf(<span class="string">"can not convert %v to timestamp"</span>, v)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> BaseModel <span class="keyword">struct</span> &#123;</span><br><span class="line">    <span class="comment">// gorm.Model</span></span><br><span class="line">    ID        <span class="keyword">uint</span>        <span class="string">`gorm:"primary_key" json:"id"`</span></span><br><span class="line">    CreatedAt TimeNormal  <span class="string">`json:"createdAt"`</span></span><br><span class="line">    UpdatedAt TimeNormal  <span class="string">`json:"updatedAt"`</span></span><br><span class="line">    DeletedAt *TimeNormal <span class="string">`sql:"index" json:"-"`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面是别名方式扩展的核心代码示例，注意类型的转，类型断言和返回类型。访问时间对象时，内嵌方式是 t.Time，使用别名方式后时类型转换  time.Time(t)，而且 Scan 方法中不能直接通过类型断言 v.(TimeNormal) 将接口转换到  TimeNormal。另外，设置别名后，TimeNormal 并不能直接使用原始类型 time.Time  的各种方法和成员，需要先进行类型转换。显然，通过结构体匿名嵌入的方式并不存在这样的不便，这种方式可以很好的保持对象的原有性质。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> TimeNormal time.Time <span class="comment">// 别名方式扩展</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t TimeNormal)</span> <span class="title">MarshalJSON</span><span class="params">()</span> <span class="params">([]<span class="keyword">byte</span>, error)</span></span> &#123;</span><br><span class="line">    ti := time.Time(t)</span><br><span class="line">    tune := ti.Format(<span class="string">`"2006-01-02 15:04:05"`</span>)</span><br><span class="line">    <span class="keyword">return</span> []<span class="keyword">byte</span>(tune), <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Value insert timestamp into mysql need this function.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t TimeNormal)</span> <span class="title">Value</span><span class="params">()</span> <span class="params">(driver.Value, error)</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> zeroTime time.Time</span><br><span class="line">    ti := time.Time(t)</span><br><span class="line">    <span class="keyword">if</span> ti.UnixNano() == zeroTime.UnixNano() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span>, <span class="literal">nil</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ti, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Scan valueof time.Time</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t *TimeNormal)</span> <span class="title">Scan</span><span class="params">(v <span class="keyword">interface</span>&#123;&#125;)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">    ti, ok := v.(time.Time) <span class="comment">// NOT directly assertion v.(TimeNormal)</span></span><br><span class="line">    <span class="keyword">if</span> ok &#123;</span><br><span class="line">        *t = TimeNormal(ti)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> fmt.Errorf(<span class="string">"can not convert %v to timestamp"</span>, v)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Xorm-JSON-时间格式化"><a href="#Xorm-JSON-时间格式化" class="headerlink" title="Xorm JSON 时间格式化"></a>Xorm JSON 时间格式化</h2><p>golang默认的time.Time类型在转为json格式时不是常用的2019-05-08 10:00:01这种格式，解决办法是自定义一个时间类型，例如type myTime time.Time ，然后针对myTime实现Marshaler接口的MarshalJSON方法，例如：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> models</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"database/sql/driver"</span></span><br><span class="line"><span class="string">"time"</span></span><br><span class="line">)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> localDateTimeFormat <span class="keyword">string</span> = <span class="string">"2006-01-02 15:04:05"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> LocalTime time.Time</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(l LocalTime)</span> <span class="title">MarshalJSON</span><span class="params">()</span> <span class="params">([]<span class="keyword">byte</span>, error)</span></span> &#123;</span><br><span class="line">    t := time.Time(l)</span><br><span class="line">b := <span class="built_in">make</span>([]<span class="keyword">byte</span>, <span class="number">0</span>, <span class="built_in">len</span>(localDateTimeFormat)+<span class="number">2</span>)</span><br><span class="line">b = <span class="built_in">append</span>(b, <span class="string">'"'</span>)</span><br><span class="line">b = time.Time(l).AppendFormat(b, localDateTimeFormat)</span><br><span class="line">    <span class="keyword">if</span> !t.Equal(time.Time&#123;&#125;) &#123;</span><br><span class="line">b = t.AppendFormat(b, localDateTimeFormat)</span><br><span class="line">&#125;</span><br><span class="line">b = <span class="built_in">append</span>(b, <span class="string">'"'</span>)</span><br><span class="line"><span class="keyword">return</span> b, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(l *LocalTime)</span> <span class="title">UnmarshalJSON</span><span class="params">(b []<span class="keyword">byte</span>)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">now, err := time.ParseInLocation(<span class="string">`"`</span>+localDateTimeFormat+<span class="string">`"`</span>, <span class="keyword">string</span>(b), time.Local)</span><br><span class="line">*l = LocalTime(now)</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的代码在网上随手一搜就能找到，没有什么困难的，接下来的才是本篇文章的重点，这玩意结合xorm使用时，特别是字段类型为*LocalTime的时候才需要折腾一番。</p><p>下面是我的对应数据库表结构的struct 定义，</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> ServerInfo <span class="keyword">struct</span> &#123;</span><br><span class="line">ServerInfoId             <span class="keyword">string</span>     <span class="string">`xorm:"varchar(32) pk server_info_id"`</span></span><br><span class="line">CreatedAt                LocalTime  <span class="string">`xorm:"timestamp created"`</span></span><br><span class="line">UpdatedAt                LocalTime  <span class="string">`xorm:"timestamp updated"`</span></span><br><span class="line">DeletedAt                *LocalTime <span class="string">`xorm:"timestamp deleted index"`</span></span><br><span class="line">OrgId                    <span class="keyword">string</span>     <span class="string">`xorm:"varchar(100) org_id" json:"orgId"`</span>                                                </span><br><span class="line">ServerIp                 <span class="keyword">string</span>     <span class="string">`xorm:"varchar(128) server_ip" json:"serverIp"`</span>                                          </span><br><span class="line">ServerNameDesc           <span class="keyword">string</span>     <span class="string">`xorm:"varchar(500) server_name_desc" json:"serverNameDesc"`</span>                             </span><br><span class="line">ServerTimeNow            LocalTime  <span class="string">`xorm:"timestamp server_time" json:"serverTime"`</span>                                         </span><br><span class="line">DataReceiveTime          LocalTime  <span class="string">`xorm:"timestamp data_receive_time" sql:"DEFAULT:current_timestamp" json:"dataRecvTime"`</span> </span><br><span class="line">LastUploadDataTime       *LocalTime <span class="string">`xorm:"timestamp last_upload_data_time" json:"lastUploadDataTime"`</span>                       </span><br><span class="line">LastCheckTime            *LocalTime <span class="string">`xorm:"timestamp last_check_time" json:"lastCheckTime"`</span>                                  </span><br><span class="line">LastErrorTime            *LocalTime <span class="string">`xorm:"timestamp last_error_time" json:"lastErrorTime"`</span>                                  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意上面的字段类型，既有LocalTime类型的，又有*LocalTime类型的，*LocalTime是考虑到有时候数据值可能为NULL，即字段值可能为空的情况。</p><p>xorm不知道如何为LocalTime这个自定义类型进行赋值或者取值，因此需要实现xorm的core包中的Conversion接口，这个接口的定义如下：</p><p>注意，坑已经隐藏在上面的接口定义中了，过一会说。</p><p>整个完整的自定义时间类型的代码变成了下面的这样：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> model</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"database/sql/driver"</span></span><br><span class="line"><span class="string">"time"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> localDateTimeFormat <span class="keyword">string</span> = <span class="string">"2006-01-02 15:04:05"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> LocalTime time.Time</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(l LocalTime)</span> <span class="title">MarshalJSON</span><span class="params">()</span> <span class="params">([]<span class="keyword">byte</span>, error)</span></span> &#123;</span><br><span class="line">t := time.Time(l)</span><br><span class="line">b := <span class="built_in">make</span>([]<span class="keyword">byte</span>, <span class="number">0</span>, <span class="built_in">len</span>(localDateTimeFormat)+<span class="number">2</span>)</span><br><span class="line">b = <span class="built_in">append</span>(b, <span class="string">'"'</span>)</span><br><span class="line"><span class="keyword">if</span> !t.Equal(time.Time&#123;&#125;) &#123;</span><br><span class="line">b = t.AppendFormat(b, localDateTimeFormat)</span><br><span class="line">&#125;</span><br><span class="line">b = <span class="built_in">append</span>(b, <span class="string">'"'</span>)</span><br><span class="line"><span class="keyword">return</span> b, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(l *LocalTime)</span> <span class="title">UnmarshalJSON</span><span class="params">(b []<span class="keyword">byte</span>)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">now, err := time.ParseInLocation(<span class="string">`"`</span>+localDateTimeFormat+<span class="string">`"`</span>, <span class="keyword">string</span>(b), time.Local)</span><br><span class="line">*l = LocalTime(now)</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(l LocalTime)</span> <span class="title">String</span><span class="params">()</span> <span class="title">string</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> time.Time(l).Format(localDateTimeFormat)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(l LocalTime)</span><span class="title">Now</span><span class="params">()</span><span class="params">(LocalTime)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> LocalTime(time.Now())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(l LocalTime)</span><span class="title">ParseTime</span><span class="params">(t time.Time)</span><span class="params">(LocalTime)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> LocalTime(t)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(j LocalTime)</span> <span class="title">format</span><span class="params">()</span> <span class="title">string</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> time.Time(j).Format(localDateTimeFormat)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(j LocalTime)</span> <span class="title">MarshalText</span><span class="params">()</span> <span class="params">([]<span class="keyword">byte</span>, error)</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> []<span class="keyword">byte</span>(j.format()), <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(l *LocalTime)</span> <span class="title">FromDB</span><span class="params">(b []<span class="keyword">byte</span>)</span> <span class="title">error</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> <span class="literal">nil</span> == b || <span class="built_in">len</span>(b) == <span class="number">0</span> &#123;</span><br><span class="line">l = <span class="literal">nil</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> now time.Time</span><br><span class="line"><span class="keyword">var</span> err error</span><br><span class="line">now, err = time.ParseInLocation(localDateTimeFormat, <span class="keyword">string</span>(b), time.Local)</span><br><span class="line"><span class="keyword">if</span> <span class="literal">nil</span> == err &#123;</span><br><span class="line">*l = LocalTime(now)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line">now, err = time.ParseInLocation(time.RFC3339, <span class="keyword">string</span>(b), time.Local)</span><br><span class="line"><span class="keyword">if</span> <span class="literal">nil</span> == err &#123;</span><br><span class="line">*l = LocalTime(now)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">panic</span>(<span class="string">"自己定义个layout日期格式处理一下数据库里面的日期型数据解析!"</span>)</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t *LocalTime)</span> <span class="title">Scan</span><span class="params">(v <span class="keyword">interface</span>&#123;&#125;)</span> <span class="title">error</span></span> &#123;</span><br><span class="line"><span class="comment">// Should be more strictly to check this type.</span></span><br><span class="line">vt, err := time.Parse(localDateTimeFormat, <span class="keyword">string</span>(v.([]<span class="keyword">byte</span>)))</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line">*t = LocalTime(vt)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(l *LocalTime)</span> <span class="title">ToDB</span><span class="params">()</span> <span class="params">([]<span class="keyword">byte</span>, error)</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> <span class="literal">nil</span> == l &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>,<span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> []<span class="keyword">byte</span>(time.Time(*l).Format(localDateTimeFormat)), <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(l *LocalTime)</span> <span class="title">Value</span><span class="params">()</span> <span class="params">(driver.Value, error)</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span>  <span class="literal">nil</span>==l &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> time.Time(*l).Format(localDateTimeFormat), <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时，要是数据库的字段内容都有值的话插入和更新应该是没有什么问题，但是*LocalTime字段的值为nil的话问题就开始出现了，上面说了，ToDB()方法的返回值类型为[]byte，当字段值为nil时，返回nil看上去一切正常，但是xorm打印出来的sql语句数据值是下面这个样子的：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0x30</span>,<span class="number">0x3a</span>,<span class="number">0x31</span>,<span class="number">0x38</span>,<span class="number">0x3a</span>,<span class="number">0x35</span>&#125;,<span class="number">4</span>,<span class="number">5</span>,<span class="number">1</span>,[]<span class="keyword">uint8</span>(<span class="literal">nil</span>),[]<span class="keyword">uint8</span>(<span class="literal">nil</span>)</span><br></pre></td></tr></table></figure><p>这个[]uint8(nil)就是*LocalTime值为nil时的情况，数据库驱动是不认可[]uint8(nil)这种数据去写给timestamp类型字段的，问题的根源就是ToDB方法的返回值类型为[]byte，既然是这样，就需要我们人为的把[]uint8(nil)这种类型改为interface(nil)类型，数据库驱动会识别interface(nil)为NULL值，修改代码xorm\statement.go第322行，把原来的val=data改成下面的样子：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> structConvert,ok := fieldValue.Interface().(core.Conversion);ok &#123;</span><br><span class="line">    data,err := structConvert.ToDB()</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        engine.logger.Error(err)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// val = data</span></span><br><span class="line">        <span class="keyword">if</span> <span class="literal">nil</span> == data &#123;</span><br><span class="line">            val=<span class="literal">nil</span> <span class="comment">// []uint8(nil)改变为interface(nil)</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            val=data</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>就是把val=data改为 if nil==data { val=nil } else {val=data} ，看上去逻辑没有什么变化，但是给val=nil赋值的时候，val的类型就从[]uint8(nil)变成了interface(nil)了，这样数据库驱动就可以正确处理空值了。</p><p>除了需要修改xorm\statement.go文件的内容，还需要修改xorm\session_convert.go的第558行，增加以下代码：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> filedConvert,ok := fieldValue.Interface().(core.Conversion);ok &#123;</span><br><span class="line">    data,err := fieldConvert.ToDB()</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>,err</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> col.SQLType.IsBlob() &#123;</span><br><span class="line">        <span class="keyword">return</span> data,<span class="literal">nil</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//fix when pointer type value is null,added by peihexian,2019-05-07</span></span><br><span class="line">    <span class="keyword">if</span> <span class="literal">nil</span>==data &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span>,<span class="literal">nil</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">string</span>(data),<span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>主要是增加下面的代码</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//fix when pointer type value is null,added by peihexian,2019-05-07</span></span><br><span class="line"><span class="keyword">if</span> <span class="literal">nil</span>==data &#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="literal">nil</span>,<span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>之所以加这个代码是因为xorm作者没有考虑指针类型字段值为nil的情况，xorm对有转换的字段要么当成数字，要么当成了字符串，这两种对于NULL类型的值都不适用，所以需要增加if nil==data return nil,nil这样的代码，还是把数据值组织成interface(nil)去给数据库驱动去处理。</p><p>另外还有一个地方，是session_convert.go 第556行，同样需要增加</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="literal">nil</span>==data &#123;  <span class="comment">//edit by peihexian 2019.06.19</span></span><br><span class="line">   <span class="keyword">return</span> <span class="literal">nil</span>,<span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面是加完以后的样子</p><p>到这里，对xorm做了几处小的修改，自定义日期的问题及json格式化问题完美解决。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> filedConvert,ok := fieldValue.Interface().(core.Conversion);ok &#123;</span><br><span class="line">    data,err := fieldConvert.ToDB()</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>,err</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> col.SQLType.IsBlob() &#123;</span><br><span class="line">        <span class="keyword">return</span> data,<span class="literal">nil</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> <span class="literal">nil</span>==data &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span>,<span class="literal">nil</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">string</span>(data),<span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;json时间格式化&quot;&gt;&lt;a href=&quot;#json时间格式化&quot; class=&quot;headerlink&quot; title=&quot;json时间格式化&quot;&gt;&lt;/a&gt;json时间格式化&lt;/h1&gt;&lt;h2 id=&quot;Gorm-JSON-时间格式化&quot;&gt;&lt;a href=&quot;#Gorm-JSON-
      
    
    </summary>
    
    
      <category term="golang" scheme="http://wangyangyangisme.github.io/categories/golang/"/>
    
    
  </entry>
  
  <entry>
    <title>PO BO VO DTO POJO DAO DO概念</title>
    <link href="http://wangyangyangisme.github.io/2020/01/22/java-PO%20BO%20VO%20DTO%20POJO%20DAO%20DO%E6%A6%82%E5%BF%B5/"/>
    <id>http://wangyangyangisme.github.io/2020/01/22/java-PO BO VO DTO POJO DAO DO概念/</id>
    <published>2020-01-22T03:50:36.000Z</published>
    <updated>2020-01-22T05:41:20.665Z</updated>
    
    <content type="html"><![CDATA[<h1 id="PO-BO-VO-DTO-POJO-DAO-DO概念"><a href="#PO-BO-VO-DTO-POJO-DAO-DO概念" class="headerlink" title="PO BO VO DTO POJO DAO DO概念"></a>PO BO VO DTO POJO DAO DO概念</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p><strong>PO</strong> 是<code>Persistant Object</code>的缩写，用于表示数据库中的一条记录映射成的 java 对象。PO 仅仅用于表示数据，没有任何数据操作。通常遵守 Java Bean 的规范，拥有 getter/setter 方法。</p><p><strong>DAO</strong>是 <code>Data Access Object</code>的缩写，用于表示一个数据访问对象。使用 DAO 访问数据库，包括插入、更新、删除、查询等操作，与 PO 一起使用。DAO 一般在持久层，完全封装数据库操作，对外暴露的方法使得上层应用不需要关注数据库相关的任何信息。</p><p><strong>VO</strong>是<code>Value Object</code>的缩写，用于表示一个与前端进行交互的 java 对象。有的朋友也许有疑问，这里可不可以使用 PO 传递数据？实际上，这里的 VO 只包含前端需要展示的数据即可，对于前端不需要的数据，比如数据创建和修改的时间等字段，出于减少传输数据量大小和保护数据库结构不外泄的目的，不应该在 VO 中体现出来。通常遵守 Java Bean 的规范，拥有 getter/setter 方法。</p><p><strong>DTO</strong>是<code>Data Transfer Object</code>的缩写，用于表示一个数据传输对象。DTO 通常用于不同服务或服务不同分层之间的数据传输。DTO 与 VO 概念相似，并且通常情况下字段也基本一致。但 DTO 与 VO 又有一些不同，这个不同主要是设计理念上的，比如 API 服务需要使用的 DTO 就可能与 VO 存在差异。通常遵守 Java Bean 的规范，拥有 getter/setter 方法。</p><p><strong>BO</strong>是<code>Business Object</code>的缩写，用于表示一个业务对象。BO 包括了业务逻辑，常常封装了对 DAO、RPC 等的调用，可以进行 PO 与 VO/DTO 之间的转换。BO 通常位于业务层，要区别于直接对外提供服务的服务层：BO 提供了基本业务单元的基本业务操作，在设计上属于被服务层业务流程调用的对象，一个业务流程可能需要调用多个 BO 来完成。</p><p><strong>POJO</strong>是<code>Plain Ordinary Java Object</code>的缩写，表示一个简单 java 对象。上面说的 PO、VO、DTO 都是典型的 POJO。而 DAO、BO 一般都不是 POJO，只提供一些调用方法。</p><p><strong>DO</strong>是<code>Domain Object</code>的缩写，用于表示一个领域对象，就是从现实世界中抽象出来的有形或无形的业务实体。</p><p>VO与DTO的区别：当我们表示性别的时候，为了展示方便，在VO就是男、女，而在DTO当中为了实现方便传输的是1或者2这样的代码。</p><h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><p><img src="/" alt="" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/wangyangyangisme/CDN@latest/blog/java/java-vo-dto-do.jpg"></p><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><p>以一个实例来探讨下 POJO 的使用。假设我们有一个面试系统，数据库中存储了很多面试题，通过 web 和 API 提供服务。可能会做如下的设计：</p><p>数据表：表中的面试题包括编号、题目、选项、答案、创建时间、修改时间；</p><p>PO：包括题目、选项、答案、创建时间、修改时间；</p><p>VO：题目、选项、答案、上一题URL、下一题URL；</p><p>DTO：编号、题目、选项、答案、上一题编号、下一题编号；</p><p>DAO：数据库增删改查方法；</p><p>BO：业务基本操作。</p><p>可以看到，进行 POJO 划分后，我们得到了一个设计良好的架构，各层数据对象的修改完全可以控制在有限的范围内。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;PO-BO-VO-DTO-POJO-DAO-DO概念&quot;&gt;&lt;a href=&quot;#PO-BO-VO-DTO-POJO-DAO-DO概念&quot; class=&quot;headerlink&quot; title=&quot;PO BO VO DTO POJO DAO DO概念&quot;&gt;&lt;/a&gt;PO BO VO
      
    
    </summary>
    
    
      <category term="java" scheme="http://wangyangyangisme.github.io/categories/java/"/>
    
    
  </entry>
  
  <entry>
    <title>N+1优化</title>
    <link href="http://wangyangyangisme.github.io/2020/01/20/mysql-N+1%E4%BC%98%E5%8C%96/"/>
    <id>http://wangyangyangisme.github.io/2020/01/20/mysql-N+1优化/</id>
    <published>2020-01-20T06:15:30.000Z</published>
    <updated>2020-01-20T06:23:15.444Z</updated>
    
    <content type="html"><![CDATA[<h1 id="N-1优化"><a href="#N-1优化" class="headerlink" title="N+1优化"></a>N+1优化</h1><h2 id="什么是N-1问题"><a href="#什么是N-1问题" class="headerlink" title="什么是N+1问题"></a>什么是N+1问题</h2><p>A对象关联B对象，A对象进行列表展示时需显示B对象的关联属性，这样需要先用一条sql将N个A对象查询出来，再用N条sql将这些对象的关联属性查询出来。违背了减少数据库交互原则，影响性能。</p><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h3><p>连接查询，在查询A对象的时候，将关联的B对象查询出来。</p><p><strong>缺点</strong>：</p><ol><li><p>连接的表增加，sql性能下降；</p></li><li><p>如果N个A对象关联的是同一个B对象，会使结果集非常庞大，返回结果集需要消耗性能，并且影响排序性能。比如100个员工对象都关联ID为1的部门，本来部门的数据只需出现一次，这里为了避免N+1,重复出现100次。</p></li></ol><h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h3><p>A表中设置冗余字段。</p><p><strong>缺点</strong>：更新B表需要更新A表。更新A表时需要增加修改B对象属性的逻辑。</p><h3 id="方法三"><a href="#方法三" class="headerlink" title="方法三"></a>方法三</h3><p>性能最佳，1+1查询。</p><p>先用sql查出所有员工对象查询出，将他们关联的部门ID放到一个集合中，再发一条sql，将所有部门查出，之后在程序中将部门信息设置到员工对象中。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;N-1优化&quot;&gt;&lt;a href=&quot;#N-1优化&quot; class=&quot;headerlink&quot; title=&quot;N+1优化&quot;&gt;&lt;/a&gt;N+1优化&lt;/h1&gt;&lt;h2 id=&quot;什么是N-1问题&quot;&gt;&lt;a href=&quot;#什么是N-1问题&quot; class=&quot;headerlink&quot; titl
      
    
    </summary>
    
    
      <category term="mysql" scheme="http://wangyangyangisme.github.io/categories/mysql/"/>
    
    
  </entry>
  
  <entry>
    <title>xorm生成代码</title>
    <link href="http://wangyangyangisme.github.io/2020/01/10/golang-xorm%E7%94%9F%E6%88%90%E4%BB%A3%E7%A0%81/"/>
    <id>http://wangyangyangisme.github.io/2020/01/10/golang-xorm生成代码/</id>
    <published>2020-01-09T16:10:12.000Z</published>
    <updated>2020-01-15T06:08:25.102Z</updated>
    
    <content type="html"><![CDATA[<h1 id="xorm生成代码"><a href="#xorm生成代码" class="headerlink" title="xorm生成代码"></a>xorm生成代码</h1><h2 id="下载源码"><a href="#下载源码" class="headerlink" title="下载源码"></a>下载源码</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://gitea.com/xorm/cmd.git</span><br></pre></td></tr></table></figure><h2 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd ../cmd/xorm</span><br><span class="line">go build</span><br></pre></td></tr></table></figure><h2 id="生成代码"><a href="#生成代码" class="headerlink" title="生成代码"></a>生成代码</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./xorm reverse mysql "root:123456@tcp(127.0.0.1:3306)/doss" templates/goxorm ./model</span><br></pre></td></tr></table></figure><h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><p><code>cmd\xorm\templates\goxorm\config</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">语言</span></span><br><span class="line">lang=go</span><br><span class="line"><span class="meta">#</span><span class="bash">生成json tag(0:不生成 1:生成)</span></span><br><span class="line">genJson=1</span><br><span class="line">prefix=cos_</span><br><span class="line"><span class="meta">#</span><span class="bash">当genJson=1时，忽略json字段(数据库字段，逗号隔开)</span></span><br><span class="line">ignoreColumnsJSON=detail</span><br><span class="line"><span class="meta">#</span><span class="bash">对应数据库字段(逗号隔开)</span></span><br><span class="line">created=created_at</span><br><span class="line"><span class="meta">#</span><span class="bash">对应数据库字段(逗号隔开)</span></span><br><span class="line">updated=updated_at</span><br><span class="line"><span class="meta">#</span><span class="bash">对应数据库字段(逗号隔开)</span></span><br><span class="line">deleted=deleted_at</span><br></pre></td></tr></table></figure><p>设置<code>created</code>，<code>updated</code>，<code>deleted</code>后，<code>CreatedAt</code>，<code>UpdatedAt</code>会生成<code>created</code>，<code>updated</code>。<code>ignoreColumnsJSON</code>设置后<code>Detail</code>变成<code>json:&quot;-&quot;</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> LoginLog <span class="keyword">struct</span> &#123;</span><br><span class="line">Id        <span class="keyword">int64</span>     <span class="string">`json:"id" xorm:"pk comment('系统编号') BIGINT(20)"`</span></span><br><span class="line">CreatedAt time.Time <span class="string">`json:"created_at" xorm:"not null default '0000-00-00 00:00:00' created comment('创建时间') DATETIME"`</span></span><br><span class="line">UpdatedAt time.Time <span class="string">`json:"updated_at" xorm:"not null default '0000-00-00 00:00:00' updated comment('更新时间') DATETIME"`</span></span><br><span class="line">UserId    <span class="keyword">int64</span>     <span class="string">`json:"user_id" xorm:"not null comment('用户ID') BIGINT(20)"`</span></span><br><span class="line">Agent     <span class="keyword">string</span>    <span class="string">`json:"agent" xorm:"not null comment('登录终端') VARCHAR(50)"`</span></span><br><span class="line">Os        <span class="keyword">string</span>    <span class="string">`json:"os" xorm:"not null default '' comment('操作系统') VARCHAR(50)"`</span></span><br><span class="line">Ip        <span class="keyword">string</span>    <span class="string">`json:"ip" xorm:"not null default '' comment('登录IP') VARCHAR(50)"`</span></span><br><span class="line">Loc       <span class="keyword">string</span>    <span class="string">`json:"loc" xorm:"not null default '' comment('IP所在地') VARCHAR(50)"`</span></span><br><span class="line">Status    <span class="keyword">int</span>       <span class="string">`json:"status" xorm:"not null default 0 comment('登录状态(1:成功;2:失败)') TINYINT(4)"`</span></span><br><span class="line">Detail    <span class="keyword">string</span>    <span class="string">`json:"-" xorm:"not null default '' comment('详细信息') VARCHAR(50)"`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="移除注释"><a href="#移除注释" class="headerlink" title="移除注释"></a>移除注释</h2><p>修改源码<code>reverse.go</code>，需要修改两处地方</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> err == <span class="literal">nil</span> &amp;&amp; !info.IsDir() &#123;</span><br><span class="line">configs = loadConfig(cfgPath)</span><br><span class="line"><span class="keyword">if</span> l, ok := configs[<span class="string">"lang"</span>]; ok &#123;</span><br><span class="line">lang = l</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> j, ok := configs[<span class="string">"genJson"</span>]; ok &#123;</span><br><span class="line">genJson, err = strconv.ParseBool(j)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//[SWH|+]</span></span><br><span class="line"><span class="keyword">if</span> j, ok := configs[<span class="string">"prefix"</span>]; ok &#123;</span><br><span class="line">prefix = j</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> j, ok := configs[<span class="string">"ignoreColumnsJSON"</span>]; ok &#123;</span><br><span class="line">ignoreColumnsJSON = strings.Split(j, <span class="string">","</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> j, ok := configs[<span class="string">"created"</span>]; ok &#123;</span><br><span class="line">created = strings.Split(j, <span class="string">","</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> j, ok := configs[<span class="string">"updated"</span>]; ok &#123;</span><br><span class="line">updated = strings.Split(j, <span class="string">","</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> j, ok := configs[<span class="string">"deleted"</span>]; ok &#123;</span><br><span class="line">deleted = strings.Split(j, <span class="string">","</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//添加下面3行代码</span></span><br><span class="line"><span class="keyword">if</span> j, ok := configs[<span class="string">"supportComment"</span>]; ok &#123;</span><br><span class="line">supportComment, err = strconv.ParseBool(j)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> langTmpl, ok = langTmpls[lang]; !ok &#123;</span><br><span class="line">fmt.Println(<span class="string">"Unsupported programing language"</span>, lang)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">os.MkdirAll(genDir, os.ModePerm)</span><br><span class="line"></span><br><span class="line"><span class="comment">//注释下面这行代码</span></span><br><span class="line"><span class="comment">//supportComment = (args[0] == "mysql" || args[0] == "mymysql")</span></span><br></pre></td></tr></table></figure><p>修改配置文件<code>cmd\xorm\templates\goxorm\config</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">语言</span></span><br><span class="line">lang=go</span><br><span class="line"><span class="meta">#</span><span class="bash">生成json tag(0:不生成 1:生成)</span></span><br><span class="line">genJson=1</span><br><span class="line">prefix=cos_</span><br><span class="line"><span class="meta">#</span><span class="bash">当genJson=1时，忽略json字段(数据库字段，逗号隔开)</span></span><br><span class="line">ignoreColumnsJSON=detail</span><br><span class="line"><span class="meta">#</span><span class="bash">对应数据库字段(逗号隔开)</span></span><br><span class="line">created=created_at</span><br><span class="line"><span class="meta">#</span><span class="bash">对应数据库字段(逗号隔开)</span></span><br><span class="line">updated=updated_at</span><br><span class="line"><span class="meta">#</span><span class="bash">对应数据库字段(逗号隔开)</span></span><br><span class="line">deleted=deleted_at</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">增加是否生成注释配置项</span></span><br><span class="line"><span class="meta">#</span><span class="bash">0:不生成 1:生成</span></span><br><span class="line">supportComment=0</span><br></pre></td></tr></table></figure><p>重新编译代码，重新生成</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> LoginLog <span class="keyword">struct</span> &#123;</span><br><span class="line">Id        <span class="keyword">int64</span>     <span class="string">`json:"id" xorm:"pk BIGINT(20)"`</span></span><br><span class="line">CreatedAt time.Time <span class="string">`json:"created_at" xorm:"not null default '0000-00-00 00:00:00' created DATETIME"`</span></span><br><span class="line">UpdatedAt time.Time <span class="string">`json:"updated_at" xorm:"not null default '0000-00-00 00:00:00' updated DATETIME"`</span></span><br><span class="line">UserId    <span class="keyword">int64</span>     <span class="string">`json:"user_id" xorm:"not null BIGINT(20)"`</span></span><br><span class="line">Agent     <span class="keyword">string</span>    <span class="string">`json:"agent" xorm:"not null VARCHAR(50)"`</span></span><br><span class="line">Os        <span class="keyword">string</span>    <span class="string">`json:"os" xorm:"not null default '' VARCHAR(50)"`</span></span><br><span class="line">Ip        <span class="keyword">string</span>    <span class="string">`json:"ip" xorm:"not null default '' VARCHAR(50)"`</span></span><br><span class="line">Loc       <span class="keyword">string</span>    <span class="string">`json:"loc" xorm:"not null default '' VARCHAR(50)"`</span></span><br><span class="line">Status    <span class="keyword">int</span>       <span class="string">`json:"status" xorm:"not null default 0 TINYINT(4)"`</span></span><br><span class="line">Detail    <span class="keyword">string</span>    <span class="string">`json:"detail" xorm:"not null default '' VARCHAR(50)"`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;xorm生成代码&quot;&gt;&lt;a href=&quot;#xorm生成代码&quot; class=&quot;headerlink&quot; title=&quot;xorm生成代码&quot;&gt;&lt;/a&gt;xorm生成代码&lt;/h1&gt;&lt;h2 id=&quot;下载源码&quot;&gt;&lt;a href=&quot;#下载源码&quot; class=&quot;headerlink&quot; 
      
    
    </summary>
    
    
      <category term="golang" scheme="http://wangyangyangisme.github.io/categories/golang/"/>
    
    
  </entry>
  
  <entry>
    <title>支付宝沙盒环境搭建</title>
    <link href="http://wangyangyangisme.github.io/2019/12/30/pay-%E6%94%AF%E4%BB%98%E5%AE%9D%E6%B2%99%E7%9B%92/"/>
    <id>http://wangyangyangisme.github.io/2019/12/30/pay-支付宝沙盒/</id>
    <published>2019-12-30T15:10:36.000Z</published>
    <updated>2020-02-27T07:15:28.476Z</updated>
    
    <content type="html"><![CDATA[<h1 id="支付宝沙盒环境搭建"><a href="#支付宝沙盒环境搭建" class="headerlink" title="支付宝沙盒环境搭建"></a>支付宝沙盒环境搭建</h1><h2 id="开发工具"><a href="#开发工具" class="headerlink" title="开发工具"></a>开发工具</h2><p>在线工具:<a href="https://openhome.alipay.com/platform/demoManage.htm#/alipay.trade.wap.pay" target="_blank" rel="noopener">https://openhome.alipay.com/platform/demoManage.htm#/alipay.trade.wap.pay</a></p><p>密匙生成工具:<a href="https://ideservice.alipay.com/ide/getPluginUrl.htm?clientType=assistant&amp;platform=win&amp;channelType=WEB" target="_blank" rel="noopener">https://ideservice.alipay.com/ide/getPluginUrl.htm?clientType=assistant&amp;platform=win&amp;channelType=WEB</a></p><h2 id="支付宝开放平台"><a href="#支付宝开放平台" class="headerlink" title="支付宝开放平台"></a>支付宝开放平台</h2><p>登录蚂蚁金服开放平台:<a href="https://open.alipay.com/platform/home.htm" target="_blank" rel="noopener">https://open.alipay.com/platform/home.htm</a></p><p>注册开发者账号并登录</p><p><img src="/" alt="" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/wangyangyangisme/CDN@latest/blog/pay/alipay1.png"></p><h2 id="安装沙盒版支付宝APP"><a href="#安装沙盒版支付宝APP" class="headerlink" title="安装沙盒版支付宝APP"></a>安装沙盒版支付宝APP</h2><p>下载地址</p><p><img src="/" alt="" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/wangyangyangisme/CDN@latest/blog/pay/alipay3.png"></p><p>使用沙盒账号登陆，支付密码和登陆密码都是<code>111111</code>，可以在该页面给账号充值</p><p><img src="/" alt="" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/wangyangyangisme/CDN@latest/blog/pay/alipay6.png"></p><h2 id="生成密钥"><a href="#生成密钥" class="headerlink" title="生成密钥"></a>生成密钥</h2><p>得到商户应用私钥与商户应用公钥</p><p><img src="/" alt="" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/wangyangyangisme/CDN@latest/blog/pay/alipay4.png"></p><h2 id="获取支付宝公钥"><a href="#获取支付宝公钥" class="headerlink" title="获取支付宝公钥"></a>获取支付宝公钥</h2><p>设置应用公钥</p><p><img src="/" alt="" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/wangyangyangisme/CDN@latest/blog/pay/alipay2.png"></p><p>得到支付宝公钥</p><p><img src="/" alt="" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/wangyangyangisme/CDN@latest/blog/pay/alipay5.png"></p><h2 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"github.com/gin-gonic/gin"</span></span><br><span class="line"><span class="string">"github.com/smartwalle/alipay/v3"</span></span><br><span class="line"><span class="string">"time"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> client *alipay.Client</span><br><span class="line"><span class="comment">// 公网ip</span></span><br><span class="line"><span class="keyword">var</span> notifyUrl = <span class="string">"http://xxx.xxx.xxx.xxx:5001/notify"</span> <span class="comment">// 异步回调</span></span><br><span class="line"><span class="keyword">var</span> returnUrl = <span class="string">"http://xxx.xxx.xxx.xxx:5001/return"</span> <span class="comment">// 同步回调</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Init</span><span class="params">()</span> <span class="title">error</span></span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> privateKey = <span class="string">"应用私钥"</span></span><br><span class="line"><span class="keyword">var</span> appId = <span class="string">"201610xxxxxxxxxx"</span></span><br><span class="line"><span class="keyword">var</span> err error</span><br><span class="line">client, err = alipay.New(appId, privateKey, <span class="literal">false</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">err = client.LoadAliPayPublicKey(<span class="string">"支付宝公钥"</span>) </span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// qr_code_timeout_express：允许用户最晚付款时间，从接口调用成功开始计时，最小值2m；传值1m扫码支付会直接报二维码已失效，二维码有效时间是2小时，所以该参数设置值超过2h也是无效值；</span></span><br><span class="line"><span class="comment">// timeout_express：最小值为1m，最大值为15t，不传默认15t；</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">//gin.SetMode(gin.ReleaseMode)</span></span><br><span class="line">err := Init()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    router := gin.Default()</span><br><span class="line">    router.GET(<span class="string">"/wap_pay/:id"</span>, WapPay)</span><br><span class="line">router.GET(<span class="string">"/page_pay/:id"</span>, PagePay)</span><br><span class="line">router.GET(<span class="string">"/app_pay/:id"</span>, AppPay)</span><br><span class="line">router.GET(<span class="string">"/face_pay/:id"</span>, FacePay)</span><br><span class="line">router.GET(<span class="string">"/query/:id"</span>, QueryOrder)</span><br><span class="line">router.GET(<span class="string">"/cancel/:id"</span>, CancelOrder)</span><br><span class="line">router.GET(<span class="string">"/wap_pay_qr/:id"</span>, WapPayQr)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">router.GET(<span class="string">"/return"</span>, Return)</span><br><span class="line">router.POST(<span class="string">"/notify"</span>, Notify)</span><br><span class="line"></span><br><span class="line">    err = router.Run(<span class="string">":5002"</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">WapPay</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">outTradeNo := c.Param(<span class="string">"id"</span>)</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(outTradeNo) &lt; <span class="number">1</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"订单号错误"</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p = alipay.TradeWapPay&#123;&#125;</span><br><span class="line">p.NotifyURL = notifyUrl</span><br><span class="line">p.ReturnURL = returnUrl</span><br><span class="line">p.Subject = <span class="string">"支付测试"</span></span><br><span class="line">p.OutTradeNo = outTradeNo</span><br><span class="line">p.TotalAmount = <span class="string">"1.00"</span></span><br><span class="line">p.ProductCode = <span class="string">"QUICK_WAP_WAY"</span></span><br><span class="line"><span class="comment">//p.TimeoutExpress = "7d"//输入支付密码订单创建超时时间开始计算，如果用户出现余额不足，才会在手机端显示等待买家付款。 然后超时关闭。  如果不设置该参数默认15天订单关闭</span></span><br><span class="line">url, err := client.TradeWapPay(p)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(err)</span><br><span class="line">c.Abort()</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> payURL = url.String()</span><br><span class="line">fmt.Println(payURL)</span><br><span class="line"><span class="comment">// 这个 payURL 即是用于支付的 URL，可将输出的内容复制，到浏览器中访问该 URL 即可打开支付页面。</span></span><br><span class="line"></span><br><span class="line">fmt.Println(<span class="string">"test"</span>)</span><br><span class="line">c.Redirect(<span class="number">302</span>,payURL)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">WapPayQr</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">outTradeNo := c.Param(<span class="string">"id"</span>)</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(outTradeNo) &lt; <span class="number">1</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"订单号错误"</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p = alipay.TradeWapPay&#123;&#125;</span><br><span class="line">p.NotifyURL = notifyUrl</span><br><span class="line">p.ReturnURL = returnUrl</span><br><span class="line">p.Subject = <span class="string">"支付测试"</span></span><br><span class="line">p.OutTradeNo = outTradeNo</span><br><span class="line">p.TotalAmount = <span class="string">"1.00"</span></span><br><span class="line">p.ProductCode = <span class="string">"QUICK_WAP_WAY"</span></span><br><span class="line"><span class="comment">//p.TimeoutExpress = "7d"//输入支付密码订单创建超时时间开始计算，如果用户出现余额不足，才会在手机端显示等待买家付款。 然后超时关闭。  如果不设置该参数默认15天订单关闭</span></span><br><span class="line">url, err := client.TradeWapPay(p)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(err)</span><br><span class="line">c.Abort()</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> payURL = url.String()</span><br><span class="line">fmt.Println(payURL)</span><br><span class="line"><span class="comment">// 这个 payURL 即是用于支付的 URL，可将输出的内容复制，到浏览器中访问该 URL 即可打开支付页面。</span></span><br><span class="line"></span><br><span class="line">obj := qrcodeTerminal.New()</span><br><span class="line">obj.Get([]<span class="keyword">byte</span>(payURL)).Print()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">PagePay</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">outTradeNo := c.Param(<span class="string">"id"</span>)</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(outTradeNo) &lt; <span class="number">1</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"订单号错误"</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p = alipay.TradePagePay&#123;&#125;</span><br><span class="line">p.NotifyURL = notifyUrl</span><br><span class="line">p.ReturnURL = returnUrl</span><br><span class="line">p.Subject = <span class="string">"支付测试"</span></span><br><span class="line">p.OutTradeNo = outTradeNo</span><br><span class="line">p.TotalAmount = <span class="string">"1.00"</span></span><br><span class="line">p.ProductCode = <span class="string">"FAST_INSTANT_TRADE_PAY"</span></span><br><span class="line">p.TimeoutExpress = <span class="string">"1m"</span><span class="comment">//唤起收银台订单创建，开始计时 （这里的计时是本次收银台的倒计时，使用相同的订单重新唤起收银台会重新计时）  如果不设置该参数默认15天订单关闭</span></span><br><span class="line">p.GoodsDetail = []*alipay.GoodsDetail&#123;&amp;alipay.GoodsDetail&#123;</span><br><span class="line">GoodsId:   <span class="string">"123"</span>,</span><br><span class="line">GoodsName: <span class="string">"test"</span>,</span><br><span class="line">Quantity:  <span class="number">1</span>,</span><br><span class="line">Price:     <span class="number">1</span>,</span><br><span class="line">&#125;&#125;</span><br><span class="line"></span><br><span class="line">url, err := client.TradePagePay(p)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(err)</span><br><span class="line">c.Abort()</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(url.String())</span><br><span class="line">c.Redirect(<span class="number">302</span>,url.String())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">FacePay</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">outTradeNo := c.Param(<span class="string">"id"</span>)</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(outTradeNo) &lt; <span class="number">1</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"订单号错误"</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p = alipay.TradePreCreate&#123;&#125;</span><br><span class="line">p.NotifyURL = notifyUrl</span><br><span class="line">p.ReturnURL = returnUrl</span><br><span class="line">p.Subject = <span class="string">"支付测试"</span></span><br><span class="line">p.OutTradeNo = outTradeNo</span><br><span class="line">p.TotalAmount = <span class="string">"1.00"</span></span><br><span class="line">p.ProductCode = <span class="string">"FACE_TO_FACE_PAYMENT"</span></span><br><span class="line"><span class="comment">//p.TimeoutExpress = "3m" //   统一收单线下交易预创建（扫码支付）：生成二维码使用支付宝钱包扫码以后订单超时时间开始计算  如果不设置该参数默认15天订单关闭</span></span><br><span class="line">p.GoodsDetail = []*alipay.GoodsDetailItem&#123;&amp;alipay.GoodsDetailItem&#123;</span><br><span class="line">GoodsId:   <span class="string">"123"</span>,</span><br><span class="line">GoodsName: <span class="string">"test"</span>,</span><br><span class="line">Quantity:  <span class="string">"1"</span>,</span><br><span class="line">Price:     <span class="string">"1"</span>,</span><br><span class="line">&#125;&#125;</span><br><span class="line">p.PassbackParams = <span class="string">"QrCode"</span></span><br><span class="line">param := p.Params()</span><br><span class="line">param[<span class="string">"qr_code_timeout_express"</span>] = <span class="string">"3m"</span></span><br><span class="line"></span><br><span class="line">rsp, err := client.TradePreCreate(p)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(err)</span><br><span class="line">c.Abort()</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fmt.Println(rsp)</span><br><span class="line"></span><br><span class="line">content := rsp.Content.QRCode</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(content) &lt; <span class="number">1</span> &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//obj := qrcodeTerminal.New2(qrcodeTerminal.ConsoleColors.BrightBlue,qrcodeTerminal.ConsoleColors.BrightGreen,qrcodeTerminal.QRCodeRecoveryLevels.Highest)</span></span><br><span class="line">obj := qrcodeTerminal.New()</span><br><span class="line">obj.Get([]<span class="keyword">byte</span>(content)).Print()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">AppPay</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">outTradeNo := c.Param(<span class="string">"id"</span>)</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(outTradeNo) &lt; <span class="number">1</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"订单号错误"</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p = alipay.TradeAppPay&#123;&#125;</span><br><span class="line">p.NotifyURL = notifyUrl</span><br><span class="line">p.ReturnURL = returnUrl</span><br><span class="line">p.Body = <span class="string">"body"</span></span><br><span class="line">p.Subject = <span class="string">"支付测试"</span></span><br><span class="line">p.OutTradeNo = outTradeNo</span><br><span class="line">p.TotalAmount = <span class="string">"1.00"</span></span><br><span class="line">p.ProductCode = <span class="string">"QUICK_MSECURITY_PAY"</span></span><br><span class="line"><span class="comment">//p.TimeoutExpress = "7d" // 输入支付密码订单创建超时时间开始计算，如果用户出现余额不足，才会在手机端显示等待买家付款，然后超时关闭。   如果不设置该参数默认15天订单关闭</span></span><br><span class="line">param, err := client.TradeAppPay(p)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(err)</span><br><span class="line">c.Abort()</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(param)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Return</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">_ = c.Request.ParseForm()</span><br><span class="line">ok, err := client.VerifySign(c.Request.Form)</span><br><span class="line">fmt.Println(ok, err)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> || !ok &#123;</span><br><span class="line">fmt.Println(<span class="string">"同步验签失败"</span>)</span><br><span class="line">c.Abort()</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//fmt.Println(c.PostForm("out_trade_no"))</span></span><br><span class="line"><span class="comment">//fmt.Println(c.PostForm("trade_no"))</span></span><br><span class="line"><span class="comment">//fmt.Println(c.PostForm("trade_status"))</span></span><br><span class="line"><span class="comment">//fmt.Println(c.PostForm("buyer_id"))</span></span><br><span class="line"><span class="comment">//fmt.Println(c.PostForm("notify_type"))</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> notify, _ = client.GetTradeNotification(c.Request)</span><br><span class="line"><span class="keyword">if</span> notify != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"同步验证支付成功"</span>)</span><br><span class="line"></span><br><span class="line">fmt.Println(notify.OutTradeNo)</span><br><span class="line">fmt.Println(notify.TradeNo)</span><br><span class="line">fmt.Println(notify.TradeStatus)</span><br><span class="line">fmt.Println(notify.BuyerId)</span><br><span class="line">fmt.Println(notify.NotifyType)</span><br><span class="line">fmt.Println(notify.PassbackParams)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"同步验证支付失败"</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Notify</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">_ = c.Request.ParseForm()</span><br><span class="line">ok, err := client.VerifySign(c.Request.PostForm)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> || !ok &#123;</span><br><span class="line">fmt.Println(<span class="string">"异步验签失败"</span>)</span><br><span class="line">c.Abort()</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(c.Request.PostForm)</span><br><span class="line"><span class="comment">//fmt.Println(c.PostForm("out_trade_no"))</span></span><br><span class="line"><span class="comment">//fmt.Println(c.PostForm("trade_no"))</span></span><br><span class="line"><span class="comment">//fmt.Println(c.PostForm("trade_status"))</span></span><br><span class="line"><span class="comment">//fmt.Println(c.PostForm("buyer_id"))</span></span><br><span class="line"><span class="comment">//fmt.Println(c.PostForm("notify_type"))</span></span><br><span class="line"><span class="keyword">var</span> notify, _ = client.GetTradeNotification(c.Request)</span><br><span class="line"><span class="keyword">if</span> notify != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"异步验证支付成功"</span>)</span><br><span class="line"></span><br><span class="line">fmt.Println(notify.OutTradeNo)</span><br><span class="line">fmt.Println(notify.TradeNo)</span><br><span class="line">fmt.Println(notify.TradeStatus)</span><br><span class="line">fmt.Println(notify.BuyerId)</span><br><span class="line">fmt.Println(notify.NotifyType)</span><br><span class="line">fmt.Println(notify.PassbackParams)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"异步验证支付失败"</span>)</span><br><span class="line">&#125;</span><br><span class="line">alipay.AckNotification(c.Writer) <span class="comment">// 确认收到通知消息</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">QueryOrder</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">outTradeNo := c.Param(<span class="string">"id"</span>)</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(outTradeNo) &lt; <span class="number">1</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"订单号错误"</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p = alipay.TradeQuery&#123;&#125;</span><br><span class="line">p.OutTradeNo = outTradeNo</span><br><span class="line">rsp, err := client.TradeQuery(p)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(err)</span><br><span class="line">c.Abort()</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(rsp)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">CancelOrder</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">outTradeNo := c.Param(<span class="string">"id"</span>)</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(outTradeNo) &lt; <span class="number">1</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"订单号错误"</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p = alipay.TradeCancel&#123;&#125;</span><br><span class="line">p.OutTradeNo = outTradeNo</span><br><span class="line">rsp, err := client.TradeCancel(p)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(err)</span><br><span class="line">c.Abort()</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(rsp)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="证书方式"><a href="#证书方式" class="headerlink" title="证书方式"></a>证书方式</h1><p>点击获取CSR文件</p><p><img src="/" alt="" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/wangyangyangisme/CDN@latest/blog/pay/alipay7.png"></p><p>上传制作好证书</p><p><img src="/" alt="" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/wangyangyangisme/CDN@latest/blog/pay/alipay9.png"></p><p>下载应用公钥证书、支付宝公钥证书、支付宝根证书</p><p><img src="/" alt="" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/wangyangyangisme/CDN@latest/blog/pay/alipay8.png"></p><p>测试代码</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"github.com/gin-gonic/gin"</span></span><br><span class="line"><span class="string">"github.com/smartwalle/alipay/v3"</span></span><br><span class="line"><span class="string">"time"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> client *alipay.Client</span><br><span class="line"><span class="comment">// 公网ip</span></span><br><span class="line"><span class="keyword">var</span> notifyUrl = <span class="string">"http://xxx.xxx.xxx.xxx:5001/notify"</span> <span class="comment">// 异步回调</span></span><br><span class="line"><span class="keyword">var</span> returnUrl = <span class="string">"http://xxx.xxx.xxx.xxx:5001/return"</span> <span class="comment">// 同步回调</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Init</span><span class="params">()</span> <span class="title">error</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> privateKey = <span class="string">"MIIEvv31r5zsxkK7qfVSg=="</span> <span class="comment">// 必须，上一步中使用 RSA签名验签工具 生成的私钥</span></span><br><span class="line"><span class="keyword">var</span> appId = <span class="string">"201610xxxxxxxxxx"</span></span><br><span class="line"><span class="keyword">var</span> err error</span><br><span class="line">client, err = alipay.New(appId, privateKey, <span class="literal">false</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line">err = client.LoadAppPublicCertFromFile(<span class="string">"appCertPublicKey_2017011104995404.crt"</span>) <span class="comment">// 加载应用公钥证书</span></span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line">err = client.LoadAliPayRootCertFromFile(<span class="string">"alipayRootCert.crt"</span>) <span class="comment">// 加载支付宝根证书</span></span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line">err = client.LoadAliPayPublicCertFromFile(<span class="string">"alipayCertPublicKey_RSA2.crt"</span>) <span class="comment">// 加载支付宝公钥证书</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// qr_code_timeout_express：允许用户最晚付款时间，从接口调用成功开始计时，最小值2m；传值1m扫码支付会直接报二维码已失效，二维码有效时间是2小时，所以该参数设置值超过2h也是无效值；</span></span><br><span class="line"><span class="comment">// timeout_express：最小值为1m，最大值为15t，不传默认15t；</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">//gin.SetMode(gin.ReleaseMode)</span></span><br><span class="line">err := Init()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    router := gin.Default()</span><br><span class="line">    router.GET(<span class="string">"/wap_pay/:id"</span>, WapPay)</span><br><span class="line">router.GET(<span class="string">"/page_pay/:id"</span>, PagePay)</span><br><span class="line">router.GET(<span class="string">"/app_pay/:id"</span>, AppPay)</span><br><span class="line">router.GET(<span class="string">"/face_pay/:id"</span>, FacePay)</span><br><span class="line">router.GET(<span class="string">"/query/:id"</span>, QueryOrder)</span><br><span class="line">router.GET(<span class="string">"/cancel/:id"</span>, CancelOrder)</span><br><span class="line">router.GET(<span class="string">"/wap_pay_qr/:id"</span>, WapPayQr)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">router.GET(<span class="string">"/return"</span>, Return)</span><br><span class="line">router.POST(<span class="string">"/notify"</span>, Notify)</span><br><span class="line"></span><br><span class="line">    err = router.Run(<span class="string">":5002"</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">WapPay</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">outTradeNo := c.Param(<span class="string">"id"</span>)</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(outTradeNo) &lt; <span class="number">1</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"订单号错误"</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p = alipay.TradeWapPay&#123;&#125;</span><br><span class="line">p.NotifyURL = notifyUrl</span><br><span class="line">p.ReturnURL = returnUrl</span><br><span class="line">p.Subject = <span class="string">"支付测试"</span></span><br><span class="line">p.OutTradeNo = outTradeNo</span><br><span class="line">p.TotalAmount = <span class="string">"1.00"</span></span><br><span class="line">p.ProductCode = <span class="string">"QUICK_WAP_WAY"</span></span><br><span class="line"><span class="comment">//p.TimeoutExpress = "7d"//输入支付密码订单创建超时时间开始计算，如果用户出现余额不足，才会在手机端显示等待买家付款。 然后超时关闭。  如果不设置该参数默认15天订单关闭</span></span><br><span class="line">url, err := client.TradeWapPay(p)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(err)</span><br><span class="line">c.Abort()</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> payURL = url.String()</span><br><span class="line">fmt.Println(payURL)</span><br><span class="line"><span class="comment">// 这个 payURL 即是用于支付的 URL，可将输出的内容复制，到浏览器中访问该 URL 即可打开支付页面。</span></span><br><span class="line"></span><br><span class="line">fmt.Println(<span class="string">"test"</span>)</span><br><span class="line">c.Redirect(<span class="number">302</span>,payURL)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">WapPayQr</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">outTradeNo := c.Param(<span class="string">"id"</span>)</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(outTradeNo) &lt; <span class="number">1</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"订单号错误"</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p = alipay.TradeWapPay&#123;&#125;</span><br><span class="line">p.NotifyURL = notifyUrl</span><br><span class="line">p.ReturnURL = returnUrl</span><br><span class="line">p.Subject = <span class="string">"支付测试"</span></span><br><span class="line">p.OutTradeNo = outTradeNo</span><br><span class="line">p.TotalAmount = <span class="string">"1.00"</span></span><br><span class="line">p.ProductCode = <span class="string">"QUICK_WAP_WAY"</span></span><br><span class="line"><span class="comment">//p.TimeoutExpress = "7d"//输入支付密码订单创建超时时间开始计算，如果用户出现余额不足，才会在手机端显示等待买家付款。 然后超时关闭。  如果不设置该参数默认15天订单关闭</span></span><br><span class="line">url, err := client.TradeWapPay(p)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(err)</span><br><span class="line">c.Abort()</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> payURL = url.String()</span><br><span class="line">fmt.Println(payURL)</span><br><span class="line"><span class="comment">// 这个 payURL 即是用于支付的 URL，可将输出的内容复制，到浏览器中访问该 URL 即可打开支付页面。</span></span><br><span class="line"></span><br><span class="line">obj := qrcodeTerminal.New()</span><br><span class="line">obj.Get([]<span class="keyword">byte</span>(payURL)).Print()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">PagePay</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">outTradeNo := c.Param(<span class="string">"id"</span>)</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(outTradeNo) &lt; <span class="number">1</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"订单号错误"</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p = alipay.TradePagePay&#123;&#125;</span><br><span class="line">p.NotifyURL = notifyUrl</span><br><span class="line">p.ReturnURL = returnUrl</span><br><span class="line">p.Subject = <span class="string">"支付测试"</span></span><br><span class="line">p.OutTradeNo = outTradeNo</span><br><span class="line">p.TotalAmount = <span class="string">"1.00"</span></span><br><span class="line">p.ProductCode = <span class="string">"FAST_INSTANT_TRADE_PAY"</span></span><br><span class="line">p.TimeoutExpress = <span class="string">"1m"</span><span class="comment">//唤起收银台订单创建，开始计时 （这里的计时是本次收银台的倒计时，使用相同的订单重新唤起收银台会重新计时）  如果不设置该参数默认15天订单关闭</span></span><br><span class="line">p.GoodsDetail = []*alipay.GoodsDetail&#123;&amp;alipay.GoodsDetail&#123;</span><br><span class="line">GoodsId:   <span class="string">"123"</span>,</span><br><span class="line">GoodsName: <span class="string">"test"</span>,</span><br><span class="line">Quantity:  <span class="number">1</span>,</span><br><span class="line">Price:     <span class="number">1</span>,</span><br><span class="line">&#125;&#125;</span><br><span class="line"></span><br><span class="line">url, err := client.TradePagePay(p)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(err)</span><br><span class="line">c.Abort()</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(url.String())</span><br><span class="line">c.Redirect(<span class="number">302</span>,url.String())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">FacePay</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">outTradeNo := c.Param(<span class="string">"id"</span>)</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(outTradeNo) &lt; <span class="number">1</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"订单号错误"</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p = alipay.TradePreCreate&#123;&#125;</span><br><span class="line">p.NotifyURL = notifyUrl</span><br><span class="line">p.ReturnURL = returnUrl</span><br><span class="line">p.Subject = <span class="string">"支付测试"</span></span><br><span class="line">p.OutTradeNo = outTradeNo</span><br><span class="line">p.TotalAmount = <span class="string">"1.00"</span></span><br><span class="line">p.ProductCode = <span class="string">"FACE_TO_FACE_PAYMENT"</span></span><br><span class="line"><span class="comment">//p.TimeoutExpress = "3m" //   统一收单线下交易预创建（扫码支付）：生成二维码使用支付宝钱包扫码以后订单超时时间开始计算  如果不设置该参数默认15天订单关闭</span></span><br><span class="line">p.GoodsDetail = []*alipay.GoodsDetailItem&#123;&amp;alipay.GoodsDetailItem&#123;</span><br><span class="line">GoodsId:   <span class="string">"123"</span>,</span><br><span class="line">GoodsName: <span class="string">"test"</span>,</span><br><span class="line">Quantity:  <span class="string">"1"</span>,</span><br><span class="line">Price:     <span class="string">"1"</span>,</span><br><span class="line">&#125;&#125;</span><br><span class="line">p.PassbackParams = <span class="string">"QrCode"</span></span><br><span class="line">param := p.Params()</span><br><span class="line">param[<span class="string">"qr_code_timeout_express"</span>] = <span class="string">"3m"</span></span><br><span class="line"></span><br><span class="line">rsp, err := client.TradePreCreate(p)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(err)</span><br><span class="line">c.Abort()</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fmt.Println(rsp)</span><br><span class="line"></span><br><span class="line">content := rsp.Content.QRCode</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(content) &lt; <span class="number">1</span> &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//obj := qrcodeTerminal.New2(qrcodeTerminal.ConsoleColors.BrightBlue,qrcodeTerminal.ConsoleColors.BrightGreen,qrcodeTerminal.QRCodeRecoveryLevels.Highest)</span></span><br><span class="line">obj := qrcodeTerminal.New()</span><br><span class="line">obj.Get([]<span class="keyword">byte</span>(content)).Print()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">AppPay</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">outTradeNo := c.Param(<span class="string">"id"</span>)</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(outTradeNo) &lt; <span class="number">1</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"订单号错误"</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p = alipay.TradeAppPay&#123;&#125;</span><br><span class="line">p.NotifyURL = notifyUrl</span><br><span class="line">p.ReturnURL = returnUrl</span><br><span class="line">p.Body = <span class="string">"body"</span></span><br><span class="line">p.Subject = <span class="string">"支付测试"</span></span><br><span class="line">p.OutTradeNo = outTradeNo</span><br><span class="line">p.TotalAmount = <span class="string">"1.00"</span></span><br><span class="line">p.ProductCode = <span class="string">"QUICK_MSECURITY_PAY"</span></span><br><span class="line"><span class="comment">//p.TimeoutExpress = "7d" // 输入支付密码订单创建超时时间开始计算，如果用户出现余额不足，才会在手机端显示等待买家付款，然后超时关闭。   如果不设置该参数默认15天订单关闭</span></span><br><span class="line">param, err := client.TradeAppPay(p)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(err)</span><br><span class="line">c.Abort()</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(param)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Return</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">_ = c.Request.ParseForm()</span><br><span class="line">ok, err := client.VerifySign(c.Request.Form)</span><br><span class="line">fmt.Println(ok, err)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> || !ok &#123;</span><br><span class="line">fmt.Println(<span class="string">"同步验签失败"</span>)</span><br><span class="line">c.Abort()</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//fmt.Println(c.PostForm("out_trade_no"))</span></span><br><span class="line"><span class="comment">//fmt.Println(c.PostForm("trade_no"))</span></span><br><span class="line"><span class="comment">//fmt.Println(c.PostForm("trade_status"))</span></span><br><span class="line"><span class="comment">//fmt.Println(c.PostForm("buyer_id"))</span></span><br><span class="line"><span class="comment">//fmt.Println(c.PostForm("notify_type"))</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> notify, _ = client.GetTradeNotification(c.Request)</span><br><span class="line"><span class="keyword">if</span> notify != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"同步验证支付成功"</span>)</span><br><span class="line"></span><br><span class="line">fmt.Println(notify.OutTradeNo)</span><br><span class="line">fmt.Println(notify.TradeNo)</span><br><span class="line">fmt.Println(notify.TradeStatus)</span><br><span class="line">fmt.Println(notify.BuyerId)</span><br><span class="line">fmt.Println(notify.NotifyType)</span><br><span class="line">fmt.Println(notify.PassbackParams)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"同步验证支付失败"</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Notify</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">_ = c.Request.ParseForm()</span><br><span class="line">ok, err := client.VerifySign(c.Request.PostForm)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> || !ok &#123;</span><br><span class="line">fmt.Println(<span class="string">"异步验签失败"</span>)</span><br><span class="line">c.Abort()</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(c.Request.PostForm)</span><br><span class="line"><span class="comment">//fmt.Println(c.PostForm("out_trade_no"))</span></span><br><span class="line"><span class="comment">//fmt.Println(c.PostForm("trade_no"))</span></span><br><span class="line"><span class="comment">//fmt.Println(c.PostForm("trade_status"))</span></span><br><span class="line"><span class="comment">//fmt.Println(c.PostForm("buyer_id"))</span></span><br><span class="line"><span class="comment">//fmt.Println(c.PostForm("notify_type"))</span></span><br><span class="line"><span class="keyword">var</span> notify, _ = client.GetTradeNotification(c.Request)</span><br><span class="line"><span class="keyword">if</span> notify != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"异步验证支付成功"</span>)</span><br><span class="line"></span><br><span class="line">fmt.Println(notify.OutTradeNo)</span><br><span class="line">fmt.Println(notify.TradeNo)</span><br><span class="line">fmt.Println(notify.TradeStatus)</span><br><span class="line">fmt.Println(notify.BuyerId)</span><br><span class="line">fmt.Println(notify.NotifyType)</span><br><span class="line">fmt.Println(notify.PassbackParams)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"异步验证支付失败"</span>)</span><br><span class="line">&#125;</span><br><span class="line">alipay.AckNotification(c.Writer) <span class="comment">// 确认收到通知消息</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">QueryOrder</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">outTradeNo := c.Param(<span class="string">"id"</span>)</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(outTradeNo) &lt; <span class="number">1</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"订单号错误"</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p = alipay.TradeQuery&#123;&#125;</span><br><span class="line">p.OutTradeNo = outTradeNo</span><br><span class="line">rsp, err := client.TradeQuery(p)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(err)</span><br><span class="line">c.Abort()</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(rsp)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">CancelOrder</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">outTradeNo := c.Param(<span class="string">"id"</span>)</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(outTradeNo) &lt; <span class="number">1</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"订单号错误"</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p = alipay.TradeCancel&#123;&#125;</span><br><span class="line">p.OutTradeNo = outTradeNo</span><br><span class="line">rsp, err := client.TradeCancel(p)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(err)</span><br><span class="line">c.Abort()</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(rsp)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;支付宝沙盒环境搭建&quot;&gt;&lt;a href=&quot;#支付宝沙盒环境搭建&quot; class=&quot;headerlink&quot; title=&quot;支付宝沙盒环境搭建&quot;&gt;&lt;/a&gt;支付宝沙盒环境搭建&lt;/h1&gt;&lt;h2 id=&quot;开发工具&quot;&gt;&lt;a href=&quot;#开发工具&quot; class=&quot;headerli
      
    
    </summary>
    
    
      <category term="pay" scheme="http://wangyangyangisme.github.io/categories/pay/"/>
    
    
  </entry>
  
  <entry>
    <title>CAS单点登录原理解析</title>
    <link href="http://wangyangyangisme.github.io/2019/12/23/frontend-CAS%E5%8D%95%E7%82%B9%E7%99%BB%E5%BD%95%E5%8E%9F%E7%90%86%E8%A7%A3%E6%9E%90/"/>
    <id>http://wangyangyangisme.github.io/2019/12/23/frontend-CAS单点登录原理解析/</id>
    <published>2019-12-23T15:50:36.000Z</published>
    <updated>2019-12-25T08:41:11.688Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>转载:<a href="http://www.sohu.com/a/280937943_756465" target="_blank" rel="noopener">http://www.sohu.com/a/280937943_756465</a></p></blockquote><h1 id="CAS单点登录原理解析"><a href="#CAS单点登录原理解析" class="headerlink" title="CAS单点登录原理解析"></a>CAS单点登录原理解析</h1><h2 id="1、基于Cookie的单点登录的回顾"><a href="#1、基于Cookie的单点登录的回顾" class="headerlink" title="1、基于Cookie的单点登录的回顾"></a>1、基于Cookie的单点登录的回顾</h2><p><img src="/" alt="img" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/wangyangyangisme/CDN@latest/blog/frontend/cas1.jpg"></p><p>基于Cookie的单点登录核心原理：</p><p>将用户名密码加密之后存于Cookie中，之后访问网站时在过滤器（filter）中校验用户权限，如果没有权限则从Cookie中取出用户名密码进行登录，让用户从某种意义上觉得只登录了一次。</p><p>该方式缺点就是多次传送用户名密码，增加被盗风险，以及不能跨域。同时<a href="http://www.qiandu.com与mail.qiandu.com同时拥有登录逻辑的代码，如果涉及到修改操作，则需要修改两处。" target="_blank" rel="noopener">www.qiandu.com与mail.qiandu.com同时拥有登录逻辑的代码，如果涉及到修改操作，则需要修改两处。</a> </p><h2 id="2、统一认证中心方案原理"><a href="#2、统一认证中心方案原理" class="headerlink" title="2、统一认证中心方案原理"></a>2、统一认证中心方案原理</h2><p>在生活中我们也有类似的相关生活经验，例如你去食堂吃饭，食堂打饭的阿姨（<a href="http://www.qiandu.com）告诉你，不收现金。并且告诉你，你去门口找换票的（passport.com）换小票。于是你换完票之后，再去找食堂阿姨，食堂阿姨拿着你的票，问门口换票的，这个票是真的吗？换票的说，是真的，于是给你打饭了。">www.qiandu.com）告诉你，不收现金。并且告诉你，你去门口找换票的（passport.com）换小票。于是你换完票之后，再去找食堂阿姨，食堂阿姨拿着你的票，问门口换票的，这个票是真的吗？换票的说，是真的，于是给你打饭了。</a></p><p>基于上述生活中的场景，我们将基于Cookie的单点登录改良以后的方案如下： </p><p><img src="/" alt="img" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/wangyangyangisme/CDN@latest/blog/frontend/cas2.jpg"></p><p>经过分析，Cookie单点登录认证太过于分散，每个网站都持有一份登陆认证代码。于是我们将认证统一化，形成一个独立的服务。当我们需要登录操作时，则重定向到统一认证中心<a href="http://passport.com。于是乎整个流程就如上图所示：">http://passport.com。于是乎整个流程就如上图所示：</a></p><p><strong>第一步</strong>：用户访问<a href="http://www.qiandu.com。过滤器判断用户是否登录，没有登录，则重定向（302）到网站http://passport.com。" target="_blank" rel="noopener">www.qiandu.com。过滤器判断用户是否登录，没有登录，则重定向（302）到网站http://passport.com。</a></p><p><strong>第二步</strong>：重定向到passport.com，输入用户名密码。passport.com将用户登录的信息记录到服务器的session中。</p><p><strong>第三步</strong>：passport.com给浏览器发送一个特殊的凭证，浏览器将凭证交给<a href="http://www.qiandu.com，www.qiandu.com则拿着浏览器交给他的凭证去passport.com验证凭证是否有效，从而判断用户是否登录成功。" target="_blank" rel="noopener">www.qiandu.com，www.qiandu.com则拿着浏览器交给他的凭证去passport.com验证凭证是否有效，从而判断用户是否登录成功。</a></p><p><strong>第四步</strong>：登录成功，浏览器与网站之间进行正常的访问。</p><h2 id="3、Yelu大学研发的CAS-Central-Authentication-Server"><a href="#3、Yelu大学研发的CAS-Central-Authentication-Server" class="headerlink" title="3、Yelu大学研发的CAS(Central Authentication Server)"></a>3、Yelu大学研发的CAS(Central Authentication Server)</h2><p>下面就以耶鲁大学研发的CAS为分析依据，分析其工作原理。首先看一下最上层的项目部署图： </p><p><img src="/" alt="img" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/wangyangyangisme/CDN@latest/blog/frontend/cas3.jpg"></p><p>部署项目时需要部署一个独立的认证中心（cas.qiandu.com），以及其他N个用户自己的web服务。</p><p>认证中心：也就是cas.qiandu.com，即cas-server。用来提供认证服务，由CAS框架提供，用户只需要根据业务实现认证的逻辑即可。</p><p>用户web项目：只需要在web.xml中配置几个过滤器，用来保护资源，过滤器也是CAS框架提供了，即cas-client，基本不需要改动可以直接使用。</p><h2 id="4、CAS的详细登录流程"><a href="#4、CAS的详细登录流程" class="headerlink" title="4、CAS的详细登录流程"></a>4、CAS的详细登录流程</h2><p><img src="/" alt="img" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/wangyangyangisme/CDN@latest/blog/frontend/cas4.jpg"></p><p>图是3个登录场景，分别为：第一次访问<a href="http://www.qiandu.com、第二次访问、以及登录状态下第一次访问mail.qiandu.com。" target="_blank" rel="noopener">www.qiandu.com、第二次访问、以及登录状态下第一次访问mail.qiandu.com。</a></p><p>下面就详细说明上图中每个数字标号做了什么，以及相关的请求内容，响应内容。 </p><h3 id="4-1、第一次访问www-qiandu-com"><a href="#4-1、第一次访问www-qiandu-com" class="headerlink" title="4.1、第一次访问www.qiandu.com"></a>4.1、第一次访问<a href="http://www.qiandu.com" target="_blank" rel="noopener">www.qiandu.com</a></h3><p><strong>标号1</strong>：用户访问<a href="http://www.qiandu.com，经过他的第一个过滤器（cas提供，在web.xml中配置）AuthenticationFilter。" target="_blank" rel="noopener">http://www.qiandu.com，经过他的第一个过滤器（cas提供，在web.xml中配置）AuthenticationFilter。</a></p><p>标号1：用户访问<a href="http://www.qiandu.com，经过他的第一个过滤器（cas提供，在web.xml中配置）AuthenticationFilter。" target="_blank" rel="noopener">http://www.qiandu.com，经过他的第一个过滤器（cas提供，在web.xml中配置）AuthenticationFilter。</a></p><p>过滤器全称：org.jasig.cas.client.authentication.AuthenticationFilter</p><p>主要作用：判断是否登录，如果没有登录则重定向到认证中心。</p><p><strong>标号2</strong>：<a href="http://www.qiandu.com发现用户没有登录，则返回浏览器重定向地址。" target="_blank" rel="noopener">www.qiandu.com发现用户没有登录，则返回浏览器重定向地址。</a> </p><p><img src="/" alt="img" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/wangyangyangisme/CDN@latest/blog/frontend/cas5.jpg"></p><p>首先可以看到我们请求<a href="http://www.qiandu.com，之后浏览器返回状态码302，然后让浏览器重定向到cas.qiandu.com并且通过get的方式添加参数service，该参数目的是登录成功之后会要重定向回来，因此需要该参数。并且你会发现，其实server的值就是编码之后的我们请求www.qiandu.com的地址。" target="_blank" rel="noopener">www.qiandu.com，之后浏览器返回状态码302，然后让浏览器重定向到cas.qiandu.com并且通过get的方式添加参数service，该参数目的是登录成功之后会要重定向回来，因此需要该参数。并且你会发现，其实server的值就是编码之后的我们请求www.qiandu.com的地址。</a></p><p><strong>标号3</strong>：浏览器接收到重定向之后发起重定向，请求cas.qiandu.com。</p><p><strong>标号4</strong>：认证中心cas.qiandu.com接收到登录请求，返回登陆页面。 </p><p><img src="/" alt="img" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/wangyangyangisme/CDN@latest/blog/frontend/cas6.jpg"></p><p>上图就是标号3的请求，以及标号4的响应。请求的URL是标号2返回的URL。之后认证中心就展示登录的页面，等待用户输入用户名密码。</p><p><strong>标号5</strong>：用户在cas.qiandu.com的login页面输入用户名密码，提交。</p><p><strong>标号6</strong>：服务器接收到用户名密码，则验证是否有效，验证逻辑可以使用cas-server提供现成的，也可以自己实现。 </p><p><img src="/" alt="img" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/wangyangyangisme/CDN@latest/blog/frontend/cas7.jpg"></p><p>上图就是标号5的请求，以及标号6的响应了。当cas.qiandu.com即csa-server认证通过之后，会返回给浏览器302，重定向的地址就是Referer中的service参数对应的值。后边并通过get的方式挟带了一个ticket令牌，这个ticket就是ST（数字3处）。同时会在Cookie中设置一个CASTGC，该cookie是网站cas.qiandu.com的cookie，只有访问这个网站才会携带这个cookie过去。</p><p>Cookie中的CASTGC：向cookie中添加该值的目的是当下次访问cas.qiandu.com时，浏览器将Cookie中的TGC携带到服务器，服务器根据这个TGC，查找与之对应的TGT。从而判断用户是否登录过了，是否需要展示登录页面。TGT与TGC的关系就像SESSION与Cookie中SESSIONID的关系。</p><p>TGT：Ticket Granted Ticket（俗称大令牌，或者说票根，他可以签发ST）</p><p>TGC：Ticket Granted Cookie（cookie中的value），存在Cookie中，根据他可以找到TGT。</p><p>ST：Service Ticket （小令牌），是TGT生成的，默认是用一次就生效了。也就是上面数字3处的ticket值。</p><p><strong>标号7</strong>：浏览器从cas.qiandu.com哪里拿到ticket之后，就根据指示重定向到<a href="http://www.qiandu.com，请求的url就是上面返回的url。" target="_blank" rel="noopener">www.qiandu.com，请求的url就是上面返回的url。</a> </p><p><img src="/" alt="img" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/wangyangyangisme/CDN@latest/blog/frontend/cas8.jpg"></p><p><strong>标号8</strong>：<a href="http://www.qiandu.com在过滤器中会取到ticket的值，然后通过http方式调用cas.qiandu.com验证该ticket是否是有效的。" target="_blank" rel="noopener">www.qiandu.com在过滤器中会取到ticket的值，然后通过http方式调用cas.qiandu.com验证该ticket是否是有效的。</a></p><p><strong>标号9</strong>：cas.qiandu.com接收到ticket之后，验证，验证通过返回结果告诉<a href="http://www.qiandu.com该ticket有效。" target="_blank" rel="noopener">www.qiandu.com该ticket有效。</a></p><p><strong>标号10</strong>：<a href="http://www.qiandu.com接收到cas-server的返回，知道了用户合法，展示相关资源到用户浏览器上。" target="_blank" rel="noopener">www.qiandu.com接收到cas-server的返回，知道了用户合法，展示相关资源到用户浏览器上。</a></p><p><img src="/" alt="img" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/wangyangyangisme/CDN@latest/blog/frontend/cas9.jpg"></p><p>至此，第一次访问的整个流程结束，其中标号8与标号9的环节是通过代码调用的，并不是浏览器发起，所以没有截取到报文。 </p><h3 id="4-2、第二次访问www-qiandu-com"><a href="#4-2、第二次访问www-qiandu-com" class="headerlink" title="4.2、第二次访问www.qiandu.com"></a>4.2、第二次访问<a href="http://www.qiandu.com" target="_blank" rel="noopener">www.qiandu.com</a></h3><p>上面以及访问过一次了，当第二次访问的时候发生了什么呢？</p><p><strong>标号11</strong>：用户发起请求，访问<a href="http://www.qiandu.com。会经过cas-client，也就是过滤器，因为第一次访问成功之后www.qiandu.com中会在session中记录用户信息，因此这里直接就通过了，不用验证了。" target="_blank" rel="noopener">www.qiandu.com。会经过cas-client，也就是过滤器，因为第一次访问成功之后www.qiandu.com中会在session中记录用户信息，因此这里直接就通过了，不用验证了。</a></p><p><strong>标号12</strong>：用户通过权限验证，浏览器返回正常资源。 </p><h3 id="4-3、访问mail-qiandu-com"><a href="#4-3、访问mail-qiandu-com" class="headerlink" title="4.3、访问mail.qiandu.com"></a>4.3、访问mail.qiandu.com</h3><p><strong>标号13</strong>：用户在<a href="http://www.qiandu.com正常上网，突然想访问mail.qiandu.com，于是发起访问mail.qiandu.com的请求。" target="_blank" rel="noopener">www.qiandu.com正常上网，突然想访问mail.qiandu.com，于是发起访问mail.qiandu.com的请求。</a></p><p><strong>标号14</strong>：mail.qiandu.com接收到请求，发现第一次访问，于是给他一个重定向的地址，让他去找认证中心登录。 </p><p><img src="/" alt="img" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/wangyangyangisme/CDN@latest/blog/frontend/cas10.jpg"></p><p>上图可以看到，用户请求mail.qiandu.com，然后返回给他一个网址，状态302重定向，service参数就是回来的地址。</p><p><strong>标号15</strong>：浏览器根据14返回的地址，发起重定向，因为之前访问过一次了，因此这次会携带上次返回的Cookie：TGC到认证中心。</p><p><strong>标号16</strong>：认证中心收到请求，发现TGC对应了一个TGT，于是用TGT签发一个ST，并且返回给浏览器，让他重定向到mail.qiandu.com </p><p><img src="/" alt="img" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/wangyangyangisme/CDN@latest/blog/frontend/cas11.jpg"></p><p>可以发现请求的时候是携带Cookie：CASTGC的，响应的就是一个地址加上TGT签发的ST也就是ticket。</p><p><strong>标号17</strong>：浏览器根据16返回的网址发起重定向。(在sso域中已经保存cookie了)</p><p><strong>标号18</strong>：mail.qiandu.com获取ticket去认证中心验证是否有效。</p><p><strong>标号19</strong>：认证成功，返回在mail.qiandu.com的session中设置登录状态，下次就直接登录。</p><p><strong>标号20</strong>：认证成功之后就反正用想要访问的资源了。</p><h2 id="5、总结"><a href="#5、总结" class="headerlink" title="5、总结"></a>5、总结</h2><p>至此，CAS登录的整个过程就完毕了，以后有时间总结下如何使用CAS，并运用到项目中</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;转载:&lt;a href=&quot;http://www.sohu.com/a/280937943_756465&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://www.sohu.com/a/280937943_756465&lt;/a
      
    
    </summary>
    
    
      <category term="frontend" scheme="http://wangyangyangisme.github.io/categories/frontend/"/>
    
    
  </entry>
  
  <entry>
    <title>CSS display的32种写法</title>
    <link href="http://wangyangyangisme.github.io/2019/12/20/frontend-CSS%20display%E7%9A%8432%E7%A7%8D%E5%86%99%E6%B3%95/"/>
    <id>http://wangyangyangisme.github.io/2019/12/20/frontend-CSS display的32种写法/</id>
    <published>2019-12-20T07:01:36.000Z</published>
    <updated>2019-12-20T07:01:06.045Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>转载：<a href="https://segmentfault.com/a/1190000012833458" target="_blank" rel="noopener">https://segmentfault.com/a/1190000012833458</a></p></blockquote><h1 id="CSS-display的32种写法"><a href="#CSS-display的32种写法" class="headerlink" title="CSS display的32种写法"></a>CSS display的32种写法</h1><p>你知道『<code>回</code>』字有四种写法，但你知道<code>display</code>有<code>32</code>种写法吗？今天我们一一道来，让你一次性完全掌握<code>display</code>，从此再也不用对它发愁。</p><p>从大的分类来讲，<code>display</code>的<code>32</code>种写法可以分为<code>6</code>个大类，再加上<code>1</code>个全局类，一共是<code>7</code>大类：</p><ul><li>外部值</li><li>内部值</li><li>列表值</li><li>属性值</li><li>显示值</li><li>混合值</li><li>全局值</li></ul><h1 id="外部值"><a href="#外部值" class="headerlink" title="外部值"></a>外部值</h1><p>所谓外部值，就是说这些值只会直接影响一个元素的外部表现，而不影响元素里面的儿子级孙子级元素的表现。</p><h2 id="display-block"><a href="#display-block" class="headerlink" title="display: block;"></a>display: block;</h2><p>这个值大家不陌生，我们最熟悉的<code>&lt;div&gt;</code>缺省就是这个值，最基本的块级元素，属于<code>css</code>入门初学者都知道的概念，只要是容器类型的元素基本都是这个值。除<code>&lt;div&gt;</code>之外，还有<code>&lt;h1&gt;</code>到<code>&lt;h6&gt;</code>，<code>&lt;p&gt;</code>，<code>&lt;form&gt;</code>，<code>&lt;header&gt;</code>，<code>&lt;footer&gt;</code>，<code>&lt;section&gt;</code>，<code>&lt;article&gt;</code>天生都是这个值。</p><h2 id="display-inline"><a href="#display-inline" class="headerlink" title="display: inline;"></a>display: inline;</h2><p>这个值大家也不陌生，行内元素嘛，只要是个行内元素都是这个值，最典型的是<code>&lt;span&gt;</code>，还有<code>&lt;a&gt;</code>，<code>&lt;img&gt;</code>，以及古代<code>html</code>语言当中的<code>&lt;b&gt;</code>，<code>&lt;i&gt;</code>都属于这一类型。</p><h2 id="display-run-in"><a href="#display-run-in" class="headerlink" title="display: run-in;"></a>display: run-in;</h2><p>这个值有点奇怪，通常没人用它，但你可以知道它。因为除了<code>IE</code>和<code>Opera</code>支持它以外，其他所有主流浏览器包括<code>Chrome</code>, <code>Safari</code>, <code>Firefox</code>全都对它置若罔闻。这东西说白了也没什么神秘，它的意思就是说如果我们命令一个元素<code>run-in</code>，中文意思就是『<code>闯入</code>』！那么这个元素就直接闯入下一行。比如说这样：</p><p><img src="/" alt="" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/wangyangyangisme/CDN@latest/blog/frontend/display1.webp"></p><p>写起来大概就是这样：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class="a"&gt;aaa&lt;/div&gt;</span><br><span class="line">&lt;div class="b"&gt;bbb&lt;/div&gt;</span><br><span class="line"><span class="selector-class">.a</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">36px</span>;</span><br><span class="line">  <span class="attribute">display</span>: run-in;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这有什么用呢？我们拿<code>span</code>设置<code>font-size</code>一样可以实现这个效果，就让<code>IE</code>自己跟自己玩去吧！说实话，在人力资源如此宝贵的今天，<code>IE</code>的产品经理不知脑子是不是进水了，不派工程师去实现那么多比这重要的多得多的特性，却花时间做这么个没用的玩意儿，难道工程师的时间不是金钱吗？难怪市场占有率连年下滑。</p><h1 id="内部值"><a href="#内部值" class="headerlink" title="内部值"></a>内部值</h1><p>谈完了外部值，我们来看看内部值。这一组值比较有意思了，在<code>css3</code>如火如荼的今天，你要玩不转这些值，怕是哪儿也找不到工作的。内部值主要是用来管束自己下属的儿子级元素的排布的，规定它们或者排成<code>S</code>形，或者排成<code>B</code>形这样的。</p><h2 id="display-flow"><a href="#display-flow" class="headerlink" title="display: flow;"></a>display: flow;</h2><p>含义不清，实验室阶段产品，<code>Chrome</code>不支持。如果还不够说服你暂时不要碰它的话，试着理解以下英文原文：</p><blockquote><p>If its outer display type is inline or run-in, and it is  participating in a block or inline formatting context, then it generates an inline box. Otherwise it generates a block container box.</p></blockquote><h2 id="display-flow-root"><a href="#display-flow-root" class="headerlink" title="display: flow-root;"></a>display: flow-root;</h2><p>不同于刚才谈到的<code>flow</code>，现在用<code>flow-root</code>的渐渐多起来了，因为它可以撑起被你<code>float</code>掉的块级元素的高度。外容器本来是有高度的，就像这样：</p><p><img src="/" alt="" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/wangyangyangisme/CDN@latest/blog/frontend/display2.webp"></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class="container container1"&gt;</span><br><span class="line">  &lt;div class="item"&gt;&lt;/div&gt;</span><br><span class="line">  <span class="selector-tag">Example</span> <span class="selector-tag">one</span></span><br><span class="line">&lt;/div&gt;</span><br><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">2px</span> solid <span class="number">#3bc9db</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#e3fafc</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">400px</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">5px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#1098ad</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#0b7285</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果因为你想让那一行字上去，于是你给<code>.item</code>加了一个<code>float: left;</code>结果就成这样了，外容器高度掉了，这不是很多人常犯的错误吗？</p><p><img src="/" alt="" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/wangyangyangisme/CDN@latest/blog/frontend/display3.webp"></p><p>现在我们给<code>.container</code>加上<code>display: flow-root;</code>再看一下：</p><p><img src="/" alt="" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/wangyangyangisme/CDN@latest/blog/frontend/display4.webp"></p><p>喏，外容器高度又回来了，这效果是不是杠杠的？</p><p>那位同学说，我们用<code>clear: both;</code>不是一样可以达到这效果吗？</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">''</span>;</span><br><span class="line">    <span class="attribute">clear</span>: both;</span><br><span class="line">    <span class="attribute">display</span>: table;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>小明，请你出去！我们在讲<code>display: flow-root;</code>，不是在讲<code>clear: both;</code>！</p><h2 id="display-table"><a href="#display-table" class="headerlink" title="display: table;"></a>display: table;</h2><p>这一个属性，以及下面的另外<code>8</code>个与<code>table</code>相关的属性，都是用来控制如何把<code>div</code>显示成<code>table</code>样式的，因为我们不喜欢<code>&lt;table&gt;</code>这个标签嘛，所以我们想把所有的<code>&lt;table&gt;</code>标签都换成<code>&lt;div&gt;</code>标签。<code>&lt;div&gt;</code>有什么好？无非就是能自动换行而已，但其实你完全可以做一个<code>&lt;table&gt;&lt;tr&gt;&lt;td&gt;</code>标签，把它全都替换成<code>display: block;</code>也可以自动折行，只不过略微麻烦而已。</p><p>关于<code>display: table;</code>的详细用法，大家可以参考<a href="http://www.cnblogs.com/haoqipeng/p/html-display-table.html" target="_blank" rel="noopener">这篇文章</a>，这里就不细说了。</p><h2 id="display-flex"><a href="#display-flex" class="headerlink" title="display: flex;"></a>display: flex;</h2><p>敲黑板，划重点！作为新一代的前端工程师，这个属性你必须烂熟于胸衣中，哦，错了，是胸中。<code>display: flex;</code>以及与它相关联的一系列属性：<code>flex-direction</code>, <code>flex-wrap</code>, <code>flex-flow</code>, <code>justify-content</code>, <code>align-items</code>, <code>align-content</code>，并且包括所有这些属性的取值，都是你需要反复研磨的。<code>2009</code>年诞生的这个属性可以说是不亚于<code>css</code>界一场蒸汽机诞生一样的工业革命，它的诞生标志着马车一样的<code>float</code>被彻底抛进历史的垃圾堆。</p><p>关于它的详情，会中文的可以参考阮一峰的<a href="http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html" target="_blank" rel="noopener">这篇文章</a>，但我认为，格式编排的更好还是<code>csstrick</code>上的<a href="https://css-tricks.com/snippets/css/a-guide-to-flexbox/" target="_blank" rel="noopener">这篇文章</a>。没有一张图能完整地展现<code>flex</code>的神韵，就放这张我比较喜欢的图片吧：</p><p><img src="/" alt="" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/wangyangyangisme/CDN@latest/blog/frontend/display5.webp"></p><h2 id="display-grid"><a href="#display-grid" class="headerlink" title="display: grid;"></a>display: grid;</h2><p>会<code>flex</code>很吊吗？会<code>grid</code>更吊哦！也许这就是下次前端面试的重点哦！</p><p><img src="/" alt="" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/wangyangyangisme/CDN@latest/blog/frontend/display6.webp"></p><p><code>grid</code>布局，中文翻译为<code>网格布局</code>。学习<code>grid</code>布局有两个重点：一个重点是<code>grid</code>布局引入了一个全新的单位：<code>fr</code>，它是<code>fraction</code>（<code>分数</code>）的缩写，所以从此以后，你的兵器库里除了<code>px</code>, <code>em</code>, <code>rem</code>, <code>百分比</code>这些常见兵器以及<code>vw</code>, <code>vh</code>这些新式武器之外，又多了一样旁门暗器<code>fr</code>，要想用好<code>grid</code>，必须充分掌握<code>fr</code>。另一个重点是<code>斜杠操作符</code>，这可不是<code>分数</code>哦。它表示的是<code>起始位置</code>和<code>结束位置</code>。比如说<code>3 / 4</code>，这可不是<code>四分之三</code>的意思，这是指一个元素从第<code>3</code>行开始，到第<code>4</code>行结束，但又不包括第<code>4</code>行。</p><p>同样，与<code>grid</code>相关联的也有一大堆旁门属性，是在学习<code>display: grid;</code>的同时必须掌握的。包括<code>grid</code>, <code>grid-column-start</code>, <code>grid-column-end</code>, <code>grid-row-start</code>, <code>grid-row-end</code>, <code>grid-template</code>, <code>grid-template-columns</code>, <code>grid-template-rows</code>, <code>grid-template-areas</code>, <code>grid-gap</code>, <code>grid-column-gap</code>, <code>grid-row-gap</code>, <code>grid-auto-columns</code>, <code>grid-auto-rows</code>, <code>grid-auto-flow</code>, <code>grid-column</code>, <code>grid-row</code>。不能详述，关于这个写起来又是一大篇文章。详情还是参考csstrick上<a href="https://css-tricks.com/snippets/css/complete-guide-grid/" target="_blank" rel="noopener">这篇文章</a>，讲得非常细致非常清楚。</p><h2 id="display-ruby"><a href="#display-ruby" class="headerlink" title="display: ruby;"></a>display: ruby;</h2><p><code>ruby</code>这个取值对于我们亚洲人来说其实是非常有用的一个东西，但是目前除了<code>Firefox</code>以外其它浏览器对它的支持都不太好。简而言之，<code>display: ruby;</code>的作用就是可以做出下面这样的东西：</p><p><img src="/" alt="" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/wangyangyangisme/CDN@latest/blog/frontend/display7.webp"></p><p>很好的东西，对吧？如果可以用的话，对我国的小学教育可以有极大的促进。但可惜我们现在暂时还用不了。</p><p><code>ruby</code>这个词在英语里的意思是<code>红宝石</code>，但在日语里是<code>ルビ</code>，翻译成中文是<code>旁注标记</code>的意思，我们中文的旁注标记就是汉语拼音。可以想见，这个标准的制定者肯定是日本人，如果是我们中国人的话，那这个标签就不是<code>ruby</code>，而是<code>pinyin</code>了。还有一个<code>ruby</code>语言，发明者也是一个日本人，和<code>html</code>里这个<code>ruby</code>是两码事，不要搞混了。</p><p><code>ruby</code>的语法大致如下：</p><p><img src="/" alt="" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/wangyangyangisme/CDN@latest/blog/frontend/display8.webp"></p><h2 id="display-subgrid"><a href="#display-subgrid" class="headerlink" title="display: subgrid;"></a>display: subgrid;</h2><p><code>2015</code>年<code>8</code>月<code>6</code>日，<code>W3C</code>的级联样式单（<code>CSS</code>）工作组（<code>Cascading Style Sheets Working Group</code>）发布了<code>CSS网格布局模块第一级</code>（<code>CSS Grid Layout Module Level 1</code>）的工作草案。在这个草案里规定了上一节我们讲到的<code>display: grid;</code>的方案。而<code>display: subgrid;</code>是属于<code>2017</code>年<code>11</code>月<code>9</code>日发布的非正式的<a href="https://drafts.csswg.org/css-grid-2/" target="_blank" rel="noopener">CSS网格布局模块第二级</a>的内容。所以这是一个非常新的草案，并且围绕它的争议从来也没有断过。</p><p><code>subgrid</code>总的思想是说大网格里还可以套小网格，互相不影响。但如果<code>grid</code>里可以再套<code>subgrid</code>的话，那我<code>subgrid</code>里还想再套<code>subgrid</code>怎么办？<code>subsubgrid</code>吗？况且，到底是<code>grid: subgrid;</code>还是<code>display: subgrid;</code>这个也没有达成共识，关于此一系列的争议，感兴趣的同学可以看看<a href="https://www.w3cplus.com/css3/why-display-contents-is-not-css-grid-layout-subgrid.html" target="_blank" rel="noopener">这篇文章</a>，英语好的可以看<a href="https://blogs.igalia.com/mrego/2016/02/12/subgrids-thinking-out-loud/" target="_blank" rel="noopener">这篇</a>。</p><h1 id="列表值"><a href="#列表值" class="headerlink" title="列表值"></a>列表值</h1><h2 id="display-list-item"><a href="#display-list-item" class="headerlink" title="display: list-item;"></a>display: list-item;</h2><p><code>display: list-item;</code>和<code>display: table;</code>一样，也是一帮痛恨各种<code>html</code>标签，而希望只使用<code>&lt;div&gt;</code>来写遍一切<code>html</code>的家伙搞出来的鬼东西，实际使用极少，效果就是这样：</p><p><img src="/" alt="" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/wangyangyangisme/CDN@latest/blog/frontend/display9.webp"></p><p>看，你用<code>&lt;ul&gt;&lt;li&gt;</code>能实现的效果，他可以用<code>&lt;div&gt;</code>实现出来，就是这个作用。</p><h1 id="属性值"><a href="#属性值" class="headerlink" title="属性值"></a>属性值</h1><p>属性值一般是附属于主值的，比如主值里设置了<code>display: table;</code>，就可以在子元素里使用<code>display: table-row-group;</code>等等属性，不过并不绝对。关于它们的作用，主要参考主值就够了。</p><h2 id="display-table-row-group"><a href="#display-table-row-group" class="headerlink" title="display: table-row-group;"></a>display: table-row-group;</h2><p>详情参考<a href="https://segmentfault.com/a/1190000012833458#table" target="_blank" rel="noopener">display: table;</a>。</p><h2 id="display-table-header-group"><a href="#display-table-header-group" class="headerlink" title="display: table-header-group;"></a>display: table-header-group;</h2><p>详情参考<a href="https://segmentfault.com/a/1190000012833458#table" target="_blank" rel="noopener">display: table;</a>。</p><h2 id="display-table-footer-group"><a href="#display-table-footer-group" class="headerlink" title="display: table-footer-group;"></a>display: table-footer-group;</h2><p>详情参考<a href="https://segmentfault.com/a/1190000012833458#table" target="_blank" rel="noopener">display: table;</a>。</p><h2 id="display-table-row"><a href="#display-table-row" class="headerlink" title="display: table-row;"></a>display: table-row;</h2><p>详情参考<a href="https://segmentfault.com/a/1190000012833458#table" target="_blank" rel="noopener">display: table;</a>。</p><h2 id="display-table-cell"><a href="#display-table-cell" class="headerlink" title="display: table-cell;"></a>display: table-cell;</h2><p>详情参考<a href="https://segmentfault.com/a/1190000012833458#table" target="_blank" rel="noopener">display: table;</a>。这个属性有必要详细说说，因为它完全可以单独应用，用在高度不固定元素的垂直居中上，详情请见张鑫旭的<a href="http://www.zhangxinxu.com/wordpress/2010/10/我所知道的几种displaytable-cell的应用/" target="_blank" rel="noopener">这篇文章</a>。效果如下图所示：</p><p><img src="/" alt="" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/wangyangyangisme/CDN@latest/blog/frontend/display10.webp"></p><h2 id="display-table-column-group"><a href="#display-table-column-group" class="headerlink" title="display: table-column-group;"></a>display: table-column-group;</h2><p>详情参考<a href="https://segmentfault.com/a/1190000012833458#table" target="_blank" rel="noopener">display: table;</a>。</p><h2 id="display-table-column"><a href="#display-table-column" class="headerlink" title="display: table-column;"></a>display: table-column;</h2><p>详情参考<a href="https://segmentfault.com/a/1190000012833458#table" target="_blank" rel="noopener">display: table;</a>。</p><h2 id="display-table-caption"><a href="#display-table-caption" class="headerlink" title="display: table-caption;"></a>display: table-caption;</h2><p>详情参考<a href="https://segmentfault.com/a/1190000012833458#table" target="_blank" rel="noopener">display: table;</a>。</p><h2 id="display-ruby-base"><a href="#display-ruby-base" class="headerlink" title="display: ruby-base;"></a>display: ruby-base;</h2><p>详情参考<a href="https://segmentfault.com/a/1190000012833458#ruby" target="_blank" rel="noopener">display: ruby;</a>。</p><h2 id="display-ruby-text"><a href="#display-ruby-text" class="headerlink" title="display: ruby-text;"></a>display: ruby-text;</h2><p>详情参考<a href="https://segmentfault.com/a/1190000012833458#ruby" target="_blank" rel="noopener">display: ruby;</a>。</p><h2 id="display-ruby-base-container"><a href="#display-ruby-base-container" class="headerlink" title="display: ruby-base-container;"></a>display: ruby-base-container;</h2><p>详情参考<a href="https://segmentfault.com/a/1190000012833458#ruby" target="_blank" rel="noopener">display: ruby;</a>。</p><h2 id="display-ruby-text-container"><a href="#display-ruby-text-container" class="headerlink" title="display: ruby-text-container;"></a>display: ruby-text-container;</h2><p>详情参考<a href="https://segmentfault.com/a/1190000012833458#ruby" target="_blank" rel="noopener">display: ruby;</a>。</p><h1 id="显示值"><a href="#显示值" class="headerlink" title="显示值"></a>显示值</h1><p><code>MDN</code>里把它叫做<code>&lt;display-box&gt; values</code>（<code>盒子值</code>），我把它叫做<code>显示值</code>，主要是为了便于理解。</p><h2 id="display-contents"><a href="#display-contents" class="headerlink" title="display: contents;"></a>display: contents;</h2><p>这大概是<code>2018</code>年年初最令人喜大普达的一件大事了：<a href="https://blogs.igalia.com/mrego/2018/01/11/display-contents-is-coming/" target="_blank" rel="noopener">Chrome 65版本终于要支持display: contents;了</a>！<code>Firefox</code>早就支持了，而<code>Chrome</code>直到现在才开始支持，这么重要的特性，它到底有什么功能呢？结果恐怕会令你大失所望。原来的布局是这样的：</p><p><img src="/" alt="" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/wangyangyangisme/CDN@latest/blog/frontend/display11.webp"></p><p>你给中间那个<code>div</code>加上<code>display: contents;</code>之后，它就变成这样了：</p><p><img src="/" alt="" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/wangyangyangisme/CDN@latest/blog/frontend/display12.webp"></p><p>这就是<code>display: contents;</code>的作用，它让子元素拥有和父元素一样的布局方式，仅此而已。</p><h2 id="display-none"><a href="#display-none" class="headerlink" title="display: none;"></a>display: none;</h2><p>这么著名的值还用多说吗？</p><h1 id="混合值"><a href="#混合值" class="headerlink" title="混合值"></a>混合值</h1><h2 id="display-inline-block"><a href="#display-inline-block" class="headerlink" title="display: inline-block;"></a>display: inline-block;</h2><p>关于<code>display: inline-block;</code>的作用恐怕只要做过<code>3</code>天以上前端的工程师都应该知道。什么也不说了，上一张著名的图片作总结吧：</p><p><img src="/" alt="" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/wangyangyangisme/CDN@latest/blog/frontend/display13.webp"></p><h2 id="display-inline-table"><a href="#display-inline-table" class="headerlink" title="display: inline-table;"></a>display: inline-table;</h2><p>你要能理解<code>inline-block</code>，你就能理解<code>inline-table</code>。在行内显示一个表格，就像这样：</p><p><img src="/" alt="" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/wangyangyangisme/CDN@latest/blog/frontend/display14.webp"></p><h2 id="display-inline-flex"><a href="#display-inline-flex" class="headerlink" title="display: inline-flex;"></a>display: inline-flex;</h2><p>这个就不用多说了吧？跟上面一样，在行内进行弹性布局，参考<a href="https://segmentfault.com/a/1190000012833458#flex" target="_blank" rel="noopener">display: flex;</a>。</p><h2 id="display-inline-grid"><a href="#display-inline-grid" class="headerlink" title="display: inline-grid;"></a>display: inline-grid;</h2><p>同上，在行内进行网格布局，参考<a href="https://segmentfault.com/a/1190000012833458#grid" target="_blank" rel="noopener">display: grid;</a>。</p><h1 id="全局值"><a href="#全局值" class="headerlink" title="全局值"></a>全局值</h1><p>这些值不是<code>display</code>属性的专利，几乎其它任意属性都可以用，列在这里凑个数。</p><h2 id="display-inherit"><a href="#display-inherit" class="headerlink" title="display: inherit;"></a>display: inherit;</h2><p>继承父元素的<code>display</code>属性。</p><h2 id="display-initial"><a href="#display-initial" class="headerlink" title="display: initial;"></a>display: initial;</h2><p>不管父元素怎么设定，恢复到浏览器最初始时的<code>display</code>属性。</p><h2 id="display-unset"><a href="#display-unset" class="headerlink" title="display: unset;"></a>display: unset;</h2><p><code>unset</code>混合了<code>inherit</code>和<code>initial</code>。如果父元素设值了，就用父元素的设定，如果父元素没设值，就用浏览器的缺省设定。直接看图最明白：</p><p><img src="/" alt="" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/wangyangyangisme/CDN@latest/blog/frontend/display15.webp"></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>以上就是在<code>css</code>里<code>display</code>的<code>32</code>种写法。谈了这么多，不知道你记住了多少呢？其实，单纯理解每一个<code>display</code>属性的取值都不难，难的是融会贯通，在恰当的地方运用恰当的值，毕竟我们的目的是为了把代码写短，而不是把代码写长。如果你怕记不太清的话，就请你收藏这篇小文，也许将来的某一天，你会用得着。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;转载：&lt;a href=&quot;https://segmentfault.com/a/1190000012833458&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://segmentfault.com/a/119000001
      
    
    </summary>
    
    
      <category term="frontend" scheme="http://wangyangyangisme.github.io/categories/frontend/"/>
    
    
  </entry>
  
  <entry>
    <title>Sass中文教程</title>
    <link href="http://wangyangyangisme.github.io/2019/12/18/frontend-Sass%E4%B8%AD%E6%96%87%E6%95%99%E7%A8%8B/"/>
    <id>http://wangyangyangisme.github.io/2019/12/18/frontend-Sass中文教程/</id>
    <published>2019-12-18T02:00:36.000Z</published>
    <updated>2019-12-18T01:55:34.772Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Sass中文教程"><a href="#Sass中文教程" class="headerlink" title="Sass中文教程"></a>Sass中文教程</h1><p>Sass 是一款强化 CSS 的辅助工具，它在 CSS 语法的基础上增加了变量 (variables)、嵌套 (nested  rules)、混合 (mixins)、导入 (inline imports) 等高级功能，这些拓展令 CSS 更加强大与优雅。使用 Sass  以及 Sass 的样式库（如 <a href="http://compass-style.org/" target="_blank" rel="noopener">Compass</a>）有助于更好地组织管理样式文件，以及更高效地开发项目。</p><h2 id="1-特色功能-Features"><a href="#1-特色功能-Features" class="headerlink" title="1. 特色功能 (Features)"></a>1. 特色功能 (Features)</h2><ul><li>完全兼容 CSS3</li><li>在 CSS 基础上增加变量、嵌套 (nesting)、混合 (mixins) 等功能</li><li>通过<a href="http://sass-lang.com/docs/yardoc/Sass/Script/Functions.html" target="_blank" rel="noopener">函数</a>进行颜色值与属性值的运算</li><li>提供<a href="https://www.sass.hk/docs/#t8" target="_blank" rel="noopener">控制指令 (control directives)</a>等高级功能</li><li>自定义输出格式</li></ul><h2 id="2-语法格式-Syntax"><a href="#2-语法格式-Syntax" class="headerlink" title="2. 语法格式 (Syntax)"></a>2. 语法格式 (Syntax)</h2><p>Sass 有两种语法格式。首先是 SCSS (Sassy CSS) —— 也是本文示例所使用的格式 —— 这种格式仅在 CSS3  语法的基础上进行拓展，所有 CSS3 语法在 SCSS 中都是通用的，同时加入 Sass 的特色功能。此外，SCSS 也支持大多数 CSS  hacks 写法以及浏览器前缀写法 (vendor-specific syntax)，以及早期的 IE 滤镜写法。这种格式以 <code>.scss</code> 作为拓展名。</p><p>另一种也是最早的 Sass 语法格式，被称为缩进格式 (Indented Sass) 通常简称 “Sass”，是一种简化格式。它使用  “缩进” 代替 “花括号” 表示属性属于某个选择器，用 “换行” 代替 “分号” 分隔属性，很多人认为这样做比 SCSS  更容易阅读，书写也更快速。缩进格式也可以使用 Sass 的全部功能，只是与 SCSS 相比个别地方采取了不同的表达方式，具体请查看 <a href="http://sass-lang.com/docs/yardoc/file.INDENTED_SYNTAX.html" target="_blank" rel="noopener">the indented syntax reference</a>。这种格式以 <code>.sass</code> 作为拓展名。</p><p>任何一种格式可以直接 <a href="https://www.sass.hk/docs/#t7-1" target="_blank" rel="noopener">导入 (@import)</a> 到另一种格式中使用，或者通过 <code>sass-convert</code> 命令行工具转换成另一种格式：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> Convert Sass to SCSS</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sass-convert style.sass style.scss</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Convert SCSS to Sass</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sass-convert style.scss style.sass</span></span><br></pre></td></tr></table></figure><h2 id="3-使用-Sass-Using-Sass"><a href="#3-使用-Sass-Using-Sass" class="headerlink" title="3. 使用 Sass (Using Sass)"></a>3. 使用 Sass (Using Sass)</h2><p>Sass 可以通过以下三种方式使用：作为命令行工具；作为独立的 Ruby 模块 (Ruby module)；或者作为  Rack-enabled 框架的插件（例如 Ruby on Rails 与 Merb）。无论哪种方式都需要先安装 Sass gem  （Windows 系统需要先<a href="http://rubyinstaller.org/" target="_blank" rel="noopener">安装 Ruby</a>）：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gem install sass</span><br></pre></td></tr></table></figure><p>在命令行中运行 Sass：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sass input.scss output.css</span><br></pre></td></tr></table></figure><p>监视单个 Sass 文件，每次修改并保存时自动编译：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sass --watch input.scss:output.css</span><br></pre></td></tr></table></figure><p>监视整个文件夹：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sass --watch app/sass:public/stylesheets</span><br></pre></td></tr></table></figure><p>更多命令的用法请通过 <code>sass --help</code> 获取帮助。</p><p>在 Ruby 中使用 Sass 也非常容易，Sass gem 安装完毕后运行 <code>require &quot;sass&quot;</code> 然后按照下面的方法使用 <a href="http://sass-lang.com/docs/yardoc/Sass/Engine.html" target="_blank" rel="noopener">Sass::Engine</a>：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">engine = Sass::Engine.new("#main &#123;background-color: #0000ff&#125;", :syntax =&gt; :scss)</span><br><span class="line">engine.render #=&gt; "#main &#123; background-color: #0000ff; &#125;\n"</span><br></pre></td></tr></table></figure><h3 id="3-1-Rack-Rails-Merb-Plugin"><a href="#3-1-Rack-Rails-Merb-Plugin" class="headerlink" title="3.1. Rack/Rails/Merb Plugin"></a>3.1. Rack/Rails/Merb Plugin</h3><p>在 Rails 3 之前的版本中使用 Sass，需要在 <code>environment.rb</code> 文件中添加：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">config</span><span class="selector-class">.gem</span> "<span class="selector-tag">sass</span>"</span><br></pre></td></tr></table></figure><p>Rails 3 则需要在 Gemfile 中添加：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">gem</span> "<span class="selector-tag">sass</span>"</span><br></pre></td></tr></table></figure><p>在 Merb 中使用 Sass，需要在 <code>config/dependencies.rb</code> 中添加：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">dependency</span> "<span class="selector-tag">merb-haml</span>"</span><br></pre></td></tr></table></figure><p>在 Rack 中使用 Sass，需要在 <code>config.ru</code> 中添加：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">require 'sass/plugin/rack'</span><br><span class="line"><span class="selector-tag">use</span> <span class="selector-tag">Sass</span><span class="selector-pseudo">::Plugin</span><span class="selector-pseudo">::Rack</span></span><br></pre></td></tr></table></figure><p>样式文件与 views 不同，不包含任何动态内容，因此 CSS 只需要在 Sass 文件被修改后再编译生成。默认情况下 <code>.sass</code> 与 <code>.scss</code> 文件放置在 <code>public/stylesheets/sass</code> 中（可通过 <a href="http://sass-lang.com/documentation/file.SASS_REFERENCE.html#template_location-option" target="_blank" rel="noopener">:template_location</a> 修改路径），编译生成的 CSS 文件放置在 <code>public/stylesheets</code> 中。例如 <code>public/stylesheets/sass/main.scss</code> 编译生成 <code>public/stylesheets/main.css</code>。</p><h3 id="3-2-缓存-Caching"><a href="#3-2-缓存-Caching" class="headerlink" title="3.2. 缓存 (Caching)"></a>3.2. 缓存 (Caching)</h3><p>Sass 自动缓存编译后的模板与 <a href="http://sass-lang.com/documentation/file.SASS_REFERENCE.html#partials" target="_blank" rel="noopener">partials</a>，这样做能够显著提升重新编译的速度，尤其在处理由 <code>@import</code> 导入多个子文件的大型项目时。</p><p>单独使用 Sass，缓存内容保存在 <code>.sass-cache</code> 文件夹中。在 Rails 和 Merb 项目中缓存文件保存在 <code>tmp/sass-cache</code> 文件夹中（可通过 <a href="https://www.sass.hk/docs/" target="_blank" rel="noopener"><code>:cache_location</code></a> 修改路径）。禁用缓存可将 <code>:cache</code> 设为 <code>false</code>。</p><h3 id="3-3-配置选项-Options"><a href="#3-3-配置选项-Options" class="headerlink" title="3.3. 配置选项 (Options)"></a>3.3. 配置选项 (Options)</h3><p><a href="http://sass-lang.com/documentation/file.SASS_REFERENCE.html#options" target="_blank" rel="noopener">暂未翻译</a></p><h3 id="3-4-判断语法格式-Syntax-Selection"><a href="#3-4-判断语法格式-Syntax-Selection" class="headerlink" title="3.4. 判断语法格式 (Syntax Selection)"></a>3.4. 判断语法格式 (Syntax Selection)</h3><p>Sass 命令行工具根据文件的拓展名判断所使用的语法格式，没有文件名时 <code>sass</code> 命令默认编译 <code>.sass</code> 文件，添加 <code>--scss</code> 选项或者使用 <code>scss</code> 命令编译 SCSS 文件。</p><h3 id="3-5-编码格式-Encodings"><a href="#3-5-编码格式-Encodings" class="headerlink" title="3.5. 编码格式 (Encodings)"></a>3.5. 编码格式 (Encodings)</h3><p>在 Ruby 1.9 及以上环境中运行 Sass 时，Sass 对文件的编码格式比较敏感，首先会根据 <a href="http://www.w3.org/TR/2013/WD-css-syntax-3-20130919/#determine-the-fallback-encoding" target="_blank" rel="noopener">CSS spec</a> 判断样式文件的编码格式，如果失败则检测 Ruby string encoding。也就是说，Sass 首先检查 Unicode byte order mark，然后是 <code>@charset</code> 声明，最后是 Ruby string encoding，假如都没有检测到，默认使用 UTF-8 编码。</p><p>与 CSS 相同，使用 <code>@charset</code> 可以声明特定的编码格式。在样式文件的起始位置（前面没有任何空白与注释）插入 <code>@charset &quot;encoding-name&quot;</code>， Sass 将会按照给出的编码格式编译文件。注意所使用的编码格式必须可转换为 Unicode 字符集。</p><p>Sass 以 UTF-8 编码输出 CSS 文件，当且仅当编译后的文件中包含非 ASCII 字符时，才会在输出文件中添加 <code>@charset</code> 声明，而在压缩模式下 (compressed mode) 使用 UTF-8 byte order mark 代替 <code>@charset</code> 声明语句。</p><h2 id="4-CSS-功能拓展-CSS-Extensions"><a href="#4-CSS-功能拓展-CSS-Extensions" class="headerlink" title="4. CSS 功能拓展 (CSS Extensions)"></a>4. CSS 功能拓展 (CSS Extensions)</h2><h3 id="4-1-嵌套规则-Nested-Rules"><a href="#4-1-嵌套规则-Nested-Rules" class="headerlink" title="4.1. 嵌套规则 (Nested Rules)"></a>4.1. 嵌套规则 (Nested Rules)</h3><p>Sass 允许将一套 CSS 样式嵌套进另一套样式中，内层的样式将它外层的选择器作为父选择器，例如：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#main</span> <span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#00ff00</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">97%</span>;</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.redbox</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#ff0000</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#000000</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译为</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#main</span> <span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#00ff00</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">97%</span>; &#125;</span><br><span class="line">  <span class="selector-id">#main</span> <span class="selector-tag">p</span> <span class="selector-class">.redbox</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#ff0000</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#000000</span>; &#125;</span><br></pre></td></tr></table></figure><p>嵌套功能避免了重复输入父选择器，而且令复杂的 CSS 结构更易于管理：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#main</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">97%</span>;</span><br><span class="line"></span><br><span class="line">  <span class="selector-tag">p</span>, <span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">2em</span>;</span><br><span class="line">    <span class="selector-tag">a</span> &#123; <span class="attribute">font-weight</span>: bold; &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-tag">pre</span> &#123; <span class="attribute">font-size</span>: <span class="number">3em</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译为</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#main</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">97%</span>; &#125;</span><br><span class="line">  <span class="selector-id">#main</span> <span class="selector-tag">p</span>, <span class="selector-id">#main</span> <span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">2em</span>; &#125;</span><br><span class="line">    <span class="selector-id">#main</span> <span class="selector-tag">p</span> <span class="selector-tag">a</span>, <span class="selector-id">#main</span> <span class="selector-tag">div</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">      <span class="attribute">font-weight</span>: bold; &#125;</span><br><span class="line">  <span class="selector-id">#main</span> <span class="selector-tag">pre</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">3em</span>; &#125;</span><br></pre></td></tr></table></figure><h3 id="4-2-父选择器-amp-Referencing-Parent-Selectors-amp"><a href="#4-2-父选择器-amp-Referencing-Parent-Selectors-amp" class="headerlink" title="4.2. 父选择器 &amp; (Referencing Parent Selectors: &amp;)"></a>4.2. 父选择器 <code>&amp;</code> (Referencing Parent Selectors: <code>&amp;</code>)</h3><p>在嵌套 CSS 规则时，有时也需要直接使用嵌套外层的父选择器，例如，当给某个元素设定 <code>hover</code> 样式时，或者当 <code>body</code> 元素有某个 classname 时，可以用 <code>&amp;</code> 代表嵌套规则外层的父选择器。</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">a</span> &#123;</span><br><span class="line">  <span class="attribute">font-weight</span>: bold;</span><br><span class="line">  <span class="attribute">text-decoration</span>: none;</span><br><span class="line">  &amp;:hover &#123; <span class="attribute">text-decoration</span>: underline; &#125;</span><br><span class="line">  <span class="selector-tag">body</span><span class="selector-class">.firefox</span> &amp; &#123; <span class="attribute">font-weight</span>: normal; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译为</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">a</span> &#123;</span><br><span class="line">  <span class="attribute">font-weight</span>: bold;</span><br><span class="line">  <span class="attribute">text-decoration</span>: none; &#125;</span><br><span class="line">  <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">text-decoration</span>: underline; &#125;</span><br><span class="line">  <span class="selector-tag">body</span><span class="selector-class">.firefox</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">font-weight</span>: normal; &#125;</span><br></pre></td></tr></table></figure><p>编译后的 CSS 文件中 <code>&amp;</code> 将被替换成嵌套外层的父选择器，如果含有多层嵌套，最外层的父选择器会一层一层向下传递：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#main</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: black;</span><br><span class="line">  <span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">font-weight</span>: bold;</span><br><span class="line">    &amp;:hover &#123; <span class="attribute">color</span>: red; &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译为</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#main</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: black; &#125;</span><br><span class="line">  <span class="selector-id">#main</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">font-weight</span>: bold; &#125;</span><br><span class="line">    <span class="selector-id">#main</span> <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">      <span class="attribute">color</span>: red; &#125;</span><br></pre></td></tr></table></figure><p><code>&amp;</code> 必须作为选择器的第一个字符，其后可以跟随后缀生成复合的选择器，例如</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#main</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: black;</span><br><span class="line">  &amp;-sidebar &#123; <span class="attribute">border</span>: <span class="number">1px</span> solid; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译为</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#main</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: black; &#125;</span><br><span class="line">  <span class="selector-id">#main-sidebar</span> &#123;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid; &#125;</span><br></pre></td></tr></table></figure><p>当父选择器含有不合适的后缀时，Sass 将会报错。</p><h3 id="4-3-属性嵌套-Nested-Properties"><a href="#4-3-属性嵌套-Nested-Properties" class="headerlink" title="4.3. 属性嵌套 (Nested Properties)"></a>4.3. 属性嵌套 (Nested Properties)</h3><p>有些 CSS 属性遵循相同的命名空间 (namespace)，比如 <code>font-family, font-size, font-weight</code> 都以 <code>font</code> 作为属性的命名空间。为了便于管理这样的属性，同时也为了避免了重复输入，Sass 允许将属性嵌套在命名空间中，例如：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.funky</span> &#123;</span><br><span class="line">  <span class="attribute">font</span>: &#123;</span><br><span class="line">    family: fantasy;</span><br><span class="line">    size: <span class="number">30em</span>;</span><br><span class="line">    weight: bold;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译为</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.funky</span> &#123;</span><br><span class="line">  <span class="attribute">font-family</span>: fantasy;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">30em</span>;</span><br><span class="line">  <span class="attribute">font-weight</span>: bold; &#125;</span><br></pre></td></tr></table></figure><p>命名空间也可以包含自己的属性值，例如：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.funky</span> &#123;</span><br><span class="line">  <span class="attribute">font</span>: <span class="number">20px</span>/<span class="number">24px</span> &#123;</span><br><span class="line">    family: fantasy;</span><br><span class="line">    weight: bold;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译为</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.funky</span> &#123;</span><br><span class="line">  <span class="attribute">font</span>: <span class="number">20px</span>/<span class="number">24px</span>;</span><br><span class="line">    <span class="attribute">font-family</span>: fantasy;</span><br><span class="line">    <span class="attribute">font-weight</span>: bold; &#125;</span><br></pre></td></tr></table></figure><h3 id="4-4-占位符选择器-foo-Placeholder-Selectors-foo"><a href="#4-4-占位符选择器-foo-Placeholder-Selectors-foo" class="headerlink" title="4.4. 占位符选择器 %foo (Placeholder Selectors: %foo)"></a>4.4. 占位符选择器 <code>%foo</code> (Placeholder Selectors: <code>%foo</code>)</h3><p>Sass 额外提供了一种特殊类型的选择器：占位符选择器 (placeholder selector)。与常用的 id 与 class 选择器写法相似，只是 <code>#</code> 或 <code>.</code> 替换成了 <code>%</code>。必须通过 <a href="https://www.sass.hk/docs/#t7-3" target="_blank" rel="noopener">@extend</a> 指令调用，更多介绍请查阅 <a href="https://www.sass.hk/docs/#t7-3-6" target="_blank" rel="noopener">@extend-Only Selectors</a>。</p><p>当占位符选择器单独使用时（未通过 <code>@extend</code> 调用），不会编译到 CSS 文件中。</p><h2 id="5-注释-与-Comments-and"><a href="#5-注释-与-Comments-and" class="headerlink" title="5. 注释 /* */ 与 //  (Comments: /* */ and //)"></a>5. 注释 <code>/* */</code> 与 <code>//</code>  (Comments: <code>/* */</code> and <code>//</code>)</h2><p>Sass 支持标准的 CSS 多行注释 <code>/* */</code>，以及单行注释 <code>//</code>，前者会 被完整输出到编译后的 CSS 文件中，而后者则不会，例如：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* This comment is</span></span><br><span class="line"><span class="comment"> * several lines long.</span></span><br><span class="line"><span class="comment"> * since it uses the CSS comment syntax,</span></span><br><span class="line"><span class="comment"> * it will appear in the CSS output. */</span></span><br><span class="line"><span class="selector-tag">body</span> &#123; <span class="attribute">color</span>: black; &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// These comments are only one line long each.</span></span><br><span class="line"><span class="comment">// They won't appear in the CSS output,</span></span><br><span class="line"><span class="comment">// since they use the single-line comment syntax.</span></span><br><span class="line"><span class="selector-tag">a</span> &#123; <span class="attribute">color</span>: green; &#125;</span><br></pre></td></tr></table></figure><p>编译为</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* This comment is</span></span><br><span class="line"><span class="comment"> * several lines long.</span></span><br><span class="line"><span class="comment"> * since it uses the CSS comment syntax,</span></span><br><span class="line"><span class="comment"> * it will appear in the CSS output. */</span></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: black; &#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">a</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: green; &#125;</span><br></pre></td></tr></table></figure><p>将 <code>!</code> 作为多行注释的第一个字符表示在压缩输出模式下保留这条注释并输出到 CSS 文件中，通常用于添加版权信息。</p><p>插值语句 (interpolation) 也可写进多行注释中输出变量值：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$version</span>: <span class="string">"1.2.3"</span>;</span><br><span class="line"><span class="comment">/* This CSS is generated by My Snazzy Framework version #&#123;$version&#125;. */</span></span><br></pre></td></tr></table></figure><p>编译为</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* This CSS is generated by My Snazzy Framework version 1.2.3. */</span></span><br></pre></td></tr></table></figure><h2 id="6-SassScript"><a href="#6-SassScript" class="headerlink" title="6. SassScript"></a>6. SassScript</h2><p>在 CSS 属性的基础上 Sass 提供了一些名为 SassScript 的新功能。 SassScript 可作用于任何属性，允许属性使用变量、算数运算等额外功能。</p><p>通过 interpolation，SassScript 甚至可以生成选择器或属性名，这一点对编写 mixin 有很大帮助。</p><h3 id="6-1-Interactive-Shell"><a href="#6-1-Interactive-Shell" class="headerlink" title="6.1. Interactive Shell"></a>6.1. Interactive Shell</h3><p>Interactive Shell 可以在命令行中测试 SassScript 的功能。在命令行中输入 <code>sass -i</code>，然后输入想要测试的 SassScript 查看输出结果：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sass -i</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt; <span class="string">"Hello, Sassy World!"</span></span></span><br><span class="line">"Hello, Sassy World!"</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt; 1px + 1px + 1px</span></span><br><span class="line">3px</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt; <span class="comment">#777 + #777</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash">eeeeee</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt; <span class="comment">#777 + #888</span></span></span><br><span class="line">white</span><br></pre></td></tr></table></figure><h3 id="6-2-变量-Variables"><a href="#6-2-变量-Variables" class="headerlink" title="6.2. 变量 $ (Variables: $)"></a>6.2. 变量 <code>$</code> (Variables: <code>$</code>)</h3><p>SassScript 最普遍的用法就是变量，变量以美元符号开头，赋值方法与 CSS 属性的写法一样：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$width</span>: <span class="number">5em</span>;</span><br></pre></td></tr></table></figure><p>直接使用即调用变量：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#main</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: $width;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>变量支持块级作用域，嵌套规则内定义的变量只能在嵌套规则内使用（局部变量），不在嵌套规则内定义的变量则可在任何地方使用（全局变量）。将局部变量转换为全局变量可以添加 <code>!global</code> 声明：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#main</span> &#123;</span><br><span class="line">  <span class="variable">$width</span>: <span class="number">5em</span> !global;</span><br><span class="line">  <span class="attribute">width</span>: <span class="variable">$width</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#sidebar</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="variable">$width</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译为</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#main</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">5em</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#sidebar</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">5em</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-3-数据类型-Data-Types"><a href="#6-3-数据类型-Data-Types" class="headerlink" title="6.3. 数据类型 (Data Types)"></a>6.3. 数据类型 (Data Types)</h3><p>SassScript 支持 6 种主要的数据类型：</p><ul><li>数字，<code>1, 2, 13, 10px</code></li><li>字符串，有引号字符串与无引号字符串，<code>&quot;foo&quot;, &#39;bar&#39;, baz</code></li><li>颜色，<code>blue, #04a3f9, rgba(255,0,0,0.5)</code></li><li>布尔型，<code>true, false</code></li><li>空值，<code>null</code></li><li>数组 (list)，用空格或逗号作分隔符，<code>1.5em 1em 0 2em, Helvetica, Arial, sans-serif</code></li><li>maps, 相当于 JavaScript 的 object，<code>(key1: value1, key2: value2)</code></li></ul><p>SassScript 也支持其他 CSS 属性值，比如 Unicode 字符集，或 <code>!important</code> 声明。然而Sass 不会特殊对待这些属性值，一律视为无引号字符串。</p><h4 id="6-3-1-字符串-Strings"><a href="#6-3-1-字符串-Strings" class="headerlink" title="6.3.1. 字符串 (Strings)"></a>6.3.1. 字符串 (Strings)</h4><p>SassScript 支持 CSS 的两种字符串类型：有引号字符串 (quoted strings)，如 <code>&quot;Lucida Grande&quot;</code> <code>&#39;http://sass-lang.com&#39;</code>；与无引号字符串 (unquoted strings)，如 <code>sans-serif</code> <code>bold</code>，在编译 CSS 文件时不会改变其类型。只有一种情况例外，使用 <code>#{}</code> (interpolation) 时，有引号字符串将被编译为无引号字符串，这样便于在 mixin 中引用选择器名：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">mixin</span> firefox-message(<span class="variable">$selector</span>) &#123;</span><br><span class="line">  <span class="selector-tag">body</span><span class="selector-class">.firefox</span> #&#123;<span class="variable">$selector</span>&#125;:before &#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">"Hi, Firefox users!"</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">@<span class="keyword">include</span> firefox-message(<span class="string">".header"</span>);</span><br></pre></td></tr></table></figure><p>编译为</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span><span class="selector-class">.firefox</span> <span class="selector-class">.header</span><span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">"Hi, Firefox users!"</span>; &#125;</span><br></pre></td></tr></table></figure><h4 id="6-3-2-数组-Lists"><a href="#6-3-2-数组-Lists" class="headerlink" title="6.3.2. 数组 (Lists)"></a>6.3.2. 数组 (Lists)</h4><p>数组 (lists) 指 Sass 如何处理 CSS 中 <code>margin: 10px 15px 0 0</code> 或者 <code>font-face: Helvetica, Arial, sans-serif</code> 这样通过空格或者逗号分隔的一系列的值。事实上，独立的值也被视为数组 —— 只包含一个值的数组。</p><p>数组本身没有太多功能，但 <a href="http://sass-lang.com/docs/yardoc/Sass/Script/Functions.html#list-functions" target="_blank" rel="noopener">Sass list functions</a> 赋予了数组更多新功能：<code>nth</code> 函数可以直接访问数组中的某一项；<code>join</code> 函数可以将多个数组连接在一起；<code>append</code> 函数可以在数组中添加新值；而 <code>@each</code> 指令能够遍历数组中的每一项。</p><p>数组中可以包含子数组，比如 <code>1px 2px, 5px 6px</code> 是包含 <code>1px 2px</code> 与 <code>5px 6px</code> 两个数组的数组。如果内外两层数组使用相同的分隔方式，需要用圆括号包裹内层，所以也可以写成 <code>(1px 2px) (5px 6px)</code>。变化是，之前的 <code>1px 2px, 5px 6px</code> 使用逗号分割了两个子数组 (comma-separated)，而 <code>(1px 2px) (5px 6px)</code> 则使用空格分割(space-separated)。</p><p>当数组被编译为 CSS 时，Sass 不会添加任何圆括号（CSS 中没有这种写法），所以 <code>(1px 2px) (5px 6px)</code> 与 <code>1px 2px, 5px 6px</code> 在编译后的 CSS 文件中是完全一样的，但是它们在 Sass 文件中却有不同的意义，前者是包含两个数组的数组，而后者是包含四个值的数组。</p><p>用 <code>()</code> 表示不包含任何值的空数组（在 Sass 3.3 版之后也视为空的 map）。空数组不可以直接编译成 CSS，比如编译 <code>font-family: ()</code> Sass 将会报错。如果数组中包含空数组或空值，编译时将被清除，比如 <code>1px 2px () 3px</code> 或 <code>1px 2px null 3px</code>。</p><p>基于逗号分隔的数组允许保留结尾的逗号，这样做的意义是强调数组的结构关系，尤其是需要声明只包含单个值的数组时。例如 <code>(1,)</code> 表示只包含 <code>1</code> 的数组，而 <code>(1 2 3,)</code> 表示包含 <code>1 2 3</code> 这个以空格分隔的数组的数组。</p><h4 id="6-3-3-Maps"><a href="#6-3-3-Maps" class="headerlink" title="6.3.3. Maps"></a>6.3.3. Maps</h4><p>Maps represent an association between keys and values, where keys are  used to look up values. They make it easy to collect values into named  groups and access those groups dynamically. They have no direct parallel in CSS, although they’re syntactically similar to media query  expressions: <code>scss $map: (key1: value1, key2: value2, key3: value3);</code> Unlike lists, maps must always be surrounded by parentheses and must  always be comma-separated. Both the keys and values in maps can be any  SassScript object. A map may only have one value associated with a given key (although that value may be a list). A given value may be  associated with many keys, though. Like lists, maps are mostly manipulated using SassScript functions. The  map-get function looks up values in a map and the map-merge function  adds values to a map. The @each directive can be used to add styles for  each key/value pair in a map. The order of pairs in a map is always the  same as when the map was created. Maps can also be used anywhere lists can. When used by a list function, a map is treated as a list of pairs. For example, (key1: value1, key2:  value2) would be treated as the nested list key1 value1, key2 value2 by  list functions. Lists cannot be treated as maps, though, with the  exception of the empty list. () represents both a map with no key/value  pairs and a list with no elements. Note that map keys can be any Sass data type (even another map) and the  syntax for declaring a map allows arbitrary SassScript expressions that  will be evaluated to determine the key. Maps cannot be converted to plain CSS. Using one as the value of a  variable or an argument to a CSS function will cause an error. Use the  inspect($value) function to produce an output string useful for  debugging maps.<br> 中文简要说明:<br> Maps可视为键值对的集合，键被用于定位值 在css种没有对应的概念。 和Lists不同Maps必须被圆括号包围，键值对被都好分割 。 Maps中的keys和values可以是sassscript的任何对象。（包括任意的sassscript表达式 arbitrary SassScript expressions） 和Lists一样Maps主要为sassscript函数服务，如 map-get函数用于查找键值，map-merge函数用于map和新加的键值融合，@each命令可添加样式到一个map中的每个键值对。 Maps可用于任何Lists可用的地方，在List函数中 Map会被自动转换为List ， 如 (key1: value1, key2: value2)会被List函数转换为 key1 value1, key2 value2  ，反之则不能。(网友Soledad提供)</p><h4 id="6-3-4-颜色-Colors"><a href="#6-3-4-颜色-Colors" class="headerlink" title="6.3.4. 颜色 (Colors)"></a>6.3.4. 颜色 (Colors)</h4><p>Any CSS color expression returns a SassScript Color value. This includes a large number of named colors which are indistinguishable from  unquoted strings. In compressed output mode, Sass will output the smallest CSS  representation of a color. For example, #FF0000 will output as red in  compressed mode, but blanchedalmond will output as #FFEBCD. A common issue users encounter with named colors is that since Sass  prefers the same output format as was typed in other output modes, a  color interpolated into a selector becomes invalid syntax when  compressed. To avoid this, always quote named colors if they are meant  to be used in the construction of a selector.</p><h3 id="6-4-运算-Operations"><a href="#6-4-运算-Operations" class="headerlink" title="6.4. 运算 (Operations)"></a>6.4. 运算 (Operations)</h3><p>所有数据类型均支持相等运算 <code>==</code> 或 <code>!=</code>，此外，每种数据类型也有其各自支持的运算方式。</p><h4 id="6-4-1-数字运算-Number-Operations"><a href="#6-4-1-数字运算-Number-Operations" class="headerlink" title="6.4.1. 数字运算 (Number Operations)"></a>6.4.1. 数字运算 (Number Operations)</h4><p>SassScript 支持数字的加减乘除、取整等运算 (<code>+, -, *, /, %</code>)，如果必要会在不同单位间转换值。</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">1in</span> + <span class="number">8pt</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译为</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">1.111in</span>; &#125;</span><br></pre></td></tr></table></figure><p>关系运算 <code>&lt;, &gt;, &lt;=, &gt;=</code> 也可用于数字运算，相等运算 <code>==, !=</code> 可用于所有数据类型。</p><h5 id="6-4-1-1-除法运算-Division-and"><a href="#6-4-1-1-除法运算-Division-and" class="headerlink" title="6.4.1.1. 除法运算 / (Division and /)"></a>6.4.1.1. 除法运算 <code>/</code> (Division and <code>/</code>)</h5><p><code>/</code> 在 CSS 中通常起到分隔数字的用途，SassScript 作为 CSS 语言的拓展当然也支持这个功能，同时也赋予了 <code>/</code> 除法运算的功能。也就是说，如果 <code>/</code> 在 SassScript 中把两个数字分隔，编译后的 CSS 文件中也是同样的作用。</p><p>以下三种情况 <code>/</code> 将被视为除法运算符号：</p><ul><li>如果值，或值的一部分，是变量或者函数的返回值</li><li>如果值被圆括号包裹</li><li>如果值是算数表达式的一部分</li></ul><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">font</span>: <span class="number">10px</span>/<span class="number">8px</span>;             <span class="comment">// Plain CSS, no division</span></span><br><span class="line">  <span class="variable">$width</span>: <span class="number">1000px</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="variable">$width</span>/<span class="number">2</span>;            <span class="comment">// Uses a variable, does division</span></span><br><span class="line">  <span class="attribute">width</span>: round(<span class="number">1.5</span>)/<span class="number">2</span>;        <span class="comment">// Uses a function, does division</span></span><br><span class="line">  <span class="attribute">height</span>: (<span class="number">500px</span>/<span class="number">2</span>);          <span class="comment">// Uses parentheses, does division</span></span><br><span class="line">  <span class="attribute">margin-left</span>: <span class="number">5px</span> + <span class="number">8px</span>/<span class="number">2px</span>; <span class="comment">// Uses +, does division</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译为</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">font</span>: <span class="number">10px</span>/<span class="number">8px</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">500px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">250px</span>;</span><br><span class="line">  <span class="attribute">margin-left</span>: <span class="number">9px</span>; &#125;</span><br></pre></td></tr></table></figure><p>如果需要使用变量，同时又要确保 <code>/</code> 不做除法运算而是完整地编译到 CSS 文件中，只需要用 <code>#{}</code> 插值语句将变量包裹。</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="variable">$font-size</span>: <span class="number">12px</span>;</span><br><span class="line">  <span class="variable">$line-height</span>: <span class="number">30px</span>;</span><br><span class="line">  <span class="attribute">font</span>: #&#123;<span class="variable">$font-size</span>&#125;/#&#123;<span class="variable">$line-height</span>&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译为</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">font</span>: <span class="number">12px</span>/<span class="number">30px</span>; &#125;</span><br></pre></td></tr></table></figure><h4 id="6-4-2-颜色值运算-Color-Operations"><a href="#6-4-2-颜色值运算-Color-Operations" class="headerlink" title="6.4.2. 颜色值运算 (Color Operations)"></a>6.4.2. 颜色值运算 (Color Operations)</h4><p>颜色值的运算是分段计算进行的，也就是分别计算红色，绿色，以及蓝色的值：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#010203</span> + <span class="number">#040506</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>计算 <code>01 + 04 = 05</code> <code>02 + 05 = 07</code> <code>03 + 06 = 09</code>，然后编译为</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#050709</span>; &#125;</span><br></pre></td></tr></table></figure><p>使用 <a href="http://sass-lang.com/docs/yardoc/Sass/Script/Functions.html" target="_blank" rel="noopener">color functions</a> 比计算颜色值更方便一些。</p><p>数字与颜色值之间也可以进行算数运算，同样也是分段计算的，比如</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#010203</span> * <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>计算 <code>01 * 2 = 02</code> <code>02 * 2 = 04</code> <code>03 * 2 = 06</code>，然后编译为</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#020406</span>; &#125;</span><br></pre></td></tr></table></figure><p>需要注意的是，如果颜色值包含 alpha channel（rgba 或 hsla 两种颜色值），必须拥有相等的 alpha 值才能进行运算，因为算术运算不会作用于 alpha 值。</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: rgba(<span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.75</span>) + rgba(<span class="number">0</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0.75</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译为</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="built_in">rgba</span>(255, 255, 0, 0.75); &#125;</span><br></pre></td></tr></table></figure><p>颜色值的 alpha channel 可以通过 <a href="http://sass-lang.com/docs/yardoc/Sass/Script/Functions.html#opacify-instance_method" target="_blank" rel="noopener">opacify</a> 或 <a href="http://sass-lang.com/docs/yardoc/Sass/Script/Functions.html#transparentize-instance_method" target="_blank" rel="noopener">transparentize</a> 两个函数进行调整。</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$translucent-red</span>: rgba(<span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.5</span>);</span><br><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: opacify(<span class="variable">$translucent-red</span>, <span class="number">0.3</span>);</span><br><span class="line">  <span class="attribute">background-color</span>: transparentize(<span class="variable">$translucent-red</span>, <span class="number">0.25</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译为</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="built_in">rgba</span>(255, 0, 0, 0.8);</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="built_in">rgba</span>(255, 0, 0, 0.25); &#125;</span><br></pre></td></tr></table></figure><p>IE 滤镜要求所有的颜色值包含 alpha 层，而且格式必须固定 <code>#AABBCCDD</code>，使用 <code>ie_hex_str</code> 函数可以很容易地将颜色转化为 IE 滤镜要求的格式。</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$translucent-red</span>: rgba(<span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.5</span>);</span><br><span class="line"><span class="variable">$green</span>: <span class="number">#00ff00</span>;</span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">filter</span>: progid:DXImageTransform.Microsoft.gradient(enabled=<span class="string">'false'</span>, startColorstr=<span class="string">'#&#123;ie-hex-str($green)&#125;'</span>, endColorstr=<span class="string">'#&#123;ie-hex-str($translucent-red)&#125;'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译为</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">filter</span>: progid:DXImageTransform.Microsoft.<span class="built_in">gradient</span>(enabled=<span class="string">'false'</span>, startColorstr=#FF00FF00, endColorstr=#80FF0000);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6-4-3-字符串运算-String-Operations"><a href="#6-4-3-字符串运算-String-Operations" class="headerlink" title="6.4.3. 字符串运算 (String Operations)"></a>6.4.3. 字符串运算 (String Operations)</h4><p><code>+</code> 可用于连接字符串</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">cursor</span>: e + -resize;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译为</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">cursor</span>: e-resize; &#125;</span><br></pre></td></tr></table></figure><p>注意，如果有引号字符串（位于 <code>+</code> 左侧）连接无引号字符串，运算结果是有引号的，相反，无引号字符串（位于 <code>+</code> 左侧）连接有引号字符串，运算结果则没有引号。</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span>:before &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">"Foo "</span> + Bar;</span><br><span class="line">  <span class="attribute">font-family</span>: sans- + <span class="string">"serif"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译为</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span><span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">"Foo Bar"</span>;</span><br><span class="line">  <span class="attribute">font-family</span>: sans-serif; &#125;</span><br></pre></td></tr></table></figure><p>运算表达式与其他值连用时，用空格做连接符：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">3px</span> + <span class="number">4px</span> auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译为</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">7px</span> auto; &#125;</span><br></pre></td></tr></table></figure><p>在有引号的文本字符串中使用 <code>#{}</code> 插值语句可以添加动态的值：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span>:before &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">"I ate #&#123;5 + 10&#125; pies!"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译为</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span><span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">"I ate 15 pies!"</span>; &#125;</span><br></pre></td></tr></table></figure><p>空的值被视作插入了空字符串：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$value</span>: null;</span><br><span class="line"><span class="selector-tag">p</span>:before &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">"I ate #&#123;$value&#125; pies!"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译为</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span><span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">"I ate pies!"</span>; &#125;</span><br></pre></td></tr></table></figure><h4 id="6-4-4-布尔运算-Boolean-Operations"><a href="#6-4-4-布尔运算-Boolean-Operations" class="headerlink" title="6.4.4. 布尔运算 (Boolean Operations)"></a>6.4.4. 布尔运算 (Boolean Operations)</h4><p>SassScript 支持布尔型的 <code>and</code> <code>or</code> 以及 <code>not</code> 运算。</p><h4 id="6-4-5-数组运算-List-Operations"><a href="#6-4-5-数组运算-List-Operations" class="headerlink" title="6.4.5. 数组运算 (List Operations)"></a>6.4.5. 数组运算 (List Operations)</h4><p>数组不支持任何运算方式，只能使用 <a href="http://sass-lang.com/docs/yardoc/Sass/Script/Functions.html#list-functions" target="_blank" rel="noopener">list functions</a> 控制。</p><h3 id="6-5-圆括号-Parentheses"><a href="#6-5-圆括号-Parentheses" class="headerlink" title="6.5. 圆括号 (Parentheses)"></a>6.5. 圆括号 (Parentheses)</h3><p>圆括号可以用来影响运算的顺序：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">1em</span> + (<span class="number">2em</span> * <span class="number">3</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译为</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">7em</span>; &#125;</span><br></pre></td></tr></table></figure><h3 id="6-6-函数-Functions"><a href="#6-6-函数-Functions" class="headerlink" title="6.6. 函数 (Functions)"></a>6.6. 函数 (Functions)</h3><p>SassScript 定义了多种函数，有些甚至可以通过普通的 CSS 语句调用：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: hsl(<span class="number">0</span>, <span class="number">100%</span>, <span class="number">50%</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译为</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#ff0000</span>; &#125;</span><br></pre></td></tr></table></figure><h4 id="6-6-1-关键词参数-Keyword-Arguments"><a href="#6-6-1-关键词参数-Keyword-Arguments" class="headerlink" title="6.6.1. 关键词参数 (Keyword Arguments)"></a>6.6.1. 关键词参数 (Keyword Arguments)</h4><p>Sass 函数允许使用关键词参数 (keyword arguments)，上面的例子也可以写成：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: hsl(<span class="variable">$hue</span>: <span class="number">0</span>, <span class="variable">$saturation</span>: <span class="number">100%</span>, <span class="variable">$lightness</span>: <span class="number">50%</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>虽然不够简明，但是阅读起来会更方便。关键词参数给函数提供了更灵活的接口，以及容易调用的参数。关键词参数可以打乱顺序使用，如果使用默认值也可以省缺，另外，参数名被视为变量名，下划线、短横线可以互换使用。</p><p>通过 <a href="http://sass-lang.com/docs/yardoc/Sass/Script/Functions.html" target="_blank" rel="noopener">Sass::Script::Functions</a> 查看完整的 Sass 函数列表，参数名，以及如何自定义函数。</p><h3 id="6-7-插值语句-Interpolation"><a href="#6-7-插值语句-Interpolation" class="headerlink" title="6.7. 插值语句 #{} (Interpolation: #{})"></a>6.7. 插值语句 <code>#{}</code> (Interpolation: <code>#{}</code>)</h3><p>通过 <code>#{}</code> 插值语句可以在选择器或属性名中使用变量：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$name</span>: foo;</span><br><span class="line"><span class="variable">$attr</span>: border;</span><br><span class="line"><span class="selector-tag">p</span>.#&#123;<span class="variable">$name</span>&#125; &#123;</span><br><span class="line">  #&#123;<span class="variable">$attr</span>&#125;-<span class="attribute">color</span>: blue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译为</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span><span class="selector-class">.foo</span> &#123;</span><br><span class="line">  <span class="attribute">border-color</span>: blue; &#125;</span><br></pre></td></tr></table></figure><p><code>#{}</code> 插值语句也可以在属性值中插入 SassScript，大多数情况下，这样可能还不如使用变量方便，但是使用 <code>#{}</code> 可以避免 Sass 运行运算表达式，直接编译 CSS。</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="variable">$font-size</span>: <span class="number">12px</span>;</span><br><span class="line">  <span class="variable">$line-height</span>: <span class="number">30px</span>;</span><br><span class="line">  <span class="attribute">font</span>: #&#123;<span class="variable">$font-size</span>&#125;/#&#123;<span class="variable">$line-height</span>&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译为</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">font</span>: <span class="number">12px</span>/<span class="number">30px</span>; &#125;</span><br></pre></td></tr></table></figure><h3 id="6-8-amp-in-SassScript"><a href="#6-8-amp-in-SassScript" class="headerlink" title="6.8. &amp; in SassScript"></a>6.8. <code>&amp;</code> in SassScript</h3><p>Just like when it’s used in selectors, &amp; in SassScript refers to  the current parent selector. It’s a comma-separated list of  space-separated lists. For example:</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.foo</span><span class="selector-class">.bar</span> <span class="selector-class">.baz</span><span class="selector-class">.bang</span>, <span class="selector-class">.bip</span><span class="selector-class">.qux</span> &#123;</span><br><span class="line">  <span class="variable">$selector</span>: &amp;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The value of $selector is now ((“.foo.bar” “.baz.bang”), “.bip.qux”). The compound selectors are quoted here to indicate that they’re  strings, but in reality they would be unquoted. Even if the parent  selector doesn’t contain a comma or a space, &amp; will always have two  levels of nesting, so it can be accessed consistently.</p><p>If there is no parent selector, the value of &amp; will be null. This means you can use it in a mixin to detect whether a parent selector  exists:</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">mixin</span> does-parent-exist &#123;</span><br><span class="line">  @<span class="keyword">if</span> &amp; &#123;</span><br><span class="line">    &amp;:hover &#123;</span><br><span class="line">      <span class="attribute">color</span>: red;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; @<span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="selector-tag">a</span> &#123;</span><br><span class="line">      <span class="attribute">color</span>: red;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-9-变量定义-default-Variable-Defaults-default"><a href="#6-9-变量定义-default-Variable-Defaults-default" class="headerlink" title="6.9. 变量定义 !default (Variable Defaults: !default)"></a>6.9. 变量定义 <code>!default</code> (Variable Defaults: <code>!default</code>)</h3><p>可以在变量的结尾添加 <code>!default</code> 给一个未通过 <code>!default</code> 声明赋值的变量赋值，此时，如果变量已经被赋值，不会再被重新赋值，但是如果变量还没有被赋值，则会被赋予新的值。</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$content</span>: <span class="string">"First content"</span>;</span><br><span class="line"><span class="variable">$content</span>: <span class="string">"Second content?"</span> !default;</span><br><span class="line"><span class="variable">$new_content</span>: <span class="string">"First time reference"</span> !default;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#main</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="variable">$content</span>;</span><br><span class="line">  new-<span class="attribute">content</span>: <span class="variable">$new_content</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译为</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#main</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">"First content"</span>;</span><br><span class="line">  <span class="attribute">new-content</span>: <span class="string">"First time reference"</span>; &#125;</span><br></pre></td></tr></table></figure><p>变量是 null 空值时将视为未被 <code>!default</code> 赋值。</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$content</span>: null;</span><br><span class="line"><span class="variable">$content</span>: <span class="string">"Non-null content"</span> !default;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#main</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="variable">$content</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译为</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#main</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">"Non-null content"</span>; &#125;</span><br></pre></td></tr></table></figure><h2 id="7-Rules-与指令-Rules-and-Directives"><a href="#7-Rules-与指令-Rules-and-Directives" class="headerlink" title="7. @-Rules 与指令 (@-Rules and Directives)"></a>7. @-Rules 与指令 (@-Rules and Directives)</h2><p>Sass 支持所有的 CSS3 @-Rules，以及 Sass 特有的 “指令”（directives）。这一节会详细解释，更多资料请查看 <a href="https://www.sass.hk/docs/#8" target="_blank" rel="noopener">控制指令 (control directives)</a> 与 <a href="https://www.sass.hk/docs/#9" target="_blank" rel="noopener">混合指令 (mixin directives)</a> 两个部分。</p><h3 id="7-1-import"><a href="#7-1-import" class="headerlink" title="7.1. @import"></a>7.1. @import</h3><p>Sass 拓展了 <code>@import</code> 的功能，允许其导入 SCSS 或 Sass 文件。被导入的文件将合并编译到同一个 CSS 文件中，另外，被导入的文件中所包含的变量或者混合指令 (mixin) 都可以在导入的文件中使用。</p><p>Sass 在当前地址，或 Rack, Rails, Merb 的 Sass 文件地址寻找 Sass 文件，如果需要设定其他地址，可以用 <code>:load_paths</code> 选项，或者在命令行中输入 <code>--load-path</code> 命令。</p><p>通常，<code>@import</code> 寻找 Sass 文件并将其导入，但在以下情况下，<code>@import</code> 仅作为普通的 CSS 语句，不会导入任何 Sass 文件。</p><ul><li>文件拓展名是 <code>.css</code>；</li><li>文件名以 <code>http://</code> 开头；</li><li>文件名是 <code>url()</code>；</li><li><code>@import</code> 包含 media queries。</li></ul><p>如果不在上述情况内，文件的拓展名是 <code>.scss</code> 或 <code>.sass</code>，则导入成功。没有指定拓展名，Sass 将会试着寻找文件名相同，拓展名为 <code>.scss</code> 或 <code>.sass</code> 的文件并将其导入。</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">import</span> <span class="string">"foo.scss"</span>;</span><br></pre></td></tr></table></figure><p>或</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">import</span> <span class="string">"foo"</span>;</span><br></pre></td></tr></table></figure><p>都会导入文件 foo.scss，但是</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">import</span> <span class="string">"foo.css"</span>;</span><br><span class="line">@<span class="keyword">import</span> <span class="string">"foo"</span> screen;</span><br><span class="line">@<span class="keyword">import</span> <span class="string">"http://foo.com/bar"</span>;</span><br><span class="line">@<span class="keyword">import</span> url(foo);</span><br></pre></td></tr></table></figure><p>编译为</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">import</span> <span class="string">"foo.css"</span>;</span><br><span class="line">@<span class="keyword">import</span> <span class="string">"foo"</span> screen;</span><br><span class="line">@<span class="keyword">import</span> <span class="string">"http://foo.com/bar"</span>;</span><br><span class="line">@<span class="keyword">import</span> url(foo);</span><br></pre></td></tr></table></figure><p>Sass 允许同时导入多个文件，例如同时导入 rounded-corners 与 text-shadow 两个文件：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">import</span> <span class="string">"rounded-corners"</span>, <span class="string">"text-shadow"</span>;</span><br></pre></td></tr></table></figure><p>导入文件也可以使用 <code>#{ }</code> 插值语句，但不是通过变量动态导入 Sass 文件，只能作用于 CSS 的 <code>url()</code> 导入方式：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$family</span>: unquote(<span class="string">"Droid+Sans"</span>);</span><br><span class="line">@<span class="keyword">import</span> url(<span class="string">"http://fonts.googleapis.com/css?family=\#&#123;$family&#125;"</span>);</span><br></pre></td></tr></table></figure><p>编译为</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">import</span> url(<span class="string">"http://fonts.googleapis.com/css?family=Droid+Sans"</span>);</span><br></pre></td></tr></table></figure><h4 id="7-1-1-分音-Partials"><a href="#7-1-1-分音-Partials" class="headerlink" title="7.1.1. 分音 (Partials)"></a>7.1.1. 分音 (Partials)</h4><p>如果需要导入 SCSS 或者 Sass 文件，但又不希望将其编译为 CSS，只需要在文件名前添加下划线，这样会告诉 Sass 不要编译这些文件，但导入语句中却不需要添加下划线。</p><p>例如，将文件命名为 <code>_colors.scss</code>，便不会编译 <code>_colours.css</code> 文件。</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">import</span> <span class="string">"colors"</span>;</span><br></pre></td></tr></table></figure><p>上面的例子，导入的其实是 <code>_colors.scss</code> 文件</p><p>注意，不可以同时存在添加下划线与未添加下划线的同名文件，添加下划线的文件将会被忽略。</p><h4 id="7-1-2-嵌套-import"><a href="#7-1-2-嵌套-import" class="headerlink" title="7.1.2. 嵌套 @import"></a>7.1.2. 嵌套 @import</h4><p>大多数情况下，一般在文件的最外层（不在嵌套规则内）使用 <code>@import</code>，其实，也可以将 <code>@import</code> 嵌套进 CSS 样式或者 <code>@media</code> 中，与平时的用法效果相同，只是这样导入的样式只能出现在嵌套的层中。</p><p>假设 example.scss 文件包含以下样式：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.example</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后导入到 <code>#main</code> 样式内</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#main</span> &#123;</span><br><span class="line">  @<span class="keyword">import</span> <span class="string">"example"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将会被编译为</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#main</span> <span class="selector-class">.example</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Directives that are only allowed at the base level of a document,  like @mixin or @charset, are not allowed in files that are @imported in a nested context. 这一句不理解</p></blockquote><p>不可以在混合指令 (mixin) 或控制指令 (control directives) 中嵌套 <code>@import</code>。</p><h3 id="7-2-media"><a href="#7-2-media" class="headerlink" title="7.2. @media"></a>7.2. @media</h3><p>Sass 中 <code>@media</code> 指令与 CSS 中用法一样，只是增加了一点额外的功能：允许其在 CSS 规则中嵌套。如果 <code>@media</code> 嵌套在 CSS 规则内，编译时，<code>@media</code> 将被编译到文件的最外层，包含嵌套的父选择器。这个功能让 <code>@media</code> 用起来更方便，不需要重复使用选择器，也不会打乱 CSS 的书写流程。</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.sidebar</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">  @<span class="keyword">media</span> screen and (orientation: landscape) &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">500px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译为</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.sidebar</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">300px</span>; &#125;</span><br><span class="line">  @<span class="keyword">media</span> screen and (orientation: landscape) &#123;</span><br><span class="line">    <span class="selector-class">.sidebar</span> &#123;</span><br><span class="line">      <span class="attribute">width</span>: <span class="number">500px</span>; &#125; &#125;</span><br><span class="line">@<span class="keyword">media</span>` 的 queries 允许互相嵌套使用，编译时，Sass 自动添加 `and</span><br><span class="line">@media screen &#123;</span><br><span class="line">  <span class="selector-class">.sidebar</span> &#123;</span><br><span class="line">    @media (orientation: landscape) &#123;</span><br><span class="line">      <span class="selector-tag">width</span>: 500<span class="selector-tag">px</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译为</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">media</span> screen and (orientation: landscape) &#123;</span><br><span class="line">  <span class="selector-class">.sidebar</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">500px</span>; &#125; &#125;</span><br></pre></td></tr></table></figure><p><code>@media</code> 甚至可以使用 SassScript（比如变量，函数，以及运算符）代替条件的名称或者值：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$media</span>: screen;</span><br><span class="line"><span class="variable">$feature</span>: -webkit-min-device-pixel-ratio;</span><br><span class="line"><span class="variable">$value</span>: <span class="number">1.5</span>;</span><br><span class="line"></span><br><span class="line">@<span class="keyword">media</span> #&#123;<span class="variable">$media</span>&#125; and (<span class="variable">$feature</span>: <span class="variable">$value</span>) &#123;</span><br><span class="line">  .sidebar &#123;</span><br><span class="line">    width: <span class="number">500px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译为</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">media</span> screen and (-webkit-min-device-pixel-ratio: <span class="number">1.5</span>) &#123;</span><br><span class="line">  <span class="selector-class">.sidebar</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">500px</span>; &#125; &#125;</span><br></pre></td></tr></table></figure><h3 id="7-3-extend"><a href="#7-3-extend" class="headerlink" title="7.3. @extend"></a>7.3. @extend</h3><p>在设计网页的时候常常遇到这种情况：一个元素使用的样式与另一个元素完全相同，但又添加了额外的样式。通常会在 HTML 中给元素定义两个 class，一个通用样式，一个特殊样式。假设现在要设计一个普通错误样式与一个严重错误样式，一般会这样写：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class&#x3D;&quot;error seriousError&quot;&gt;</span><br><span class="line">  Oh no! You&#39;ve been hacked!</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure><p>样式如下</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.error</span> &#123;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> <span class="number">#f00</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#fdd</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.seriousError</span> &#123;</span><br><span class="line">  <span class="attribute">border-width</span>: <span class="number">3px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>麻烦的是，这样做必须时刻记住使用 <code>.seriousError</code> 时需要参考 <code>.error</code> 的样式，带来了很多不变：智能比如加重维护负担，导致 bug，或者给 HTML 添加无语意的样式。使用 <code>@extend</code> 可以避免上述情况，告诉 Sass 将一个选择器下的所有样式继承给另一个选择器。</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.error</span> &#123;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> <span class="number">#f00</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#fdd</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.seriousError</span> &#123;</span><br><span class="line">  @<span class="keyword">extend</span> .error;</span><br><span class="line">  <span class="attribute">border-width</span>: <span class="number">3px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面代码的意思是将 <code>.error</code> 下的所有样式继承给 <code>.seriousError</code>，<code>border-width: 3px;</code> 是单独给 <code>.seriousError</code> 设定特殊样式，这样，使用 <code>.seriousError</code> 的地方可以不再使用 <code>.error</code>。</p><p>其他使用到 <code>.error</code> 的样式也会同样继承给 <code>.seriousError</code>，例如，另一个样式 <code>.error.intrusion</code> 使用了 <code>hacked.png</code> 做背景，`` 也同样会使用 <code>hacked.png</code> 背景。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.error</span><span class="selector-class">.intrusion</span> &#123;</span><br><span class="line">  <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">"/image/hacked.png"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="7-3-1-How-it-Works"><a href="#7-3-1-How-it-Works" class="headerlink" title="7.3.1. How it Works"></a>7.3.1. How it Works</h4><p><code>@extend</code> 的作用是将重复使用的样式 (<code>.error</code>) 延伸 (extend) 给需要包含这个样式的特殊样式（<code>.seriousError</code>），刚刚的例子：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.error</span> &#123;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> <span class="number">#f00</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#fdd</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.error</span><span class="selector-class">.intrusion</span> &#123;</span><br><span class="line">  <span class="attribute">background-image</span>: url(<span class="string">"/image/hacked.png"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.seriousError</span> &#123;</span><br><span class="line">  @<span class="keyword">extend</span> .error;</span><br><span class="line">  <span class="attribute">border-width</span>: <span class="number">3px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译为</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.error</span>, <span class="selector-class">.seriousError</span> &#123;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> <span class="number">#f00</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#fdd</span>; &#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.error</span><span class="selector-class">.intrusion</span>, <span class="selector-class">.seriousError</span><span class="selector-class">.intrusion</span> &#123;</span><br><span class="line">  <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">"/image/hacked.png"</span>); &#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.seriousError</span> &#123;</span><br><span class="line">  <span class="attribute">border-width</span>: <span class="number">3px</span>; &#125;</span><br></pre></td></tr></table></figure><p>当合并选择器时，<code>@extend</code> 会很聪明地避免无谓的重复，<code>.seriousError.seriousError</code> 将编译为 <code>.seriousError</code>，不能匹配任何元素的选择器（比如 <code>#main#footer</code> ）也会删除。</p><h4 id="7-3-2-延伸复杂的选择器-Extending-Complex-Selectors"><a href="#7-3-2-延伸复杂的选择器-Extending-Complex-Selectors" class="headerlink" title="7.3.2. 延伸复杂的选择器 (Extending Complex Selectors)"></a>7.3.2. 延伸复杂的选择器 (Extending Complex Selectors)</h4><p>Class 选择器并不是唯一可以被延伸 (extend) 的，Sass 允许延伸任何定义给单个元素的选择器，比如 <code>.special.cool</code>，<code>a:hover</code> 或者 <code>a.user[href^=&quot;http://&quot;]</code> 等，例如：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.hoverlink</span> &#123;</span><br><span class="line">  @<span class="keyword">extend</span> a:hover;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同 class 元素一样，<code>a:hover</code> 的样式将继承给 <code>.hoverlink</code>。</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.hoverlink</span> &#123;</span><br><span class="line">  @<span class="keyword">extend</span> a:hover;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">a</span>:hover &#123;</span><br><span class="line">  <span class="attribute">text-decoration</span>: underline;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译为</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:hover</span>, <span class="selector-class">.hoverlink</span> &#123;</span><br><span class="line">  <span class="attribute">text-decoration</span>: underline; &#125;</span><br></pre></td></tr></table></figure><p>与上面 <code>.error.intrusion</code> 的例子一样，所有 <code>a:hover</code> 的样式将继承给 <code>.hoverlink</code>，包括其他使用到 <code>a:hover</code> 的样式，例如：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.hoverlink</span> &#123;</span><br><span class="line">  @<span class="keyword">extend</span> a:hover;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.comment</span> <span class="selector-tag">a</span><span class="selector-class">.user</span>:hover &#123;</span><br><span class="line">  <span class="attribute">font-weight</span>: bold;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译为</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.comment</span> <span class="selector-tag">a</span><span class="selector-class">.user</span><span class="selector-pseudo">:hover</span>, <span class="selector-class">.comment</span> <span class="selector-class">.user</span><span class="selector-class">.hoverlink</span> &#123;</span><br><span class="line">  <span class="attribute">font-weight</span>: bold; &#125;</span><br></pre></td></tr></table></figure><h4 id="7-3-3-多重延伸-Multiple-Extends"><a href="#7-3-3-多重延伸-Multiple-Extends" class="headerlink" title="7.3.3. 多重延伸 (Multiple Extends)"></a>7.3.3. 多重延伸 (Multiple Extends)</h4><p>同一个选择器可以延伸给多个选择器，它所包含的属性将继承给所有被延伸的选择器：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.error</span> &#123;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> <span class="number">#f00</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#fdd</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.attention</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">3em</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#ff0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.seriousError</span> &#123;</span><br><span class="line">  @<span class="keyword">extend</span> .error;</span><br><span class="line">  @<span class="keyword">extend</span> .attention;</span><br><span class="line">  <span class="attribute">border-width</span>: <span class="number">3px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译为</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.error</span>, <span class="selector-class">.seriousError</span> &#123;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> <span class="number">#f00</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#fdd</span>; &#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.attention</span>, <span class="selector-class">.seriousError</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">3em</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#ff0</span>; &#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.seriousError</span> &#123;</span><br><span class="line">  <span class="attribute">border-width</span>: <span class="number">3px</span>; &#125;</span><br></pre></td></tr></table></figure><p>每个 <code>.seriousError</code> 将包含 <code>.error</code> 与 <code>.attention</code> 下的所有样式，这时，后定义的样式享有优先权：<code>.seriousError</code> 的背景颜色是 <code>#ff0</code> 而不是 <code>#fdd</code>，因为 <code>.attention</code> 在 <code>.error</code> 之后定义。</p><p>多重延伸可以使用逗号分隔选择器名，比如 <code>@extend .error, .attention;</code> 与 <code>@extend .error;</code>  <code>@extend.attention</code> 有相同的效果。</p><h4 id="7-3-4-继续延伸-Chaining-Extends"><a href="#7-3-4-继续延伸-Chaining-Extends" class="headerlink" title="7.3.4. 继续延伸 (Chaining Extends)"></a>7.3.4. 继续延伸 (Chaining Extends)</h4><p>当一个选择器延伸给第二个后，可以继续将第二个选择器延伸给第三个，例如：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.error</span> &#123;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> <span class="number">#f00</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#fdd</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.seriousError</span> &#123;</span><br><span class="line">  @<span class="keyword">extend</span> .error;</span><br><span class="line">  <span class="attribute">border-width</span>: <span class="number">3px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.criticalError</span> &#123;</span><br><span class="line">  @<span class="keyword">extend</span> .seriousError;</span><br><span class="line">  <span class="attribute">position</span>: fixed;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">10%</span>;</span><br><span class="line">  <span class="attribute">bottom</span>: <span class="number">10%</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">10%</span>;</span><br><span class="line">  <span class="attribute">right</span>: <span class="number">10%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在，每个 <code>.seriousError</code> 选择器将包含 <code>.error</code> 的样式，而 <code>.criticalError</code> 不仅包含 <code>.seriousError</code> 的样式也会同时包含 <code>.error</code> 的所有样式，上面的代码编译为：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.error</span>, <span class="selector-class">.seriousError</span>, <span class="selector-class">.criticalError</span> &#123;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> <span class="number">#f00</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#fdd</span>; &#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.seriousError</span>, <span class="selector-class">.criticalError</span> &#123;</span><br><span class="line">  <span class="attribute">border-width</span>: <span class="number">3px</span>; &#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.criticalError</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: fixed;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">10%</span>;</span><br><span class="line">  <span class="attribute">bottom</span>: <span class="number">10%</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">10%</span>;</span><br><span class="line">  <span class="attribute">right</span>: <span class="number">10%</span>; &#125;</span><br></pre></td></tr></table></figure><h4 id="7-3-5-选择器列-Selector-Sequences"><a href="#7-3-5-选择器列-Selector-Sequences" class="headerlink" title="7.3.5. 选择器列 (Selector Sequences)"></a>7.3.5. 选择器列 (Selector Sequences)</h4><p>暂时不可以将选择器列 (Selector Sequences)，比如 <code>.foo .bar</code> 或 <code>.foo + .bar</code>，延伸给其他元素，但是，却可以将其他元素延伸给选择器列：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#fake-links</span> <span class="selector-class">.link</span> &#123;</span><br><span class="line">  @<span class="keyword">extend</span> a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">a</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: blue;</span><br><span class="line">  &amp;:hover &#123;</span><br><span class="line">    <span class="attribute">text-decoration</span>: underline;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译为</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">a</span>, <span class="selector-id">#fake-links</span> <span class="selector-class">.link</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: blue; &#125;</span><br><span class="line">  <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span>, <span class="selector-id">#fake-links</span> <span class="selector-class">.link</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">text-decoration</span>: underline; &#125;</span><br></pre></td></tr></table></figure><h5 id="7-3-5-1-合并选择器列-Merging-Selector-Sequences"><a href="#7-3-5-1-合并选择器列-Merging-Selector-Sequences" class="headerlink" title="7.3.5.1. 合并选择器列 (Merging Selector Sequences)"></a>7.3.5.1. 合并选择器列 (Merging Selector Sequences)</h5><p>有时会遇到复杂的情况，比如选择器列中的某个元素需要延伸给另一个选择器列，这种情况下，两个选择器列需要合并，比如：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#admin</span> <span class="selector-class">.tabbar</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">  <span class="attribute">font-weight</span>: bold;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#demo</span> <span class="selector-class">.overview</span> <span class="selector-class">.fakelink</span> &#123;</span><br><span class="line">  @<span class="keyword">extend</span> a;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>技术上讲能够生成所有匹配条件的结果，但是这样生成的样式表太复杂了，上面这个简单的例子就可能有 10 种结果。所以，Sass 只会编译输出有用的选择器。</p><p>当两个列 (sequence) 合并时，如果没有包含相同的选择器，将生成两个新选择器：第一列出现在第二列之前，或者第二列出现在第一列之前：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#admin</span> <span class="selector-class">.tabbar</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">  <span class="attribute">font-weight</span>: bold;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#demo</span> <span class="selector-class">.overview</span> <span class="selector-class">.fakelink</span> &#123;</span><br><span class="line">  @<span class="keyword">extend</span> a;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译为</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#admin</span> <span class="selector-class">.tabbar</span> <span class="selector-tag">a</span>,</span><br><span class="line"><span class="selector-id">#admin</span> <span class="selector-class">.tabbar</span> <span class="selector-id">#demo</span> <span class="selector-class">.overview</span> <span class="selector-class">.fakelink</span>,</span><br><span class="line"><span class="selector-id">#demo</span> <span class="selector-class">.overview</span> <span class="selector-id">#admin</span> <span class="selector-class">.tabbar</span> <span class="selector-class">.fakelink</span> &#123;</span><br><span class="line">  <span class="attribute">font-weight</span>: bold; &#125;</span><br></pre></td></tr></table></figure><p>如果两个列 (sequence) 包含了相同的选择器，相同部分将会合并在一起，其他部分交替输出。在下面的例子里，两个列都包含 <code>#admin</code>，输出结果中它们合并在了一起：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#admin</span> <span class="selector-class">.tabbar</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">  <span class="attribute">font-weight</span>: bold;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#admin</span> <span class="selector-class">.overview</span> <span class="selector-class">.fakelink</span> &#123;</span><br><span class="line">  @<span class="keyword">extend</span> a;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译为</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#admin</span> <span class="selector-class">.tabbar</span> <span class="selector-tag">a</span>,</span><br><span class="line"><span class="selector-id">#admin</span> <span class="selector-class">.tabbar</span> <span class="selector-class">.overview</span> <span class="selector-class">.fakelink</span>,</span><br><span class="line"><span class="selector-id">#admin</span> <span class="selector-class">.overview</span> <span class="selector-class">.tabbar</span> <span class="selector-class">.fakelink</span> &#123;</span><br><span class="line">  <span class="attribute">font-weight</span>: bold; &#125;</span><br></pre></td></tr></table></figure><h4 id="7-3-6-extend-Only-选择器-extend-Only-Selectors"><a href="#7-3-6-extend-Only-选择器-extend-Only-Selectors" class="headerlink" title="7.3.6. @extend-Only 选择器 (@extend-Only Selectors)"></a>7.3.6. @extend-Only 选择器 (@extend-Only Selectors)</h4><p>有时，需要定义一套样式并不是给某个元素用，而是只通过 <code>@extend</code> 指令使用，尤其是在制作 Sass 样式库的时候，希望 Sass 能够忽略用不到的样式。</p><p>如果使用普通的 CSS 规则，最后会编译出很多用不到的样式，也容易与其他样式名冲突，所以，Sass 引入了“占位符选择器” (placeholder selectors)，看起来很像普通的 <code>id</code> 或 <code>class</code> 选择器，只是 <code>#</code> 或 <code>.</code> 被替换成了 <code>%</code>。可以像 class 或者 id 选择器那样使用，当它们单独使用时，不会被编译到 CSS 文件中。</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// This ruleset won't be rendered on its own.</span></span><br><span class="line"><span class="selector-id">#context</span> <span class="selector-tag">a</span>%extreme &#123;</span><br><span class="line">  <span class="attribute">color</span>: blue;</span><br><span class="line">  <span class="attribute">font-weight</span>: bold;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">2em</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>占位符选择器需要通过延伸指令使用，用法与 class 或者 id 选择器一样，被延伸后，占位符选择器本身不会被编译。</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.notice</span> &#123;</span><br><span class="line">  @<span class="keyword">extend</span> %extreme;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译为</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#context</span> <span class="selector-tag">a</span><span class="selector-class">.notice</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: blue;</span><br><span class="line">  <span class="attribute">font-weight</span>: bold;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">2em</span>; &#125;</span><br></pre></td></tr></table></figure><h4 id="7-3-7-optional-声明-The-optional-Flag"><a href="#7-3-7-optional-声明-The-optional-Flag" class="headerlink" title="7.3.7. !optional 声明 (The !optional Flag)"></a>7.3.7. <code>!optional</code> 声明 (The <code>!optional</code> Flag)</h4><p>如果 <code>@extend</code> 失败会收到错误提示，比如，这样写 <code>a.important {@extend .notice}</code>，当没有 <code>.notice</code> 选择器时，将会报错，只有 <code>h1.notice</code> 包含 <code>.notice</code> 时也会报错，因为 <code>h1</code> 与 <code>a</code> 冲突，会生成新的选择器。</p><p>如果要求 <code>@extend</code> 不生成新选择器，可以通过 <code>!optional</code> 声明达到这个目的，例如：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">a</span><span class="selector-class">.important</span> &#123;</span><br><span class="line">  @<span class="keyword">extend</span> .notice !optional;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="7-3-8-在指令中延伸-extend-in-Directives"><a href="#7-3-8-在指令中延伸-extend-in-Directives" class="headerlink" title="7.3.8. 在指令中延伸 (@extend in Directives)"></a>7.3.8. 在指令中延伸 (@extend in Directives)</h4><p>在指令中使用 <code>@extend</code> 时（比如在 <code>@media</code> 中）有一些限制：Sass 不可以将 <code>@media</code> 层外的 CSS 规则延伸给指令层内的 CSS，这样会生成大量的无用代码。也就是说，如果在 <code>@media</code> （或者其他 CSS 指令）中使用 <code>@extend</code>，必须延伸给相同指令层中的选择器。</p><p>下面的例子是可行的：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">media</span> print &#123;</span><br><span class="line">  <span class="selector-class">.error</span> &#123;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> <span class="number">#f00</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#fdd</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.seriousError</span> &#123;</span><br><span class="line">    @<span class="keyword">extend</span> .error;</span><br><span class="line">    <span class="attribute">border-width</span>: <span class="number">3px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但不可以这样：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.error</span> &#123;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> <span class="number">#f00</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#fdd</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@<span class="keyword">media</span> print &#123;</span><br><span class="line">  <span class="selector-class">.seriousError</span> &#123;</span><br><span class="line">    <span class="comment">// INVALID EXTEND: .error is used outside of the "@media print" directive</span></span><br><span class="line">    @<span class="keyword">extend</span> .error;</span><br><span class="line">    <span class="attribute">border-width</span>: <span class="number">3px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>希望有一天，浏览器可以原生支持 <code>@extend</code> 指令，这样就可以在任何指令中使用延伸功能，不再受限制了。</p><h3 id="7-4-at-root"><a href="#7-4-at-root" class="headerlink" title="7.4. @at-root"></a>7.4. @at-root</h3><p>The @at-root directive causes one or more rules to be emitted at the  root of the document, rather than being nested beneath their parent  selectors. It can either be used with a single inline selector:</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.parent</span> &#123;</span><br><span class="line">  ...</span><br><span class="line">  @at-root .child &#123; ... &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Which would produce:</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">.parent &#123; ... &#125;</span><br><span class="line">.child &#123; ... &#125;</span><br></pre></td></tr></table></figure><p>Or it can be used with a block containing multiple selectors:</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.parent</span> &#123;</span><br><span class="line">  ...</span><br><span class="line">  @at-root &#123;</span><br><span class="line">    <span class="selector-class">.child1</span> &#123; ... &#125;</span><br><span class="line">    <span class="selector-class">.child2</span> &#123; ... &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.step-child</span> &#123; ... &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Which would output the following:</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">.parent &#123; ... &#125;</span><br><span class="line">.child1 &#123; ... &#125;</span><br><span class="line">.child2 &#123; ... &#125;</span><br><span class="line">.parent .step-child &#123; ... &#125;</span><br></pre></td></tr></table></figure><h4 id="7-4-1-at-root-without-…-and-at-root-with-…"><a href="#7-4-1-at-root-without-…-and-at-root-with-…" class="headerlink" title="7.4.1. @at-root (without: …) and @at-root (with: …)"></a>7.4.1. @at-root (without: …) and @at-root (with: …)</h4><p>By default, @at-root just excludes selectors. However, it’s also  possible to use @at-root to move outside of nested directives such as  @media as well. For example:</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">media</span> print &#123;</span><br><span class="line">  <span class="selector-class">.page</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">8in</span>;</span><br><span class="line">    @at-root (without: media) &#123;</span><br><span class="line">      <span class="attribute">color</span>: red;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>produces:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">media</span> print &#123;</span><br><span class="line">  <span class="selector-class">.page</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">8in</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.page</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>You can use @at-root (without: …) to move outside of any directive. You can also do it with multiple directives separated by a space:  @at-root (without: media supports) moves outside of both @media and  @supports queries.</p><p>There are two special values you can pass to @at-root. “rule” refers  to normal CSS rules; @at-root (without: rule) is the same as @at-root  with no query. @at-root (without: all) means that the styles should be  moved outside of all directives and CSS rules.</p><p>If you want to specify which directives or rules to include, rather  than listing which ones should be excluded, you can use with instead of  without. For example, @at-root (with: rule) will move outside of all  directives, but will preserve any CSS rules.</p><h3 id="7-5-debug"><a href="#7-5-debug" class="headerlink" title="7.5. @debug"></a>7.5. @debug</h3><p>The @debug directive prints the value of a SassScript expression to  the standard error output stream. It’s useful for debugging Sass files  that have complicated SassScript going on. For example:</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">debug</span> 10em + 12em;</span><br></pre></td></tr></table></figure><p>编译为 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Line 1 DEBUG: 22em</span><br></pre></td></tr></table></figure><h3 id="7-6-warn"><a href="#7-6-warn" class="headerlink" title="7.6. @warn"></a>7.6. @warn</h3><p>The @warn directive prints the value of a SassScript expression to  the standard error output stream. It’s useful for libraries that need to warn users of deprecations or recovering from minor mixin usage  mistakes. There are two major distinctions between @warn and @debug:</p><ol><li>You can turn warnings off with the –quiet command-line option or the :quiet Sass option.</li><li>A stylesheet trace will be printed out along with the message so  that the user being warned can see where their styles caused the  warning.</li></ol><p>Usage Example:</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">mixin</span> adjust-location(<span class="variable">$x</span>, <span class="variable">$y</span>) &#123;</span><br><span class="line">  @<span class="keyword">if</span> unitless(<span class="variable">$x</span>) &#123;</span><br><span class="line">    @<span class="keyword">warn</span> <span class="string">"Assuming #&#123;$x&#125; to be in pixels"</span>;</span><br><span class="line">    <span class="variable">$x</span>: <span class="number">1px</span> * <span class="variable">$x</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  @<span class="keyword">if</span> unitless(<span class="variable">$y</span>) &#123;</span><br><span class="line">    @<span class="keyword">warn</span> <span class="string">"Assuming #&#123;$y&#125; to be in pixels"</span>;</span><br><span class="line">    <span class="variable">$y</span>: <span class="number">1px</span> * <span class="variable">$y</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="attribute">position</span>: relative; <span class="attribute">left</span>: <span class="variable">$x</span>; <span class="attribute">top</span>: <span class="variable">$y</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-7-warn"><a href="#7-7-warn" class="headerlink" title="7.7. @warn"></a>7.7. @warn</h3><p>The @error directive throws the value of a SassScript expression as a fatal error, including a nice stack trace. It’s useful for validating  arguments to mixins and functions. For example:</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">mixin</span> adjust-location(<span class="variable">$x</span>, <span class="variable">$y</span>) &#123;</span><br><span class="line">  @<span class="keyword">if</span> unitless(<span class="variable">$x</span>) &#123;</span><br><span class="line">    @error <span class="string">"$x may not be unitless, was #&#123;$x&#125;."</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  @<span class="keyword">if</span> unitless(<span class="variable">$y</span>) &#123;</span><br><span class="line">    @error <span class="string">"$y may not be unitless, was #&#123;$y&#125;."</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="attribute">position</span>: relative; <span class="attribute">left</span>: <span class="variable">$x</span>; <span class="attribute">top</span>: <span class="variable">$y</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>There is currently no way to catch errors.</p><h2 id="8-控制指令-Control-Directives"><a href="#8-控制指令-Control-Directives" class="headerlink" title="8. 控制指令 (Control Directives)"></a>8. 控制指令 (Control Directives)</h2><p>SassScript 提供了一些基础的控制指令，比如在满足一定条件时引用样式，或者设定范围重复输出格式。控制指令是一种高级功能，日常编写过程中并不常用到，主要与混合指令 (mixin) 配合使用，尤其是用在 <a href="http://compass-style.org/" target="_blank" rel="noopener">Compass</a> 等样式库中。</p><h3 id="8-1-if"><a href="#8-1-if" class="headerlink" title="8.1. if()"></a>8.1. if()</h3><p>The built-in if() function allows you to branch on a condition and  returns only one of two possible outcomes. It can be used in any script  context. The if function only evaluates the argument corresponding to  the one that it will return – this allows you to refer to variables that may not be defined or to have calculations that would otherwise cause  an error (E.g. divide by zero).</p><h3 id="8-2-if"><a href="#8-2-if" class="headerlink" title="8.2. @if"></a>8.2. @if</h3><p>当 <code>@if</code> 的表达式返回值不是 <code>false</code> 或者 <code>null</code> 时，条件成立，输出 <code>{}</code> 内的代码：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  @<span class="keyword">if</span> 1 + 1 == 2 &#123; <span class="attribute">border</span>: <span class="number">1px</span> solid; &#125;</span><br><span class="line">  @<span class="keyword">if</span> 5 &lt; 3 &#123; <span class="attribute">border</span>: <span class="number">2px</span> dotted; &#125;</span><br><span class="line">  @<span class="keyword">if</span> null  &#123; <span class="attribute">border</span>: <span class="number">3px</span> double; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译为</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid; &#125;</span><br></pre></td></tr></table></figure><p><code>@if</code> 声明后面可以跟多个 <code>@else if</code> 声明，或者一个 <code>@else</code> 声明。如果 <code>@if</code> 声明失败，Sass 将逐条执行 <code>@else if</code> 声明，如果全部失败，最后执行 <code>@else</code> 声明，例如：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$type</span>: monster;</span><br><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  @<span class="keyword">if</span> <span class="variable">$type</span> == ocean &#123;</span><br><span class="line">    <span class="attribute">color</span>: blue;</span><br><span class="line">  &#125; @<span class="keyword">else</span> if <span class="variable">$type</span> == matador &#123;</span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">  &#125; @<span class="keyword">else</span> if <span class="variable">$type</span> == monster &#123;</span><br><span class="line">    <span class="attribute">color</span>: green;</span><br><span class="line">  &#125; @<span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: black;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译为</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: green; &#125;</span><br></pre></td></tr></table></figure><h3 id="8-3-for"><a href="#8-3-for" class="headerlink" title="8.3. @for"></a>8.3. @for</h3><p><code>@for</code> 指令可以在限制的范围内重复输出格式，每次按要求（变量的值）对输出结果做出变动。这个指令包含两种格式：<code>@for $var from  through</code>，或者 <code>@for $var from  to</code>，区别在于 <code>through</code> 与 <code>to</code> 的含义：<em>当使用 <code>through</code> 时，条件范围包含 <code>与</code> 的值，而使用 <code>to</code> 时条件范围只包含 <code>的值不包含</code> 的值</em>。另外，<code>$var</code> 可以是任何变量，比如 <code>$i</code>；<code>和</code> 必须是整数值。</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">for</span> <span class="variable">$i</span> from 1 through 3 &#123;</span><br><span class="line">  <span class="selector-class">.item-</span>#&#123;<span class="variable">$i</span>&#125; &#123; <span class="attribute">width</span>: <span class="number">2em</span> * <span class="variable">$i</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译为</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item-1</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">2em</span>; &#125;</span><br><span class="line"><span class="selector-class">.item-2</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">4em</span>; &#125;</span><br><span class="line"><span class="selector-class">.item-3</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">6em</span>; &#125;</span><br></pre></td></tr></table></figure><h3 id="8-4-each"><a href="#8-4-each" class="headerlink" title="8.4. @each"></a>8.4. @each</h3><p><code>@each</code> 指令的格式是 <code>$var in</code>, <code>$var</code> 可以是任何变量名，比如 <code>$length</code> 或者 <code>$name</code>，而 `` 是一连串的值，也就是值列表。</p><p><code>@each</code> 将变量 <code>$var</code> 作用于值列表中的每一个项目，然后输出结果，例如：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">each</span> <span class="variable">$animal</span> in puma, sea-slug, egret, salamander &#123;</span><br><span class="line">  .#&#123;<span class="variable">$animal</span>&#125;-<span class="attribute">icon</span> &#123;</span><br><span class="line">    <span class="attribute">background-image</span>: url(<span class="string">'/images/#&#123;$animal&#125;.png'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译为</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.puma-icon</span> &#123;</span><br><span class="line">  <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">'/images/puma.png'</span>); &#125;</span><br><span class="line"><span class="selector-class">.sea-slug-icon</span> &#123;</span><br><span class="line">  <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">'/images/sea-slug.png'</span>); &#125;</span><br><span class="line"><span class="selector-class">.egret-icon</span> &#123;</span><br><span class="line">  <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">'/images/egret.png'</span>); &#125;</span><br><span class="line"><span class="selector-class">.salamander-icon</span> &#123;</span><br><span class="line">  <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">'/images/salamander.png'</span>); &#125;</span><br></pre></td></tr></table></figure><h4 id="8-4-1-Multiple-Assignment"><a href="#8-4-1-Multiple-Assignment" class="headerlink" title="8.4.1 Multiple Assignment"></a>8.4.1 Multiple Assignment</h4><p>The @each directive can also use multiple variables, as in @each $var1, $var2, … in . If  is a list of lists, each element of the sub-lists is assigned to the respective variable. For example:</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">each</span> <span class="variable">$animal</span>, <span class="variable">$color</span>, <span class="variable">$cursor</span> in (puma, black, default),</span><br><span class="line">                                  (sea-slug, blue, pointer),</span><br><span class="line">                                  (egret, white, move) &#123;</span><br><span class="line">  .#&#123;<span class="variable">$animal</span>&#125;-<span class="attribute">icon</span> &#123;</span><br><span class="line">    <span class="attribute">background-image</span>: url(<span class="string">'/images/#&#123;$animal&#125;.png'</span>);</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">2px</span> solid <span class="variable">$color</span>;</span><br><span class="line">    <span class="attribute">cursor</span>: <span class="variable">$cursor</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>is compiled to:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.puma-icon</span> &#123;</span><br><span class="line">  <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">'/images/puma.png'</span>);</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">2px</span> solid black;</span><br><span class="line">  <span class="attribute">cursor</span>: default; &#125;</span><br><span class="line"><span class="selector-class">.sea-slug-icon</span> &#123;</span><br><span class="line">  <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">'/images/sea-slug.png'</span>);</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">2px</span> solid blue;</span><br><span class="line">  <span class="attribute">cursor</span>: pointer; &#125;</span><br><span class="line"><span class="selector-class">.egret-icon</span> &#123;</span><br><span class="line">  <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">'/images/egret.png'</span>);</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">2px</span> solid white;</span><br><span class="line">  <span class="attribute">cursor</span>: move; &#125;</span><br></pre></td></tr></table></figure><p>Since maps are treated as lists of pairs, multiple assignment works with them as well. For example:</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">each</span> <span class="variable">$header</span>, <span class="variable">$size</span> in (h1: 2em, h2: 1.5em, h3: 1.2em) &#123;</span><br><span class="line">  #&#123;<span class="variable">$header</span>&#125; &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="variable">$size</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>is compiled to:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">h1</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">2em</span>; &#125;</span><br><span class="line"><span class="selector-tag">h2</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">1.5em</span>; &#125;</span><br><span class="line"><span class="selector-tag">h3</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">1.2em</span>; &#125;</span><br></pre></td></tr></table></figure><h3 id="8-5-while"><a href="#8-5-while" class="headerlink" title="8.5. @while"></a>8.5. @while</h3><p><code>@while</code> 指令重复输出格式直到表达式返回结果为 <code>false</code>。这样可以实现比 <code>@for</code> 更复杂的循环，只是很少会用到。例如：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$i</span>: <span class="number">6</span>;</span><br><span class="line">@<span class="keyword">while</span> <span class="variable">$i</span> &gt; 0 &#123;</span><br><span class="line">  <span class="selector-class">.item-</span>#&#123;<span class="variable">$i</span>&#125; &#123; <span class="attribute">width</span>: <span class="number">2em</span> * <span class="variable">$i</span>; &#125;</span><br><span class="line">  <span class="variable">$i</span>: <span class="variable">$i</span> - <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.item-6</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">12em</span>; &#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.item-4</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">8em</span>; &#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.item-2</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">4em</span>; &#125;</span><br></pre></td></tr></table></figure><h2 id="9-混合指令-Mixin-Directives"><a href="#9-混合指令-Mixin-Directives" class="headerlink" title="9. 混合指令 (Mixin Directives)"></a>9. 混合指令 (Mixin Directives)</h2><p>混合指令（Mixin）用于定义可重复使用的样式，避免了使用无语意的 class，比如 <code>.float-left</code>。混合指令可以包含所有的 CSS 规则，绝大部分 Sass 规则，甚至通过参数功能引入变量，输出多样化的样式。</p><h3 id="9-1-定义混合指令-mixin-Defining-a-Mixin-mixin"><a href="#9-1-定义混合指令-mixin-Defining-a-Mixin-mixin" class="headerlink" title="9.1. 定义混合指令 @mixin (Defining a Mixin: @mixin)"></a>9.1. 定义混合指令 <code>@mixin</code> (Defining a Mixin: <code>@mixin</code>)</h3><p>混合指令的用法是在 <code>@mixin</code> 后添加名称与样式，比如名为 <code>large-text</code> 的混合通过下面的代码定义：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">mixin</span> large-text &#123;</span><br><span class="line">  <span class="attribute">font</span>: &#123;</span><br><span class="line">    family: Arial;</span><br><span class="line">    size: <span class="number">20px</span>;</span><br><span class="line">    weight: bold;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#ff0000</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>混合也需要包含选择器和属性，甚至可以用 <code>&amp;</code> 引用父选择器：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">mixin</span> clearfix &#123;</span><br><span class="line">  <span class="attribute">display</span>: inline-block;</span><br><span class="line">  &amp;:after &#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">"."</span>;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">clear</span>: both;</span><br><span class="line">    <span class="attribute">visibility</span>: hidden;</span><br><span class="line">  &#125;</span><br><span class="line">  * <span class="selector-tag">html</span> &amp; &#123; <span class="attribute">height</span>: <span class="number">1px</span> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="9-2-引用混合样式-include-Including-a-Mixin-include"><a href="#9-2-引用混合样式-include-Including-a-Mixin-include" class="headerlink" title="9.2. 引用混合样式 @include (Including a Mixin: @include)"></a>9.2. 引用混合样式 <code>@include</code> (Including a Mixin: <code>@include</code>)</h3><p>使用 <code>@include</code> 指令引用混合样式，格式是在其后添加混合名称，以及需要的参数（可选）：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.page-title</span> &#123;</span><br><span class="line">  @<span class="keyword">include</span> large-text;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">4px</span>;</span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译为</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.page-title</span> &#123;</span><br><span class="line">  <span class="attribute">font-family</span>: Arial;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">font-weight</span>: bold;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#ff0000</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">4px</span>;</span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="number">10px</span>; &#125;</span><br></pre></td></tr></table></figure><p>也可以在最外层引用混合样式，不会直接定义属性，也不可以使用父选择器。</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">mixin</span> silly-links &#123;</span><br><span class="line">  <span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: blue;</span><br><span class="line">    <span class="attribute">background-color</span>: red;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">@<span class="keyword">include</span> silly-links;</span><br></pre></td></tr></table></figure><p>编译为</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">a</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: blue;</span><br><span class="line">  <span class="attribute">background-color</span>: red; &#125;</span><br></pre></td></tr></table></figure><p>混合样式中也可以包含其他混合样式，比如</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">mixin</span> compound &#123;</span><br><span class="line">  @<span class="keyword">include</span> highlighted-background;</span><br><span class="line">  @<span class="keyword">include</span> header-text;</span><br><span class="line">&#125;</span><br><span class="line">@<span class="keyword">mixin</span> highlighted-background &#123; <span class="attribute">background-color</span>: <span class="number">#fc0</span>; &#125;</span><br><span class="line">@<span class="keyword">mixin</span> header-text &#123; <span class="attribute">font-size</span>: <span class="number">20px</span>; &#125;</span><br></pre></td></tr></table></figure><p>混合样式中应该只定义后代选择器，这样可以安全的导入到文件的任何位置。</p><h3 id="9-3-参数-Arguments"><a href="#9-3-参数-Arguments" class="headerlink" title="9.3. 参数 (Arguments)"></a>9.3. 参数 (Arguments)</h3><p>参数用于给混合指令中的样式设定变量，并且赋值使用。在定义混合指令的时候，按照变量的格式，通过逗号分隔，将参数写进圆括号里。引用指令时，按照参数的顺序，再将所赋的值对应写进括号：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">mixin</span> sexy-border(<span class="variable">$color</span>, <span class="variable">$width</span>) &#123;</span><br><span class="line">  <span class="attribute">border</span>: &#123;</span><br><span class="line">    color: <span class="variable">$color</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="variable">$width</span>;</span><br><span class="line">    <span class="selector-tag">style</span>: dashed;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">p</span> &#123; @<span class="keyword">include</span> sexy-border(blue, 1in); &#125;</span><br></pre></td></tr></table></figure><p>编译为</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">border-color</span>: blue;</span><br><span class="line">  <span class="attribute">border-width</span>: <span class="number">1in</span>;</span><br><span class="line">  <span class="attribute">border-style</span>: dashed; &#125;</span><br></pre></td></tr></table></figure><p>混合指令也可以使用给变量赋值的方法给参数设定默认值，然后，当这个指令被引用的时候，如果没有给参数赋值，则自动使用默认值：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">mixin</span> sexy-border(<span class="variable">$color</span>, <span class="variable">$width</span>: 1in) &#123;</span><br><span class="line">  <span class="attribute">border</span>: &#123;</span><br><span class="line">    color: <span class="variable">$color</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="variable">$width</span>;</span><br><span class="line">    <span class="selector-tag">style</span>: dashed;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">p</span> &#123; @<span class="keyword">include</span> sexy-border(blue); &#125;</span><br><span class="line"><span class="selector-tag">h1</span> &#123; @<span class="keyword">include</span> sexy-border(blue, 2in); &#125;</span><br></pre></td></tr></table></figure><p>编译为</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">border-color</span>: blue;</span><br><span class="line">  <span class="attribute">border-width</span>: <span class="number">1in</span>;</span><br><span class="line">  <span class="attribute">border-style</span>: dashed; &#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">h1</span> &#123;</span><br><span class="line">  <span class="attribute">border-color</span>: blue;</span><br><span class="line">  <span class="attribute">border-width</span>: <span class="number">2in</span>;</span><br><span class="line">  <span class="attribute">border-style</span>: dashed; &#125;</span><br></pre></td></tr></table></figure><h4 id="9-3-1-关键词参数-Keyword-Arguments"><a href="#9-3-1-关键词参数-Keyword-Arguments" class="headerlink" title="9.3.1. 关键词参数 (Keyword Arguments)"></a>9.3.1. 关键词参数 (Keyword Arguments)</h4><p>混合指令也可以使用关键词参数，上面的例子也可以写成：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123; @<span class="keyword">include</span> sexy-border(<span class="variable">$color</span>: blue); &#125;</span><br><span class="line"><span class="selector-tag">h1</span> &#123; @<span class="keyword">include</span> sexy-border(<span class="variable">$color</span>: blue, <span class="variable">$width</span>: 2in); &#125;</span><br></pre></td></tr></table></figure><p>虽然不够简明，但是阅读起来会更方便。关键词参数给函数提供了更灵活的接口，以及容易调用的参数。关键词参数可以打乱顺序使用，如果使用默认值也可以省缺，另外，参数名被视为变量名，下划线、短横线可以互换使用。</p><h4 id="9-3-2-参数变量-Variable-Arguments"><a href="#9-3-2-参数变量-Variable-Arguments" class="headerlink" title="9.3.2. 参数变量 (Variable Arguments)"></a>9.3.2. 参数变量 (Variable Arguments)</h4><p>有时，不能确定混合指令需要使用多少个参数，比如一个关于 <code>box-shadow</code> 的混合指令不能确定有多少个 ‘shadow’ 会被用到。这时，可以使用参数变量 <code>…</code> 声明（写在参数的最后方）告诉 Sass 将这些参数视为值列表处理：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">mixin</span> box-shadow(<span class="variable">$shadows</span>...) &#123;</span><br><span class="line">  -moz-<span class="attribute">box-shadow</span>: <span class="variable">$shadows</span>;</span><br><span class="line">  -webkit-<span class="attribute">box-shadow</span>: <span class="variable">$shadows</span>;</span><br><span class="line">  <span class="attribute">box-shadow</span>: <span class="variable">$shadows</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.shadows</span> &#123;</span><br><span class="line">  @<span class="keyword">include</span> box-shadow(<span class="number">0px</span> 4px 5px <span class="number">#666</span>, 2px 6px 10px <span class="number">#999</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译为</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.shadowed</span> &#123;</span><br><span class="line">  <span class="attribute">-moz-box-shadow</span>: <span class="number">0px</span> <span class="number">4px</span> <span class="number">5px</span> <span class="number">#666</span>, <span class="number">2px</span> <span class="number">6px</span> <span class="number">10px</span> <span class="number">#999</span>;</span><br><span class="line">  <span class="attribute">-webkit-box-shadow</span>: <span class="number">0px</span> <span class="number">4px</span> <span class="number">5px</span> <span class="number">#666</span>, <span class="number">2px</span> <span class="number">6px</span> <span class="number">10px</span> <span class="number">#999</span>;</span><br><span class="line">  <span class="attribute">box-shadow</span>: <span class="number">0px</span> <span class="number">4px</span> <span class="number">5px</span> <span class="number">#666</span>, <span class="number">2px</span> <span class="number">6px</span> <span class="number">10px</span> <span class="number">#999</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>参数变量也可以用在引用混合指令的时候 (<code>@include</code>)，与平时用法一样，将一串值列表中的值逐条作为参数引用：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">mixin</span> colors(<span class="variable">$text</span>, <span class="variable">$background</span>, <span class="variable">$border</span>) &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="variable">$text</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="variable">$background</span>;</span><br><span class="line">  <span class="attribute">border-color</span>: <span class="variable">$border</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$values</span>: <span class="number">#ff0000</span>, <span class="number">#00ff00</span>, <span class="number">#0000ff</span>;</span><br><span class="line"><span class="selector-class">.primary</span> &#123;</span><br><span class="line">  @<span class="keyword">include</span> colors(<span class="variable">$values</span>...);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译为</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.primary</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#ff0000</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#00ff00</span>;</span><br><span class="line">  <span class="attribute">border-color</span>: <span class="number">#0000ff</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>You can use variable arguments to wrap a mixin and add additional  styles without changing the argument signature of the mixin. If you do  so, even keyword arguments will get passed through to the wrapped mixin. For example:</p></blockquote><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">mixin</span> wrapped-stylish-mixin(<span class="variable">$args</span>...) &#123;</span><br><span class="line">  <span class="attribute">font-weight</span>: bold;</span><br><span class="line">  @<span class="keyword">include</span> stylish-mixin(<span class="variable">$args</span>...);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.stylish</span> &#123;</span><br><span class="line">  <span class="comment">// The $width argument will get passed on to "stylish-mixin" as a keyword</span></span><br><span class="line">  @<span class="keyword">include</span> wrapped-stylish-mixin(<span class="number">#00ff00</span>, <span class="variable">$width</span>: 100px);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面注释内的意思是：<code>$width</code> 参数将会传递给 <code>stylish-mixin</code> 作为关键词。</p><h3 id="9-4-向混合样式中导入内容-Passing-Content-Blocks-to-a-Mixin"><a href="#9-4-向混合样式中导入内容-Passing-Content-Blocks-to-a-Mixin" class="headerlink" title="9.4. 向混合样式中导入内容 (Passing Content Blocks to a Mixin)"></a>9.4. 向混合样式中导入内容 (Passing Content Blocks to a Mixin)</h3><p>在引用混合样式的时候，可以先将一段代码导入到混合指令中，然后再输出混合样式，额外导入的部分将出现在 <code>@content</code> 标志的地方：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">mixin</span> apply-to-ie6-only &#123;</span><br><span class="line">  * <span class="selector-tag">html</span> &#123;</span><br><span class="line">    @<span class="keyword">content</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">@<span class="keyword">include</span> apply-to-ie6-only &#123;</span><br><span class="line">  <span class="selector-id">#logo</span> &#123;</span><br><span class="line">    <span class="attribute">background-image</span>: url(/logo.gif);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译为</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">* <span class="selector-tag">html</span> <span class="selector-id">#logo</span> &#123;</span><br><span class="line">  <span class="attribute">background-image</span>: <span class="built_in">url</span>(/logo.gif);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>为便于书写，<code>@mixin</code> 可以用 <code>=</code> 表示，而 <code>@include</code> 可以用 <code>+</code> 表示</strong>，所以上面的例子可以写成：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#x3D;apply-to-ie6-only</span><br><span class="line">  * html</span><br><span class="line">    @content</span><br><span class="line"></span><br><span class="line">+apply-to-ie6-only</span><br><span class="line">  #logo</span><br><span class="line">    background-image: url(&#x2F;logo.gif)</span><br></pre></td></tr></table></figure><p><strong>注意：</strong> 当 <code>@content</code> 在指令中出现过多次或者出现在循环中时，额外的代码将被导入到每一个地方。</p><h4 id="9-4-1-Variable-Scope-and-Content-Blocks"><a href="#9-4-1-Variable-Scope-and-Content-Blocks" class="headerlink" title="9.4.1. Variable Scope and Content Blocks"></a>9.4.1. Variable Scope and Content Blocks</h4><blockquote><p>The block of content passed to a mixin are evaluated in the scope  where the block is defined, not in the scope of the mixin. This means  that variables local to the mixin cannot be used within the passed style block and variables will resolve to the global value:</p></blockquote><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$color</span>: white;</span><br><span class="line">@<span class="keyword">mixin</span> colors(<span class="variable">$color</span>: blue) &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="variable">$color</span>;</span><br><span class="line">  @<span class="keyword">content</span>;</span><br><span class="line">  <span class="attribute">border-color</span>: <span class="variable">$color</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.colors</span> &#123;</span><br><span class="line">  @<span class="keyword">include</span> colors &#123; <span class="attribute">color</span>: <span class="variable">$color</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译为</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.colors</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: blue;</span><br><span class="line">  <span class="attribute">color</span>: white;</span><br><span class="line">  <span class="attribute">border-color</span>: blue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Additionally, this makes it clear that the variables and mixins that  are used within the passed block are related to the other styles around  where the block is defined. For example:</p></blockquote><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#sidebar</span> &#123;</span><br><span class="line">  <span class="variable">$sidebar-width</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="variable">$sidebar-width</span>;</span><br><span class="line">  @<span class="keyword">include</span> smartphone &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="variable">$sidebar-width</span> / <span class="number">3</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="10-函数指令-Function-Directives"><a href="#10-函数指令-Function-Directives" class="headerlink" title="10. 函数指令 (Function Directives)"></a>10. 函数指令 (Function Directives)</h2><p>Sass 支持自定义函数，并能在任何属性值或 Sass script 中使用：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$grid-width</span>: <span class="number">40px</span>;</span><br><span class="line"><span class="variable">$gutter-width</span>: <span class="number">10px</span>;</span><br><span class="line"></span><br><span class="line">@function grid-width(<span class="variable">$n</span>) &#123;</span><br><span class="line">  @return <span class="variable">$n</span> * <span class="variable">$grid-width</span> + (<span class="variable">$n</span> - 1) * <span class="variable">$gutter-width</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#sidebar</span> &#123; <span class="attribute">width</span>: grid-width(<span class="number">5</span>); &#125;</span><br></pre></td></tr></table></figure><p>编译为</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#sidebar</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">240px</span>; &#125;</span><br></pre></td></tr></table></figure><p>与 mixin 相同，也可以传递若干个全局变量给函数作为参数。一个函数可以含有多条语句，需要调用 <code>@return</code> 输出结果。</p><p>自定义的函数也可以使用关键词参数，上面的例子还可以这样写：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#sidebar</span> &#123; <span class="attribute">width</span>: grid-width(<span class="variable">$n</span>: <span class="number">5</span>); &#125;</span><br></pre></td></tr></table></figure><p>建议在自定义函数前添加前缀避免命名冲突，其他人阅读代码时也会知道这不是 Sass 或者 CSS 的自带功能。</p><p>自定义函数与 mixin 相同，都支持 variable arguments</p><h2 id="11-输出格式-Output-Style"><a href="#11-输出格式-Output-Style" class="headerlink" title="11. 输出格式 (Output Style)"></a>11. 输出格式 (Output Style)</h2><p>Sass 默认的 CSS 输出格式很美观也能清晰反映文档结构，为满足其他需求 Sass 也提供了多种输出格式。</p><p>Sass 提供了四种输出格式，可以通过 <code>:style option</code> 选项设定，或者在命令行中使用 <code>--style</code> 选项。</p><h3 id="11-1-nested"><a href="#11-1-nested" class="headerlink" title="11.1. :nested"></a>11.1. <code>:nested</code></h3><p>Nested （嵌套）样式是 Sass 默认的输出格式，能够清晰反映 CSS 与 HTML  的结构关系。选择器与属性等单独占用一行，缩进量与 Sass 文件中一致，每行的缩进量反映了其在嵌套规则内的层数。当阅读大型 CSS  文件时，这种样式可以很容易地分析文件的主要结构。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#main</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#000</span>; &#125;</span><br><span class="line">  <span class="selector-id">#main</span> <span class="selector-tag">p</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">10em</span>; &#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.huge</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">10em</span>;</span><br><span class="line">  <span class="attribute">font-weight</span>: bold;</span><br><span class="line">  <span class="attribute">text-decoration</span>: underline; &#125;</span><br></pre></td></tr></table></figure><h3 id="11-2-expanded"><a href="#11-2-expanded" class="headerlink" title="11.2. :expanded"></a>11.2. <code>:expanded</code></h3><p>Expanded 输出更像是手写的样式，选择器、属性等各占用一行，属性根据选择器缩进，而选择器不做任何缩进。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#main</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#000</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#main</span> <span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">10em</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.huge</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">10em</span>;</span><br><span class="line">  <span class="attribute">font-weight</span>: bold;</span><br><span class="line">  <span class="attribute">text-decoration</span>: underline;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="11-3-compact"><a href="#11-3-compact" class="headerlink" title="11.3. :compact"></a>11.3. <code>:compact</code></h3><p>Compact 输出方式比起上面两种占用的空间更少，每条 CSS 规则只占一行，包含其下的所有属性。嵌套过的选择器在输出时没有空行，不嵌套的选择器会输出空白行作为分隔符。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#main</span> &#123; <span class="attribute">color</span>: <span class="number">#fff</span>; <span class="attribute">background-color</span>: <span class="number">#000</span>; &#125;</span><br><span class="line"><span class="selector-id">#main</span> <span class="selector-tag">p</span> &#123; <span class="attribute">width</span>: <span class="number">10em</span>; &#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.huge</span> &#123; <span class="attribute">font-size</span>: <span class="number">10em</span>; <span class="attribute">font-weight</span>: bold; <span class="attribute">text-decoration</span>: underline; &#125;</span><br></pre></td></tr></table></figure><h3 id="11-4-compressed"><a href="#11-4-compressed" class="headerlink" title="11.4. :compressed"></a>11.4. <code>:compressed</code></h3><p>Compressed 输出方式删除所有无意义的空格、空白行、以及注释，力求将文件体积压缩到最小，同时也会做出其他调整，比如会自动替换占用空间最小的颜色表达方式。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#main</span>&#123;<span class="attribute">color</span>:<span class="number">#fff</span>;<span class="attribute">background-color</span>:<span class="number">#000</span>&#125;<span class="selector-id">#main</span> <span class="selector-tag">p</span>&#123;<span class="attribute">width</span>:<span class="number">10em</span>&#125;<span class="selector-class">.huge</span>&#123;<span class="attribute">font-size</span>:<span class="number">10em</span>;<span class="attribute">font-weight</span>:bold;<span class="attribute">text-decoration</span>:underline&#125;</span><br></pre></td></tr></table></figure><h2 id="12-拓展-Sass-Extending-Sass"><a href="#12-拓展-Sass-Extending-Sass" class="headerlink" title="12. 拓展 Sass (Extending Sass)"></a>12. 拓展 Sass (Extending Sass)</h2><p>Sass 提供了很多高级自定义功能，使用这些功能需要有良好的 Ruby 基础。</p><h3 id="12-1-自定义-Sass-函数-Defining-Custom-Sass-Functions"><a href="#12-1-自定义-Sass-函数-Defining-Custom-Sass-Functions" class="headerlink" title="12.1. 自定义 Sass 函数 (Defining Custom Sass Functions)"></a>12.1. 自定义 Sass 函数 (Defining Custom Sass Functions)</h3><p>通过 Ruby API 可以自定义 Sass 函数，具体请查看 <a href="http://sass-lang.com/docs/yardoc/Sass/Script/Functions.html#adding_custom_functions" target="_blank" rel="noopener">source documentation</a>。</p><h3 id="12-2-存储缓存-Cache-Stores"><a href="#12-2-存储缓存-Cache-Stores" class="headerlink" title="12.2. 存储缓存 (Cache Stores)"></a>12.2. 存储缓存 (Cache Stores)</h3><p>Sass caches parsed documents so that they can be reused without  parsing them again unless they have changed. By default, Sass will write these cache files to a location on the filesystem indicated by  :cache_location. If you cannot write to the filesystem or need to share  cache across ruby processes or machines, then you can define your own  cache store and set the:cache_store option. For details on creating your own cache store, please see the source documentation.</p><h3 id="12-3-自定义导入-Custom-Importers"><a href="#12-3-自定义导入-Custom-Importers" class="headerlink" title="12.3. 自定义导入 (Custom Importers)"></a>12.3. 自定义导入 (Custom Importers)</h3><p>Sass importers are in charge of taking paths passed to @import and  finding the appropriate Sass code for those paths. By default, this code is loaded from the filesystem, but importers could be added to load  from a database, over HTTP, or use a different file naming scheme than  what Sass expects.</p><p>Each importer is in charge of a single load path (or whatever the  corresponding notion is for the backend). Importers can be placed in the :load_paths array alongside normal filesystem paths.</p><p>When resolving an @import, Sass will go through the load paths  looking for an importer that successfully imports the path. Once one is  found, the imported file is used.</p><p>User-created importers must inherit from Sass::Importers::Base.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Sass中文教程&quot;&gt;&lt;a href=&quot;#Sass中文教程&quot; class=&quot;headerlink&quot; title=&quot;Sass中文教程&quot;&gt;&lt;/a&gt;Sass中文教程&lt;/h1&gt;&lt;p&gt;Sass 是一款强化 CSS 的辅助工具，它在 CSS 语法的基础上增加了变量 (varia
      
    
    </summary>
    
    
      <category term="frontend" scheme="http://wangyangyangisme.github.io/categories/frontend/"/>
    
    
  </entry>
  
  <entry>
    <title>Prometheus + Grafana监控</title>
    <link href="http://wangyangyangisme.github.io/2019/12/17/microservice-Prometheus+Grafana/"/>
    <id>http://wangyangyangisme.github.io/2019/12/17/microservice-Prometheus+Grafana/</id>
    <published>2019-12-17T05:55:36.000Z</published>
    <updated>2019-12-17T08:05:25.253Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>转载：<a href="https://blog.rj-bai.com/post/158.html" target="_blank" rel="noopener">https://blog.rj-bai.com/post/158.html</a></p></blockquote><p>本文包括 <code>Prometheus</code> 概述、部署、配置、监控、告警、之前我做监控用的都是 <code>zabbix</code>，<code>zabbix</code> 也算是一个全面型的监控系统，但是他不太适合容器监控，他对容器监控集成欠缺很多，他比较偏向于非容器监控。</p><p><code>Prometheus</code> 算是一个全能型选手，原生支持容器监控，当然监控传统应用也不是吃干饭的，所以就是容器和非容器他都支持，所有的监控系统都具备这个流程，数据采集→数据处理→数据存储→数据展示→告警，本文就是针对 <code>Prometheus</code> 展开的，所以先看看 <code>Prometheus</code> 概述</p><h2 id="Prometheus-概述"><a href="#Prometheus-概述" class="headerlink" title="Prometheus 概述"></a>Prometheus 概述</h2><h3 id="Prometheus-是什么"><a href="#Prometheus-是什么" class="headerlink" title="Prometheus 是什么"></a>Prometheus 是什么</h3><p>中文名普罗米修斯，最初在 <code>SoundCloud</code> 上构建的监控系统，自 <code>2012</code> 年成为社区开源项目，用户非常活跃的开发人员和用户社区，2016 年加入 <code>CNCF</code>，成为继 <code>kubernetes</code> 之后的第二个托管项目，<a href="https://prometheus.io/" target="_blank" rel="noopener">官方网站</a></p><h3 id="Prometheus-特点"><a href="#Prometheus-特点" class="headerlink" title="Prometheus 特点"></a>Prometheus 特点</h3><ul><li>多维数据模型：由度量名称和键值对标识的时间序列数据</li><li>PromSQL: — 种灵活的查询语言，可以利用多维数据完成复杂的查询</li><li>不依赖分布式存储，单个服务器节点可直接工作</li><li>基于 HTTP 的 pull 方式釆集时间序列数据</li><li>推送时间序列数据通过 PushGateway 组件支持</li><li>通过服务发现或静态配罝发现目标</li><li>多种图形模式及仪表盘支持 (grafana)</li></ul><h3 id="Prometheus-组成与架构"><a href="#Prometheus-组成与架构" class="headerlink" title="Prometheus 组成与架构"></a>Prometheus 组成与架构</h3><p>​    </p><p><img src="/" alt="img" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/wangyangyangisme/CDN@latest/blog/microserive/prometheus1.png"></p><table><thead><tr><th>名称</th><th>说明</th></tr></thead><tbody><tr><td>Prometheus Server</td><td>收集指标和存储时间序列数据，并提供查询接口</td></tr><tr><td>Push Gateway</td><td>短期存储指标数据，主要用于临时性任务</td></tr><tr><td>Exporters</td><td>采集已有的三方服务监控指标并暴露 metrics</td></tr><tr><td>Alertmanager</td><td>告警</td></tr><tr><td>Web UI</td><td>简单的 WEB 控制台</td></tr></tbody></table><p>集成了数据的采集，处理，存储，展示，告警一系列流程都已经具备了</p><h3 id="数据模型"><a href="#数据模型" class="headerlink" title="数据模型"></a>数据模型</h3><p><code>Prometheus</code> 将所有数据存储为时间序列，具有相同度量名称以及标签属于同个指标，也就是说 <code>Prometheus</code> 从数据源拿到数据之后都会存到内置的 <code>TSDB</code> 中，这里存储的就是时间序列数据，它存储的数据会有一个度量名称，譬如你现在监控一个 <code>nginx</code>，首先你要给他起个名字，这个名称也就是度量名，还会有 <code>N</code> 个标签，你可以理解名称为表名，标签为字段，所以，每个时间序列都由度量标准名称和一组键值对 (也称为标签) 唯一标识。</p><p>时间序列的格式是这样的，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;metrice name&gt; &#123;&lt;label name&gt;&#x3D;&lt;label value&gt;,...&#125;</span><br></pre></td></tr></table></figure><p><code>metrice name</code> 指的就是度量标准名称，<code>label name</code> 也就是标签名，这个标签可以有多个，栗子</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nginx_http_access&#123;method&#x3D;&quot;GET&quot;,uri&#x3D;&quot;&#x2F;index.html&quot;&#125;</span><br></pre></td></tr></table></figure><p>这个度量名称为 <code>nginx_http_access</code>，后面是两个标签，和他们各对应的值，当然你还可以继续指定标签，你指定的标签越多查询的维度就越多。</p><h3 id="指标类型"><a href="#指标类型" class="headerlink" title="指标类型"></a>指标类型</h3><p>看表格吧</p><table><thead><tr><th>类型名称</th><th>说明</th></tr></thead><tbody><tr><td>Counter</td><td>递增计数器，适合收集接口请求次数</td></tr><tr><td>Guage</td><td>可以任意变化的数值，适用 CPU 使用率</td></tr><tr><td>Histogram</td><td>对一段时间内数据进行采集，并对有所数值求和于统计数量</td></tr><tr><td>Summary</td><td>与 Histogram 类型类似</td></tr></tbody></table><h3 id="作业和实例"><a href="#作业和实例" class="headerlink" title="作业和实例"></a>作业和实例</h3><p>实例指的就是你可以抓取的目标，这个会在 <code>Prometheus</code>配置文件中提现，作业是具有相同目标的实例集合称为作业，你可以理解为是一个组，一会写配置文件的时候会详细解析，下面开始安装 <code>Prometheus</code>。</p><h2 id="Prometheus-部署"><a href="#Prometheus-部署" class="headerlink" title="Prometheus 部署"></a>Prometheus 部署</h2><p>先通过二进制来部署 <code>Prometheus</code> 吧，<a href="https://prometheus.io/download/" target="_blank" rel="noopener">下载地址</a>，我们要下载服务端，也就是这个包</p><p><img src="/" alt="img" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/wangyangyangisme/CDN@latest/blog/microserive/prometheus2.png"></p><p>我在服务器上直接下载了，下载完后解压移动到别的目录。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@rj-bai ~]<span class="comment"># wget https://github.com/prometheus/prometheus/releases/download/v2.10.0/prometheus-2.10.0.linux-amd64.tar.gz</span></span><br><span class="line">[root@rj-bai ~]<span class="comment"># tar zxf prometheus-2.10.0.linux-amd64.tar.gz </span></span><br><span class="line">[root@rj-bai ~]<span class="comment"># mv prometheus-2.10.0.linux-amd64 /usr/local/prometheus</span></span><br><span class="line">[root@rj-bai ~]<span class="comment"># cd /usr/local/prometheus/ &amp;&amp; ls</span></span><br><span class="line">console_libraries  consoles  LICENSE  NOTICE  prometheus  prometheus.yml  promtool</span><br></pre></td></tr></table></figure><p>先配置一下监控本机吧，它默认的配置文件是 <code>prometheus.yml</code>，已经配置好了，也就是这一段，</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">job_name:</span> <span class="string">'prometheus'</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># metrics_path defaults to '/metrics'</span></span><br><span class="line">  <span class="comment"># scheme defaults to 'http'.</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">static_configs:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">targets:</span> <span class="string">['localhost:9090']</span></span><br></pre></td></tr></table></figure><p><code>targets</code> 就是一个作业，也就是被监控端，监控本机的 <code>9090</code> 端口，启动选项也有很多，了解一下，主要是关注两点，分别如下。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">--storage.tsdb.path&#x3D;&quot;data&#x2F;&quot;   ##存储数据的目录，默认&#x2F;data</span><br><span class="line">--storage.tsdb.retention.time ##数据存储时间，默认15天</span><br></pre></td></tr></table></figure><p>这里提一下存储的问题，<code>TSDB</code> 不太适合长期去存储数据，数据量大了支持并不是很好，官方声明也是不会对这一块存储进行改善，给你的建议是使用外部存储，譬如使用 <code>InfluxDB</code>，这里暂时就不改他的默认存储了，把他进入系统服务吧，写一个 <code>systemd</code> 的配置文件，直接启动了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[root@rj-bai /usr/<span class="built_in">local</span>/prometheus]<span class="comment"># cat &gt; /usr/lib/systemd/system/prometheus.service &lt;&lt;OEF </span></span><br><span class="line">&gt; [Unit]</span><br><span class="line">&gt; Description=prometheus server daemon</span><br><span class="line">&gt; </span><br><span class="line">&gt; [Service]</span><br><span class="line">&gt; Restart=on-failure</span><br><span class="line">&gt; ExecStart=/usr/<span class="built_in">local</span>/prometheus/prometheus --config.file=/usr/<span class="built_in">local</span>/prometheus/prometheus.yml</span><br><span class="line">&gt; </span><br><span class="line">&gt; [Install]</span><br><span class="line">&gt; WantedBy=multi-user.target</span><br><span class="line">&gt; OEF</span><br><span class="line">[root@rj-bai /usr/<span class="built_in">local</span>/prometheus]<span class="comment"># systemctl daemon-reload &amp;&amp; systemctl start prometheus.service</span></span><br></pre></td></tr></table></figure><p>这样就启动了撒，去访问 <code>9090</code> 端口就可以看到页面了，这个页面能看到的东西很多，自己点点看吧，能看到这个页面就表示莫得问题。</p><p>​    </p><p><img src="/" alt="img" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/wangyangyangisme/CDN@latest/blog/microserive/prometheus3.png"></p><p>目前使用二进制部署主要是因为方便改配置文件，下面开始看配置文件。</p><h2 id="全局配置文件介绍"><a href="#全局配置文件介绍" class="headerlink" title="全局配置文件介绍"></a>全局配置文件介绍</h2><p><code>prometheus</code> 已经安装起来了，下面看一下配置文件与核心功能，很多功能都是通过配置文件去实现的，比较多，所以先熟悉一下他的配置文件。</p><h3 id="全局配置文件"><a href="#全局配置文件" class="headerlink" title="全局配置文件"></a>全局配置文件</h3><p>也就是 <code>prometheus.yml</code>，官方说明<a href="https://prometheus.io/docs/prometheus/latest/configuration/configuration/" target="_blank" rel="noopener">地址</a>，大概分为这几块，我把注释去掉了，全局配置选项</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">global:</span></span><br><span class="line">  <span class="string">[</span> <span class="attr">scrape_interval:</span> <span class="string">&lt;duration&gt;</span> <span class="string">|</span> <span class="string">default</span> <span class="string">=</span> <span class="string">1m</span> <span class="string">]</span>      <span class="comment">##采集间隔</span></span><br><span class="line">  <span class="string">[</span> <span class="attr">scrape_timeout:</span> <span class="string">&lt;duration&gt;</span> <span class="string">|</span> <span class="string">default</span> <span class="string">=</span> <span class="string">10s</span> <span class="string">]</span>      <span class="comment">##采集超时时间</span></span><br><span class="line">  <span class="string">[</span> <span class="attr">evaluation_interval:</span> <span class="string">&lt;duration&gt;</span> <span class="string">|</span> <span class="string">default</span> <span class="string">=</span> <span class="string">1m</span> <span class="string">]</span>  <span class="comment">##告警评估周期</span></span><br><span class="line">  <span class="attr">external_labels:</span>                                    <span class="comment">##外部标签             </span></span><br><span class="line">    <span class="string">[</span> <span class="string">&lt;labelname&gt;:</span> <span class="string">&lt;labelvalue&gt;</span> <span class="string">...</span> <span class="string">]</span></span><br></pre></td></tr></table></figure><p>指定告警规则</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">rule_files:</span></span><br><span class="line">  <span class="string">[</span> <span class="bullet">-</span> <span class="string">&lt;filepath_glob&gt;</span> <span class="string">...</span> <span class="string">]</span></span><br></pre></td></tr></table></figure><p>配置被监控端</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">scrape_configs:</span></span><br><span class="line">  <span class="string">[</span> <span class="bullet">-</span> <span class="string">&lt;scrape_config&gt;</span> <span class="string">...</span> <span class="string">]</span></span><br></pre></td></tr></table></figure><p>配置告警方式</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">alerting:</span></span><br><span class="line">  <span class="attr">alert_relabel_configs:</span></span><br><span class="line">    <span class="string">[</span> <span class="bullet">-</span> <span class="string">&lt;relabel_config&gt;</span> <span class="string">...</span> <span class="string">]</span></span><br><span class="line">  <span class="attr">alertmanagers:</span></span><br><span class="line">    <span class="string">[</span> <span class="bullet">-</span> <span class="string">&lt;alertmanager_config&gt;</span> <span class="string">...</span> <span class="string">]</span></span><br></pre></td></tr></table></figure><p>指定远程存储</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">remote_write:</span></span><br><span class="line">  <span class="string">[</span> <span class="bullet">-</span> <span class="string">&lt;remote_write&gt;</span> <span class="string">...</span> <span class="string">]</span></span><br><span class="line"><span class="attr">remote_read:</span></span><br><span class="line">  <span class="string">[</span> <span class="bullet">-</span> <span class="string">&lt;remote_read&gt;</span> <span class="string">...</span> <span class="string">]</span></span><br></pre></td></tr></table></figure><p>这就是一个整体的配置文件，现在再看默认的配置文件就能看懂某一段是干啥的了，现在开始配置 <code>scrape_configs</code></p><h3 id="scrape-configs"><a href="#scrape-configs" class="headerlink" title="scrape_configs"></a>scrape_configs</h3><p>这块就是来配置我们要监控的东西，在这一块中配置的东西又有很多了，看一下官方的，一堆，我还是去掉注释分段贴出来吧。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">job_name:</span> <span class="string">&lt;job_name&gt;</span>  <span class="comment">##指定job名字</span></span><br><span class="line"><span class="string">[</span> <span class="attr">scrape_interval:</span> <span class="string">&lt;duration&gt;</span> <span class="string">|</span> <span class="string">default</span> <span class="string">=</span> <span class="string">&lt;global_config.scrape_interval&gt;</span> <span class="string">]</span></span><br><span class="line"><span class="string">[</span> <span class="attr">scrape_timeout:</span> <span class="string">&lt;duration&gt;</span> <span class="string">|</span> <span class="string">default</span> <span class="string">=</span> <span class="string">&lt;global_config.scrape_timeout&gt;</span> <span class="string">]</span>  <span class="comment">##这两段指定采集时间，默认继承全局</span></span><br><span class="line"><span class="string">[</span> <span class="attr">metrics_path:</span> <span class="string">&lt;path&gt;</span> <span class="string">|</span> <span class="string">default</span> <span class="string">=</span> <span class="string">/metrics</span> <span class="string">]</span>  <span class="comment">##metrics路径，默认metrics</span></span><br><span class="line"><span class="string">[</span> <span class="attr">honor_labels:</span> <span class="string">&lt;boolean&gt;</span> <span class="string">|</span> <span class="string">default</span> <span class="string">=</span> <span class="literal">false</span> <span class="string">]</span>  <span class="comment">##默认附加的标签，默认不覆盖</span></span><br></pre></td></tr></table></figure><p>它默认暴露监控数据的接口就是 <code>ip:9090/metrics</code>，你可以去指定这个名称，访问一下这里看看，  </p><p><img src="/" alt="img" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/wangyangyangisme/CDN@latest/blog/microserive/prometheus50.png"></p><p>在 <code>ip:9090/targets</code> 能看到当前监控的主机，现在只有本机一个，标签显示也在这里。</p><p><img src="/" alt="img" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/wangyangyangisme/CDN@latest/blog/microserive/prometheus4.png"></p><p>在看下一段，这里定义的是要如何去访问采集目标</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">[</span> <span class="attr">scheme:</span> <span class="string">&lt;scheme&gt;</span> <span class="string">|</span> <span class="string">default</span> <span class="string">=</span> <span class="string">http</span> <span class="string">]</span>  <span class="comment">## 默认使用http方式去访问</span></span><br><span class="line"><span class="attr">params:</span></span><br><span class="line">  <span class="string">[</span> <span class="string">&lt;string&gt;:</span> <span class="string">[&lt;string&gt;,</span> <span class="string">...]</span> <span class="string">]</span>        <span class="comment">## 配置访问时携带的参数</span></span><br><span class="line"><span class="attr">basic_auth:</span></span><br><span class="line">  <span class="string">[</span> <span class="attr">username:</span> <span class="string">&lt;string&gt;</span> <span class="string">]</span></span><br><span class="line">  <span class="string">[</span> <span class="attr">password:</span> <span class="string">&lt;secret&gt;</span> <span class="string">]</span></span><br><span class="line">  <span class="string">[</span> <span class="attr">password_file:</span> <span class="string">&lt;string&gt;</span> <span class="string">]</span>          <span class="comment">## 配置访问接口的用户名密码</span></span><br><span class="line"><span class="string">[</span> <span class="attr">bearer_token:</span> <span class="string">&lt;secret&gt;</span> <span class="string">]</span></span><br><span class="line"><span class="string">[</span> <span class="attr">bearer_token_file:</span> <span class="string">/path/to/bearer/token/file</span> <span class="string">]</span>  <span class="comment">##指定认证token</span></span><br><span class="line"><span class="attr">tls_config:</span></span><br><span class="line">  <span class="string">[</span> <span class="string">&lt;tls_config&gt;</span> <span class="string">]</span>                     <span class="comment">## 指定CA证书</span></span><br><span class="line"><span class="string">[</span> <span class="attr">proxy_url:</span> <span class="string">&lt;string&gt;</span> <span class="string">]</span>                <span class="comment">## 使用代理模式访问目标</span></span><br></pre></td></tr></table></figure><p>下一段，服务发现配置，贴了几个，不是完整的</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">consul_sd_configs:</span>                   <span class="comment">##通过consul去发现</span></span><br><span class="line">  <span class="string">[</span> <span class="bullet">-</span> <span class="string">&lt;consul_sd_config&gt;</span> <span class="string">...</span> <span class="string">]</span></span><br><span class="line"><span class="attr">dns_sd_configs:</span>                      <span class="comment">##通过DNS去发现</span></span><br><span class="line">  <span class="string">[</span> <span class="bullet">-</span> <span class="string">&lt;dns_sd_config&gt;</span> <span class="string">...</span> <span class="string">]</span></span><br><span class="line"><span class="attr">file_sd_configs:</span>                   <span class="comment">##通过文件去发现</span></span><br><span class="line">  <span class="string">[</span> <span class="bullet">-</span> <span class="string">&lt;file_sd_config&gt;</span> <span class="string">...</span> <span class="string">]</span></span><br><span class="line"><span class="attr">kubernetes_sd_configs:</span>               <span class="comment">##通过kubernetes去发现</span></span><br><span class="line">  <span class="string">[</span> <span class="bullet">-</span> <span class="string">&lt;kubernetes_sd_config&gt;</span> <span class="string">...</span> <span class="string">]</span></span><br></pre></td></tr></table></figure><p>静态配置被监控端</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">static_configs:</span></span><br><span class="line">  <span class="string">[</span> <span class="bullet">-</span> <span class="string">&lt;static_config&gt;</span> <span class="string">...</span> <span class="string">]</span></span><br></pre></td></tr></table></figure><p>刚刚监控本机的就是静态配置去监控的，也是就这一段，</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">scrape_configs:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">job_name:</span> <span class="string">'prometheus'</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">static_configs:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">targets:</span> <span class="string">['localhost:9090']</span></span><br></pre></td></tr></table></figure><p>最后标签配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">relabel_configs:</span></span><br><span class="line">  <span class="string">[</span> <span class="bullet">-</span> <span class="string">&lt;relabel_config&gt;</span> <span class="string">...</span> <span class="string">]</span>          <span class="comment">##在数据采集前对标签进行重新标记</span></span><br><span class="line"><span class="attr">metric_relabel_configs:</span></span><br><span class="line">  <span class="string">[</span> <span class="bullet">-</span> <span class="string">&lt;relabel_config&gt;</span> <span class="string">...</span> <span class="string">]</span>          <span class="comment">##在数据采集之后对标签进行重新标记</span></span><br><span class="line"><span class="string">[</span> <span class="attr">sample_limit:</span> <span class="string">&lt;int&gt;</span> <span class="string">|</span> <span class="string">default</span> <span class="string">=</span> <span class="number">0</span> <span class="string">]</span> <span class="comment">##采集样本数量，默认0</span></span><br></pre></td></tr></table></figure><p>下面看一下 <code>relabel_configs</code></p><h3 id="relabel-configs"><a href="#relabel-configs" class="headerlink" title="relabel_configs"></a>relabel_configs</h3><p>就是用来重新打标记的，对于 <code>prometheus</code> 数据模型最关键点就是一个指标名称和一组标签来组成一个多维度的数据模型，你想完成一个复杂的查询就需要你有很多维度，<code>relabel_configs</code> 就是对标签进行处理的，他能帮你在数据采集之前对任何目标的标签进行修改，重打标签的意义就是如果标签有重复的可以帮你重命名，看一哈现在的，上面铁锅</p><p><img src="/" alt="img" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/wangyangyangisme/CDN@latest/blog/microserive/prometheus5.png"></p><p>现在 <code>instance</code> 是他默认给我加的标签，想改的话就需要 <code>relabel_configs</code> 去帮你重打标签，他也可以删除标签，如果某个标签用不到了也可以删掉，再就是过滤标签，再看一下 <code>relabel_configs</code> 的配置有哪些，也就是这一段</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">relabel_configs:</span> </span><br><span class="line">  <span class="string">[</span> <span class="attr">source_labels:</span> <span class="string">'['</span> <span class="string">&lt;labelname&gt;</span> <span class="string">[,</span> <span class="string">...]</span> <span class="string">']'</span> <span class="string">]</span>   <span class="comment">##源标签，指定对哪个现有标签进行操作</span></span><br><span class="line">  <span class="string">[</span> <span class="attr">separator:</span> <span class="string">&lt;string&gt;</span> <span class="string">|</span> <span class="string">default</span> <span class="string">=</span> <span class="string">;</span> <span class="string">]</span>            <span class="comment">##多个源标签时连接的分隔符</span></span><br><span class="line">  <span class="string">[</span> <span class="attr">target_label:</span> <span class="string">&lt;labelname&gt;</span> <span class="string">]</span>                    <span class="comment">##要将源标签换成什么名字</span></span><br><span class="line">  <span class="string">[</span> <span class="attr">regex:</span> <span class="string">&lt;regex&gt;</span> <span class="string">|</span> <span class="string">default</span> <span class="string">=</span> <span class="string">(.*)</span> <span class="string">]</span>              <span class="comment">##怎么来匹配源标签，默认匹配所有</span></span><br><span class="line">  <span class="string">[</span> <span class="attr">modulus:</span> <span class="string">&lt;uint64&gt;</span> <span class="string">]</span>                            <span class="comment">##不怎么会用到</span></span><br><span class="line">  <span class="string">[</span> <span class="attr">replacement:</span> <span class="string">&lt;string&gt;</span> <span class="string">|</span> <span class="string">default</span> <span class="string">=</span> <span class="string">$1</span> <span class="string">]</span>         <span class="comment">##替换正则表达式匹配到的分组，分组引用$1,$2,$3</span></span><br><span class="line">  <span class="string">[</span> <span class="attr">action:</span> <span class="string">&lt;relabel_action&gt;</span> <span class="string">|</span> <span class="string">default</span> <span class="string">=</span> <span class="string">replace</span> <span class="string">]</span> <span class="comment">##基于正则表达式匹配执行的操作，默认替换</span></span><br></pre></td></tr></table></figure><p>这东西到底怎么用，做个演示，根据两台服务器聚合查看 <code>CPU</code> 使用率，说白了就是同时去查看这两台服务器的 <code>CPU</code> 利用率，用这个标签就可以实现了。</p><h4 id="添加标签"><a href="#添加标签" class="headerlink" title="添加标签"></a>添加标签</h4><p>去 <code>WEB</code> 界面看一下当前被监控端 <code>CPU</code> 使用率，用 <code>sql</code> 去查，也就是这个值。</p><p><img src="/" alt="img" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/wangyangyangisme/CDN@latest/blog/microserive/prometheus6.png"></p><p>可以看到一个度量名称和两个默认附加的标签，我现在想统计两台服务器的 <code>CPU</code> 使用率，就需要加一个标签了，说白了就是添加一个维度去获取这两台服务器 <code>CPU</code> 使用率，接下来去改配置文件吧，给他加个标签，如下，</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">static_configs:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">targets:</span> <span class="string">['localhost:9090']</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">server:</span> <span class="string">local</span></span><br></pre></td></tr></table></figure><p>热更新一下，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@rj-bai /usr/<span class="built_in">local</span>/prometheus]<span class="comment"># ps aux | grep prometheus.yml  | grep -v grep  | awk &#123;'print $2'&#125; | xargs kill -hup</span></span><br></pre></td></tr></table></figure><p>看一下有没有生效，刷新一下页面就能看到了，</p><p><img src="/" alt="img" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/wangyangyangisme/CDN@latest/blog/microserive/prometheus7.png"></p><p>然后可以根据这个标签去查了，语法是这样的，内置函数，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sum(process_cpu_seconds_total&#123;server&#x3D;&quot;local&quot;&#125;)</span><br></pre></td></tr></table></figure><p><img src="/" alt="img" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/wangyangyangisme/CDN@latest/blog/microserive/prometheus8.png"></p><p>所以就算你有 <code>N</code> 个被监控的服务器打上这个标签之后在这里就可以看到总数了，添加标签很简单，下面看一下重命名标签，就是将现有的标签进行重命名。</p><h4 id="标签重命名"><a href="#标签重命名" class="headerlink" title="标签重命名"></a>标签重命名</h4><p>就是将一个已有的标签重命名一个新的标签，实际操作一下，之前的标签去掉了，现在要把 <code>job_name</code> 改个名字，也就是这一块的配置，</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">job_name:</span> <span class="string">'prometheus'</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">static_configs:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">targets:</span> <span class="string">['localhost:9090']</span></span><br></pre></td></tr></table></figure><p>目前 <code>job_name</code> 为 <code>prometheus</code>，当前这个虚拟机是跑在 <code>IP</code> 地址为 <code>21</code> 的物理机上，所以现在把他的 <code>job_name</code> 改成 <code>server21</code>，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">scrape_configs:</span><br><span class="line">  - job_name: <span class="string">'server21'</span></span><br><span class="line"></span><br><span class="line">    static_configs:</span><br><span class="line">    - targets: [<span class="string">'localhost:9090'</span>]</span><br></pre></td></tr></table></figure><p>重启一下，刷新页面就可以看到了，</p><p><img src="/" alt="img" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/wangyangyangisme/CDN@latest/blog/microserive/prometheus9.png"></p><p>我现在要将 <code>job</code> 这个标签标记为 <code>local</code>，也就是将 <code>job=&quot;server21</code> 改为 <code>local=&quot;server21</code>，下面开始用 <code>relabel</code> 进行重命名，改完之后的配置是这样的，</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">scrape_configs:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">job_name:</span> <span class="string">'server21'</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">static_configs:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">targets:</span> <span class="string">['localhost:9090']</span></span><br><span class="line">    <span class="attr">relabel_configs:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">action:</span> <span class="string">replace</span></span><br><span class="line">      <span class="attr">source_labels:</span> <span class="string">['job']</span>  <span class="comment">##源标签</span></span><br><span class="line">      <span class="attr">regex:</span> <span class="string">(.*)</span>             <span class="comment">##正则，会匹配到job值，也就是server21</span></span><br><span class="line">      <span class="attr">replacement:</span> <span class="string">$1</span>         <span class="comment">##引用正则匹配到的内容，也就是server21</span></span><br><span class="line">      <span class="attr">target_label:</span> <span class="string">local</span>     <span class="comment">##赋予新的标签，名为local</span></span><br></pre></td></tr></table></figure><p>这样就可以了撒，重新加载一下，看页面，</p><p>​    </p><p><img src="/" alt="img" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/wangyangyangisme/CDN@latest/blog/microserive/prometheus10.png"></p><p>新的数据已经有了，之前的标签还会保留，因为没有配置删除他，这样就可以了，现在就可以聚合了，</p><p><img src="/" alt="img" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/wangyangyangisme/CDN@latest/blog/microserive/prometheus11.png"></p><p>这样他就会将所有实例使用率相加求和。</p><h4 id="action-重新打标签动作"><a href="#action-重新打标签动作" class="headerlink" title="action 重新打标签动作"></a>action 重新打标签动作</h4><p>如表所示，上面就是用了一个默认的。</p><table><thead><tr><th>值</th><th>描述</th></tr></thead><tbody><tr><td>replace</td><td>默认，通过正则匹配 source_label 的值，使用 replacement 来引用表达式匹配的分组</td></tr><tr><td>keep</td><td>删除 regex 于链接不匹配的目标 source_labels</td></tr><tr><td>drop</td><td>删除 regex 与连接匹配的目标 source_labels</td></tr><tr><td>labeldrop</td><td>匹配 Regex 所有标签名称</td></tr><tr><td>labelkeep</td><td>匹配 regex 所有标签名称</td></tr><tr><td>hashmod</td><td>设置 target_label 为 modulus 连接的哈希值 source_lanels</td></tr><tr><td>labelmap</td><td>匹配 regex 所有标签名称，复制匹配标签的值分组，replacement 分组引用 (${1},${2}) 替代</td></tr></tbody></table><p>比如说我现在不想采集本机的数据了，就可以用上面的标签进行操作了，加点东西就行了，</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">scrape_configs:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">job_name:</span> <span class="string">'server21'</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">static_configs:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">targets:</span> <span class="string">['localhost:9090']</span></span><br><span class="line">    <span class="attr">relabel_configs:</span> </span><br><span class="line">    <span class="bullet">-</span> <span class="attr">action:</span> <span class="string">replace</span></span><br><span class="line">      <span class="attr">source_labels:</span> <span class="string">['job']</span></span><br><span class="line">      <span class="attr">regex:</span> <span class="string">(.*)</span></span><br><span class="line">      <span class="attr">replacement:</span> <span class="string">$1</span></span><br><span class="line">      <span class="attr">target_label:</span> <span class="string">local</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">action:</span> <span class="string">drop</span></span><br><span class="line">      <span class="attr">source_labels:</span> <span class="string">["job"]</span></span><br></pre></td></tr></table></figure><p>删除标签为 <code>job</code> 的节点，目前只有一个节点，所以这个跑了之后就看不到数据了，如果真的要用这个给不需要监控的节点打一个标签，然后在这里匹配就行了，所以现在重新载入的话就没数据了，</p><p>​    </p><p><img src="/" alt="img" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/wangyangyangisme/CDN@latest/blog/microserive/prometheus12.png"></p><p>最后看一下删除标签。</p><h4 id="删除标签"><a href="#删除标签" class="headerlink" title="删除标签"></a>删除标签</h4><p>刚刚我新打了一个标签，也就是 <code>local</code> 标签，所以之前的 <code>job</code> 标签可以不要了，下面直接给他删了吧，</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">scrape_configs:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">job_name:</span> <span class="string">'server21'</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">static_configs:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">targets:</span> <span class="string">['localhost:9090']</span></span><br><span class="line">    <span class="attr">relabel_configs:</span> </span><br><span class="line">    <span class="bullet">-</span> <span class="attr">action:</span> <span class="string">replace</span></span><br><span class="line">      <span class="attr">source_labels:</span> <span class="string">['job']</span></span><br><span class="line">      <span class="attr">regex:</span> <span class="string">(.*)</span></span><br><span class="line">      <span class="attr">replacement:</span> <span class="string">$1</span></span><br><span class="line">      <span class="attr">target_label:</span> <span class="string">local</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">action:</span> <span class="string">labeldrop</span> </span><br><span class="line">      <span class="attr">regex:</span> <span class="string">job</span></span><br></pre></td></tr></table></figure><p>重载一下就看到 <code>job</code> 的标签了。</p><p>​    </p><p><img src="/" alt="img" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/wangyangyangisme/CDN@latest/blog/microserive/prometheus15.png"></p><p>这样就可以了撒，下面看看基于文件的服务发现功能</p><h3 id="基于文件的服务发现"><a href="#基于文件的服务发现" class="headerlink" title="基于文件的服务发现"></a>基于文件的服务发现</h3><p>下面会涉及到基于文件的服务发现，还有就是基于 <code>kubernetes</code> 的服务发现，这个到监控 <code>k8s</code> 集群的时候再说吧，先看基于文件的吧，现在还没准备别的服务器，还是发现本身吧，先把配置文件改成这样，重载之后就看不到本机了。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">[root@rj-bai</span> <span class="string">/usr/local/prometheus]#</span> <span class="string">cat</span> <span class="string">prometheus.yml</span></span><br><span class="line"><span class="attr">global:</span></span><br><span class="line">  <span class="attr">scrape_interval:</span>     <span class="string">15s</span> </span><br><span class="line">  <span class="attr">evaluation_interval:</span> <span class="string">15s</span> </span><br><span class="line"></span><br><span class="line"><span class="attr">alerting:</span></span><br><span class="line">  <span class="attr">alertmanagers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">static_configs:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">targets:</span></span><br><span class="line"></span><br><span class="line"><span class="attr">rule_files:</span></span><br><span class="line"></span><br><span class="line"><span class="attr">scrape_configs:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">job_name:</span> <span class="string">'prometheus'</span></span><br></pre></td></tr></table></figure><p>​    </p><p><img src="/" alt="img" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/wangyangyangisme/CDN@latest/blog/microserive/prometheus16.png"></p><p>然后就可以去改配置文件了，通过服务发现将自身加入进去，</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">[root@rj-bai</span> <span class="string">/usr/local/prometheus]#</span> <span class="string">cat</span> <span class="string">prometheus.yml</span></span><br><span class="line"><span class="attr">global:</span></span><br><span class="line">  <span class="attr">scrape_interval:</span>     <span class="string">15s</span> </span><br><span class="line">  <span class="attr">evaluation_interval:</span> <span class="string">15s</span> </span><br><span class="line"></span><br><span class="line"><span class="attr">alerting:</span></span><br><span class="line">  <span class="attr">alertmanagers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">static_configs:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">targets:</span></span><br><span class="line"></span><br><span class="line"><span class="attr">rule_files:</span></span><br><span class="line"></span><br><span class="line"><span class="attr">scrape_configs:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">job_name:</span> <span class="string">'prometheus'</span></span><br><span class="line">    <span class="attr">file_sd_configs:</span> </span><br><span class="line">      <span class="bullet">-</span> <span class="attr">files:</span> <span class="string">['/usr/local/prometheus/files_sd_configs/*.yaml']</span>  <span class="comment">##指定服务发现文件位置</span></span><br><span class="line">        <span class="attr">refresh_interval:</span> <span class="string">5s</span>                                      <span class="comment">##刷新间隔改为5秒</span></span><br></pre></td></tr></table></figure><p>重载服务，然后去写服务发现的 <code>YAML</code> 文件吧，</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">[root@rj-bai</span> <span class="string">/usr/local/prometheus/files_sd_configs]#</span> <span class="string">cat</span> <span class="string">configs.yml</span> </span><br><span class="line"><span class="bullet">-</span> <span class="attr">targets:</span> <span class="string">['localhost:9090']</span> </span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">server21</span></span><br></pre></td></tr></table></figure><p>这样就可以了，文件保存五秒后就能看到发现的主机了，查数据也没问题</p><p>​    </p><p><img src="/" alt="img" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/wangyangyangisme/CDN@latest/blog/microserive/prometheus17.png"></p><p><img src="/" alt="img" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/wangyangyangisme/CDN@latest/blog/microserive/prometheus18.png"></p><p><img src="/" alt="img" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/wangyangyangisme/CDN@latest/blog/microserive/prometheus19.png"></p><p>就是这种原理，下面开始监控 <code>linux</code> 和一些服务吧</p><h2 id="监控例子"><a href="#监控例子" class="headerlink" title="监控例子"></a>监控例子</h2><h3 id="监控-linux-服务器"><a href="#监控-linux-服务器" class="headerlink" title="监控 linux 服务器"></a>监控 linux 服务器</h3><p>在被监控端需要装一个名为 <code>node_exporter</code> 的导出器，他会帮你收集系统指标和一些软件运行的指标，把指标暴露出去，这样 <code>prometheus</code> 就可以去采集了，具体 <code>node_exporter</code> 能采集哪些东西，看官方的 <a href="https://github.com/prometheus/node_exporter" target="_blank" rel="noopener"><code>github</code></a>吧，还是蛮多的，现在随便找个服务器下载一下 <code>node_exporter</code> 运行起来就行了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@kubeadm-node ~]<span class="comment"># wget https://github.com/prometheus/node_exporter/releases/download/v0.18.1/node_exporter-0.18.1.linux-amd64.tar.gz</span></span><br><span class="line">[root@kubeadm-node ~]<span class="comment"># tar zxf node_exporter-0.18.1.linux-amd64.tar.gz </span></span><br><span class="line">[root@kubeadm-node ~]<span class="comment"># mv node_exporter-0.18.1.linux-amd64 /usr/local/node_exporter</span></span><br><span class="line">[root@kubeadm-node ~]<span class="comment"># cd /usr/local/node_exporter</span></span><br></pre></td></tr></table></figure><p>在启动之前看一下他的启动参数，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@kubeadm-node /usr/<span class="built_in">local</span>/node_exporter]<span class="comment"># ./node_exporter --help</span></span><br></pre></td></tr></table></figure><p>可以看到一堆，她就是一个收集器，配置你要收集或不收集哪些信息，看 <code>default</code> 就能看出来撒，加到系统服务中吧，用 <code>systemctl</code> 去管理。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[root@kubeadm-node /usr/<span class="built_in">local</span>/node_exporter]<span class="comment"># cat &gt; /usr/lib/systemd/system/node_exporter.service &lt;&lt;OEF </span></span><br><span class="line">&gt; [Unit]</span><br><span class="line">&gt; Description=node_exporter</span><br><span class="line">&gt; </span><br><span class="line">&gt; [Service]</span><br><span class="line">&gt; Restart=on-failure</span><br><span class="line">&gt; ExecStart=/usr/<span class="built_in">local</span>/node_exporter/node_exporter</span><br><span class="line">&gt; </span><br><span class="line">&gt; [Install]</span><br><span class="line">&gt; WantedBy=multi-user.target</span><br><span class="line">&gt; OEF</span><br><span class="line">[root@kubeadm-node /usr/<span class="built_in">local</span>/node_exporter]<span class="comment"># systemctl daemon-reload </span></span><br><span class="line">[root@kubeadm-node /usr/<span class="built_in">local</span>/node_exporter]<span class="comment"># systemctl start node_exporter.service</span></span><br><span class="line">[root@kubeadm-node /usr/<span class="built_in">local</span>/node_exporter]<span class="comment"># curl -s 127.0.0.1:9100/metrics | head</span></span><br></pre></td></tr></table></figure><p><img src="/" alt="img" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/wangyangyangisme/CDN@latest/blog/microserive/prometheus20.png"></p><p>正常启动了，现在要配置 <code>prometheus</code> 来监控这个主机了，之前配置过动态发现了，现在再加一个，把服务端和被监控端分开，所以新加了这个。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[root@rj-bai /usr/<span class="built_in">local</span>/prometheus]<span class="comment"># cat prometheus.yml</span></span><br><span class="line">  - job_name: <span class="string">'nodes'</span></span><br><span class="line">    file_sd_configs: </span><br><span class="line">      - files: [<span class="string">'/usr/local/prometheus/nodes_sd_configs/*.yml'</span>]</span><br><span class="line">        refresh_interval: 5s </span><br><span class="line">[root@rj-bai /usr/<span class="built_in">local</span>/prometheus]<span class="comment"># mkdir nodes_sd_configs &amp;&amp; cd nodes_sd_configs</span></span><br><span class="line">[root@rj-bai /usr/<span class="built_in">local</span>/prometheus]<span class="comment"># ps aux | grep prometheus.yml  | grep -v grep  | awk &#123;'print $2'&#125; | xargs kill -hup</span></span><br><span class="line">[root@rj-bai /usr/<span class="built_in">local</span>/prometheus/nodes_sd_configs]<span class="comment"># cat nodes.yml</span></span><br><span class="line">- targets: [<span class="string">'192.168.1.248:9100'</span>] </span><br><span class="line">  labels:</span><br><span class="line">    name: server20</span><br></pre></td></tr></table></figure><p>直接去看页面吧，应该已经添加进去了，顺便查一下数据</p><p>​    </p><p><img src="/" alt="img" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/wangyangyangisme/CDN@latest/blog/microserive/prometheus21.png"></p><p><img src="/" alt="img" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/wangyangyangisme/CDN@latest/blog/microserive/prometheus22.png"></p><p>这样就可以了，莫得问题，下面用 <code>PromSQL</code> 获取 <code>CPU&amp;</code> 内存硬盘使用率</p><h3 id="使用-PromSQL"><a href="#使用-PromSQL" class="headerlink" title="使用 PromSQL"></a>使用 PromSQL</h3><p>想查数据就需要写 <code>PromSQL</code> 去查询了，</p><h4 id="查询-CPU-使用率"><a href="#查询-CPU-使用率" class="headerlink" title="查询 CPU 使用率"></a>查询 CPU 使用率</h4><p>比如果我想查看刚刚加进来的 <code>nodes CPU</code> 利用率，以 <code>node</code> 开头的 <code>sql</code> 都是 <code>node_expores</code> 采集的指标，度量很多，看 <code>CPU</code> 使用率看着一个指标就够了，</p><p><img src="/" alt="img" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/wangyangyangisme/CDN@latest/blog/microserive/prometheus23.png"></p><p>总 <code>CPU</code> 使用情况，会列出你处理器多少核，每个核的使用情况，这个 CPU 是干什么使用的，用户态还是内核态还是操作 <code>IO</code> 等待的时间，还有优先级调度使用的 <code>CPU</code>，他会通过一个名为 <code>mode</code> 的标签去区分这些，一般不会这么去统计，现在统计一下刚刚加进去的那个 <code>nodes</code> 五分钟之内 <code>CPU</code> 平均使用率是多少，还是得写 <code>PromSQL</code>，大概是这样，</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">100 - irate(node_cpu_seconds_total&#123;mode="idle"&#125;[5m])*100</span><br></pre></td></tr></table></figure><p><code>node_cpu_seconds_total{mode=&quot;idle&quot;}[5m]</code> 这一段是统计出了服务器最近 5 分钟 <code>CPU</code> 的空闲率，执行之后是这种效果，</p><p><img src="/" alt="img" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/wangyangyangisme/CDN@latest/blog/microserive/prometheus24.png"></p><p>这是五分钟之内所有值，然后使用了 <code>irate</code> 函数来统计它的平均值，转化成了百分比，乘了一百，所以执行结果如下。</p><p><img src="/" alt="img" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/wangyangyangisme/CDN@latest/blog/microserive/prometheus25.png"></p><p>这就是所有 <code>CPU</code> 的空闲率了，我要取的是所有 CPU 的使用率，所以又一百减去了空闲率的值就是使用率了，所以上面第一条 <code>sql</code> 执行发回的结果如下。</p><p>​    </p><p><img src="/" alt="img" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/wangyangyangisme/CDN@latest/blog/microserive/prometheus26.png"></p><p>这就是五分钟之内总的 <code>CPU</code> 的平均使用率了，我的那个节点就是四核 <code>CPU</code>，每个都被列出来了，真鸡儿麻烦，再看一下内存使用率，和上面其实一样，值都有了，求出他的百分比就行了，</p><h4 id="查询内存使用率"><a href="#查询内存使用率" class="headerlink" title="查询内存使用率"></a>查询内存使用率</h4><p><code>linux</code> 内核有一个内存缓存机制，所以 <code>buff/cache</code> 的占用不算是已被使用的物理内存，所以计算方式就是将这三个值加到一起就是剩余内存了，</p><p><img src="/" alt="img" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/wangyangyangisme/CDN@latest/blog/microserive/prometheus27.png"></p><p><code>sql</code> 的话这样写，直接查一下，</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node_memory_MemFree_bytes+node_memory_Cached_bytes+node_memory_Buffers_bytes</span><br></pre></td></tr></table></figure><p><img src="/" alt="img" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/wangyangyangisme/CDN@latest/blog/microserive/prometheus28.png"></p><p>这就是总共剩余的内存，单位是 <code>bite</code>，现在我要计算使用内存百分比，和上面看 <code>CPU</code> 使用率的方法一致，<code>sql</code> 如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">100 - (node_memory_MemFree_bytes+node_memory_Cached_bytes+node_memory_Buffers_bytes) / node_memory_MemTotal_bytes *100</span><br></pre></td></tr></table></figure><p><img src="/" alt="img" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/wangyangyangisme/CDN@latest/blog/microserive/prometheus29.png"></p><p>下面看看硬盘使用率</p><h4 id="查询硬盘使用率"><a href="#查询硬盘使用率" class="headerlink" title="查询硬盘使用率"></a>查询硬盘使用率</h4><p>你的磁盘和挂载点可能不止一个，先看一下目前收集到的信息，</p><p>​    </p><p><img src="/" alt="img" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/wangyangyangisme/CDN@latest/blog/microserive/prometheus30.png"></p><p>所以就要指定分区进行计算了，所以匹配这里写了一个正则去匹配你挂载的磁盘，如下</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">100- (node_filesystem_free_bytes&#123;mountpoint="/",fstype=~"ext4|xfs"&#125; / node_filesystem_size_bytes&#123;mountpoint="/",fstype=~"ext4|xfs"&#125; *100)</span><br></pre></td></tr></table></figure><p><code>node_filesystem_size_bytes</code> 查的是 <code>/</code> 总大小，<code>node_filesystem_free_bytes</code> 查的是剩余大小，只匹配 <code>ext4&amp;xfs</code> 类型的，像是什么 <code>tmpfs&amp;shm</code> 类型的都不匹配，还是算出了剩余的百分比，所以执行后的结果是这样，</p><p>​    </p><p><img src="/" alt="img" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/wangyangyangisme/CDN@latest/blog/microserive/prometheus31.png"></p><p><img src="/" alt="img" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/wangyangyangisme/CDN@latest/blog/microserive/prometheus32.png"></p><p>计算方式大概就是这样，现在还没涉及到图形展示这一块，下面看一下获取系统服务运行状态。</p><h4 id="查询系统服务运行状态"><a href="#查询系统服务运行状态" class="headerlink" title="查询系统服务运行状态"></a>查询系统服务运行状态</h4><p>就是监控系统服务运行状态，说白了就是监控以 <code>systemctl</code> 启动的服务，现在监控一下这个，<code>node_exports</code> 就支持对这种服务进行监控，目前还没有启用这个功能，现在启动一下撒，直接去改 <code>node_exports</code> 的启动文件，加两条参数即可。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@kubeadm-node ~]# cat /usr/lib/systemd/system/node_exporter.service </span><br><span class="line">[Unit]</span><br><span class="line">Description=node_exporter</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Restart=on-failure</span><br><span class="line">ExecStart=/usr/local/node_exporter/node_exporter --collector.systemd --collector.systemd.unit-whitelist=(docker|sshd).service</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure><p>第二段就是制定我要监控哪些系统服务，我写了 <code>docker&amp;sshd</code>，重启后可以去查询了，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@kubeadm-node ~]<span class="comment"># systemctl daemon-reload         </span></span><br><span class="line">[root@kubeadm-node ~]<span class="comment"># systemctl restart node_exporter.service</span></span><br></pre></td></tr></table></figure><p>我查一下当前 <code>docker&amp;sshd</code> 的运行状态是什么，可以直接这样写了，</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node_systemd_unit_state&#123;exported_name=~"(docker|sshd).service"&#125;</span><br></pre></td></tr></table></figure><p><img src="/" alt="img" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/wangyangyangisme/CDN@latest/blog/microserive/prometheus33.png"></p><p>目前 <code>state=active</code> 的值为 <code>0</code>，说明正常运行，所以之后写告警规则的时候就去判断这个值是不是 <code>1</code>，如果不是就要进行某些操作了，下面装一下 <code>grafana</code> 吧</p><h3 id="部署-grafana"><a href="#部署-grafana" class="headerlink" title="部署 grafana"></a>部署 grafana</h3><p><code>grafana</code> 就是一个图形展示系统，他主要是对度量指标进行分析可视化，他本身不会存储任何数据，他只会展示数据库里面的数据，支持很多类型的数据库，<a href="https://grafana.com/" target="_blank" rel="noopener">官网</a>，刚好我装有 <code>docker</code>，其实目前在操作的这两台服务是一个 <code>k8s</code> 集群，用 <code>kubeadm</code> 启动的，所以我直接用 <code>docker</code> 启动了，还是写个 <code>deployment</code>，算了直接用 <code>docker</code> 命令启吧，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@kubeadm-node ~]<span class="comment"># docker run \</span></span><br><span class="line">&gt; -u 0 \</span><br><span class="line">&gt; -d \</span><br><span class="line">&gt; -p 3000:3000  \</span><br><span class="line">&gt; --name=grafana   \</span><br><span class="line">&gt; -v /var/lib/grafana:/var/lib/grafana \</span><br><span class="line">&gt; grafana/grafana</span><br></pre></td></tr></table></figure><p>这样就行了，直接访问 <code>3000</code> 端口就好了，用户名密码默认 <code>admin/admin</code>，初次登陆会让你修改密码，就可以看到主页了，然后直接添加数据源，把 <code>prometheus</code> 加进去，保存就行了，</p><p>​    </p><p><img src="/" alt="img" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/wangyangyangisme/CDN@latest/blog/microserive/grafana1.png"></p><p>然后直接导入一个仪表盘进来吧，<code>ID</code> 是 <code>9276</code>，大概是这种效果，</p><p><img src="/" alt="img" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/wangyangyangisme/CDN@latest/blog/microserive/grafana2.png"></p><p>然后网络带宽那里没数据，我看了一下他的 <code>sql</code>，只需要将 <code>$nic</code> 改为你的网卡名就有数据了，所以现在监控 <code>linux</code> 服务器是没问题了，下面试试监控 <code>docker</code>。</p><h3 id="监控-docker"><a href="#监控-docker" class="headerlink" title="监控 docker"></a>监控 docker</h3><p>想要监控 <code>docker</code> 需要用到名为 <code>cadvisor</code> 的工具，是谷歌开源的，它用于收集正在运行的容器资源使用和性能信息，<a href="https://github.com/google/cadvisor" target="_blank" rel="noopener">github</a> 地址，你需要在要监控的服务器上部署 <code>cadvisor</code>，直接用 <code>docker</code> 去启动就完了，命令如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">docker run \</span><br><span class="line">  --volume=/:/rootfs:ro \</span><br><span class="line">  --volume=/var/run:/var/run:ro \</span><br><span class="line">  --volume=/sys:/sys:ro \</span><br><span class="line">  --volume=/var/lib/docker/:/var/lib/docker:ro \</span><br><span class="line">  --volume=/dev/disk/:/dev/disk:ro \</span><br><span class="line">  --publish=8080:8080 \</span><br><span class="line">  --detach=<span class="literal">true</span> \</span><br><span class="line">  --name=cadvisor \</span><br><span class="line">  google/cadvisor:latest</span><br></pre></td></tr></table></figure><p>容器启动后也是会暴露一个指标接口，默认是 <code>8080/metrics</code>，这里就不访问了，下一步就是加入到普罗米修斯中进行监控了，去改他的配置文件，静态配置一个吧，</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">job_name:</span> <span class="string">'docker'</span></span><br><span class="line">  <span class="attr">static_configs:</span> </span><br><span class="line">  <span class="bullet">-</span> <span class="attr">targets:</span> <span class="string">['192.168.1.248:8080']</span></span><br></pre></td></tr></table></figure><p>加完直接重载，页面直接导入一个图表吧，<code>ID</code> 是 <code>193</code>，效果是这样的，</p><p><img src="/" alt="img" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/wangyangyangisme/CDN@latest/blog/microserive/grafana3.png"></p><p>主要就是监控容器的 <code>CPU</code> 内存网络流量的，都可看到，目前我 <code>248</code> 就运行了六个容器，就是这样，下面在看看监控 <code>mysql</code></p><h3 id="监控-mysql"><a href="#监控-mysql" class="headerlink" title="监控 mysql"></a>监控 mysql</h3><p>监控 <code>mysql</code> 就会用到 <code>mysql_exporter</code>，这个也能在官网下到，也就是<a href="https://prometheus.io/download/#mysqld_exporter" target="_blank" rel="noopener">这里</a>，这个东西需要你安装到运行 <code>mysql</code> 的实例上，本地的 <code>mysql</code> 比较多，我随便找了一个扔了上去，先去 <code>mysql</code> 创建一个用户吧，这个程序需要连接明月三千里才能获取到指标。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; CREATE USER 'exporter'@'localhost' IDENTIFIED BY 'exporter';</span><br><span class="line">Query OK, 0 rows affected (0.02 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; GRANT PROCESS, REPLICATION CLIENT, SELECT ON *.* TO 'exporter'@'localhost';</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; flush privileges;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select user,host from mysql.user;</span><br></pre></td></tr></table></figure><p><img src="/" alt="img" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/wangyangyangisme/CDN@latest/blog/microserive/grafana4.png"></p><p>用户创建好了去解压包吧，</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@mysql ~]# tar zxf mysqld_exporter-0.11.0.linux-amd64.tar.gz -C /usr/local/ &amp;&amp; cd /usr/local/</span><br><span class="line">[root@mysql local]# mv mysqld_exporter-0.11.0.linux-amd64/ mysqld_exporter &amp;&amp; cd mysqld_exporter</span><br></pre></td></tr></table></figure><p>需要写一个文件，<code>mysqld_exporter</code> 直接读这个文件就可以连接 <code>mysql</code> 了，</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@mysql mysqld_exporter]# cat .my.cnd</span><br><span class="line">[client]</span><br><span class="line">user=exporter</span><br><span class="line">password=exporter</span><br></pre></td></tr></table></figure><p>文件有了，在启动的时候指定一下读取这个文件，直接启动</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@mysql mysqld_exporter]# ./mysqld_exporter --config.my-cnf=.my.cnf</span><br></pre></td></tr></table></figure><p><img src="/" alt="img" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/wangyangyangisme/CDN@latest/blog/microserive/grafana5.png"></p><p>现在把这个加到普罗米修斯中，</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">job_name:</span> <span class="string">'mysql'</span></span><br><span class="line">  <span class="attr">static_configs:</span> </span><br><span class="line">  <span class="bullet">-</span> <span class="attr">targets:</span> <span class="string">['192.168.1.126:9104']</span></span><br></pre></td></tr></table></figure><p>然后导入一个仪表盘，<code>ID</code> 为 <code>7362</code>，看页面，</p><p><img src="/" alt="img" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/wangyangyangisme/CDN@latest/blog/microserive/grafana6.png"></p><p>还是有些空值，而且官方也说了 <code>5.6</code> 版本有些不支持，我看了一下 <code>Buffer Pool Size of Total RAM</code> 的 <code>sql</code>，是这样写的，</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(mysql_global_variables_innodb_buffer_pool_size&#123;instance="$host"&#125; * 100) / on (instance) node_memory_MemTotal_bytes&#123;instance="$host"&#125;</span><br></pre></td></tr></table></figure><p>现在应该能看的差不多了，他去查了 <code>mysql</code> 节点的总内存，但是我明月三千里节点并没有装 <code>node_exports</code>，所以就没数据了，总之支持采集的数据和仪表盘模板很多，自行琢磨吧，上面只是最简单的几个例子，下面来看看告警这一块的东西。</p><h2 id="alertmanager"><a href="#alertmanager" class="headerlink" title="alertmanager"></a>alertmanager</h2><p>普罗米修斯本身是不支持告警的，告警是由 <code>alertmanager</code> 这个组件完成的，普罗米修斯将告警收集起来会推送给 <code>alertmanager</code>，<code>alertmanager</code> 接收到告警后决定怎么去处理这些告警，应该发给谁，下面先部署一下 <code>alertmanager</code> 吧，我直接下载了，在普罗米修斯服务器上，</p><h3 id="部署-alertmanager"><a href="#部署-alertmanager" class="headerlink" title="部署 alertmanager"></a>部署 alertmanager</h3><p><code>alertmanager</code> 没必要和普罗米修斯放在一个服务器上，他们之间能通讯就可以了，我目前资源紧张就扔到一起了，直接 <code>wget</code> 了，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@rj-bai ~]<span class="comment"># wget https://github.com/prometheus/alertmanager/releases/download/v0.18.0/alertmanager-0.18.0.linux-amd64.tar.gz</span></span><br></pre></td></tr></table></figure><p>让他先下着，聊一下普罗米修斯和 <code>alertmanager</code> 是怎么通讯的，首先你需要在 <code>prometheus</code> 中定义你的监控规则，说白了就是写一个触发器，某个值超过了我设置的阈值我就要告警了，触发告警之后 <code>prometheus</code> 会推送当前的告警规则到 <code>alertmanager</code>，<code>alertmanager</code> 收到了会进行一系列的流程处理，然后发送到接收人手里，他的处理规则也是很复杂的，后面会说，现在也下载完了，解压</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@rj-bai ~]# tar zxf alertmanager-0.18.0.linux-amd64.tar.gz </span><br><span class="line">[root@rj-bai ~]# mv alertmanager-0.18.0.linux-amd64 /usr/local/alertmanager &amp;&amp; cd /usr/local/alertmanager &amp;&amp; ls</span><br><span class="line">alertmanager  alertmanager.yml  amtool  LICENSE  NOTICE</span><br></pre></td></tr></table></figure><p>有两个二进制文件，分别是启动程序和一个工具，还有一个主配置文件，先来了解一下他的主配置文件，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">global:</span><br><span class="line">  resolve_timeout: 5m</span><br></pre></td></tr></table></figure><p>全局配置，设置解析超时时间，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">route:</span><br><span class="line">  group_by: [&#39;alertname&#39;]      ##alertmanager中的分组，选哪个标签作为分组的依据</span><br><span class="line">  group_wait: 10s              ##分组等待时间，拿到第一条告警后等待10s，如果有其他的一起发送出去</span><br><span class="line">  group_interval: 10s          ##各个分组之前发搜告警的间隔时间</span><br><span class="line">  repeat_interval: 1h          ##重复告警时间，默认1小时</span><br><span class="line">  receiver: &#39;web.hook&#39;         ##接收者</span><br></pre></td></tr></table></figure><p>这里是配置告警的，配置告警怎么发送，怎么来分配，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">receivers:</span><br><span class="line">- name: &#39;web.hook&#39;</span><br><span class="line">  webhook_configs:</span><br><span class="line">  - url: &#39;http:&#x2F;&#x2F;127.0.0.1:5001&#x2F;&#39;</span><br></pre></td></tr></table></figure><p>这里是配置告警的接收者，我要发送给谁，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">inhibit_rules:</span><br><span class="line">  - source_match:</span><br><span class="line">      severity: &#39;critical&#39;</span><br><span class="line">    target_match:</span><br><span class="line">      severity: &#39;warning&#39;</span><br><span class="line">    equal: [&#39;alertname&#39;, &#39;dev&#39;, &#39;instance&#39;]</span><br></pre></td></tr></table></figure><p>这里用于配置告警收敛的，主要就是减少发送告警，来发送一些关键的，所以先把这段注释了吧，暂时用不到，之后会用到，所以基于这个配置文件改改，暂时先发送 <code>email</code> 吧，所以改完的配置文件如下，</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">[root@rj-bai</span> <span class="string">/usr/local/alertmanager]#</span> <span class="string">cat</span> <span class="string">alertmanager.yml</span> </span><br><span class="line"><span class="attr">global:</span></span><br><span class="line">  <span class="attr">resolve_timeout:</span> <span class="string">5m</span></span><br><span class="line">  <span class="attr">smtp_smarthost:</span> <span class="string">'smtp.163.com:25'</span>         <span class="comment">#smtp服务地址</span></span><br><span class="line">  <span class="attr">smtp_from:</span> <span class="string">'xxx@163.com'</span>                  <span class="comment">#发送邮箱</span></span><br><span class="line">  <span class="attr">smtp_auth_username:</span> <span class="string">'xxx@163.com'</span>         <span class="comment">#认证用户名</span></span><br><span class="line">  <span class="attr">smtp_auth_password:</span> <span class="string">'xxxx'</span>                <span class="comment">#认证密码</span></span><br><span class="line">  <span class="attr">smtp_require_tls:</span> <span class="literal">false</span>                   <span class="comment">#禁用tls</span></span><br><span class="line"></span><br><span class="line"><span class="attr">route:</span></span><br><span class="line">  <span class="attr">group_by:</span> <span class="string">['alertname']</span></span><br><span class="line">  <span class="attr">group_wait:</span> <span class="string">10s</span></span><br><span class="line">  <span class="attr">group_interval:</span> <span class="string">10s</span></span><br><span class="line">  <span class="attr">repeat_interval:</span> <span class="string">1m</span></span><br><span class="line">  <span class="attr">receiver:</span> <span class="string">'email'</span>                      <span class="comment">#定义接受告警组名</span></span><br><span class="line"><span class="attr">receivers:</span>                                  </span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">'email'</span>                          <span class="comment">#定义组名</span></span><br><span class="line">  <span class="attr">email_configs:</span>                         <span class="comment">#配置邮件</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">to:</span> <span class="string">'xx@xxx.com'</span>                     <span class="comment">#收件人</span></span><br></pre></td></tr></table></figure><p>保存后检查一下这个文件有没有问题，命令如下，</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@rj-bai /usr/local/alertmanager]# ./amtool check-config alertmanager.yml </span><br><span class="line">Checking 'alertmanager.yml'  SUCCESS</span><br></pre></td></tr></table></figure><p>然后去启动吧，还是加到系统服务中吧，</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[root@rj-bai /usr/local/alertmanager]# cat &gt; /usr/lib/systemd/system/alertmanager.service &lt;&lt;OEF </span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> [Unit]</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> Description=alertmanager</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> </span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> [Service]</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> Restart=on-failure</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> ExecStart=/usr/<span class="built_in">local</span>/alertmanager/alertmanager --config.file=/usr/<span class="built_in">local</span>/alertmanager/alertmanager.yml</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> </span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> [Install]</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> WantedBy=multi-user.target</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> OEF</span></span><br><span class="line">[root@rj-bai /usr/local/alertmanager]# systemctl start alertmanager</span><br></pre></td></tr></table></figure><p>现在 <code>alertmanager</code> 是装完了，需要和 <code>prometheus</code> 融合一下，需要配置两部分，分别如下，</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">alerting:</span></span><br><span class="line">  <span class="attr">alertmanagers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">static_configs:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">targets:</span></span><br><span class="line">       <span class="bullet">-</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:9093</span>   <span class="comment">##配置alertmanager地址，我的在本机</span></span><br><span class="line"></span><br><span class="line"><span class="attr">rule_files:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">"rules/*.yml"</span>         <span class="comment">##配置告警规则的文件</span></span><br></pre></td></tr></table></figure><p>配置这两项就够了，保存之后创建 <code>rules</code> 目录，接下来就可以配置告警规则了。</p><h3 id="配置告警规则并邮件通知"><a href="#配置告警规则并邮件通知" class="headerlink" title="配置告警规则并邮件通知"></a>配置告警规则并邮件通知</h3><p>我直接在官方复制过来了一个例子顺便改了改，如下，</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">[root@rj-bai</span> <span class="string">/usr/local/prometheus/rules]#</span> <span class="string">cat</span> <span class="string">example.yml</span></span><br><span class="line"><span class="attr">groups:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">exports.rules</span>     <span class="comment">##定义这组告警的组名，同性质的，都是监控实例exports是否开启的模板</span></span><br><span class="line">  <span class="attr">rules:</span></span><br><span class="line"></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">alert:</span> <span class="string">采集器凉了</span>     <span class="comment">## 告警名称</span></span><br><span class="line">    <span class="attr">expr:</span> <span class="string">up</span> <span class="string">==</span> <span class="number">0</span>        <span class="comment">## 告警表达式，监控up指标，如果等于0就进行下面的操作</span></span><br><span class="line">    <span class="attr">for:</span> <span class="string">1m</span>              <span class="comment">## 持续一分钟为0进行告警</span></span><br><span class="line">    <span class="attr">labels:</span>              <span class="comment">## 定义告警级别</span></span><br><span class="line">      <span class="attr">severity:</span> <span class="string">ERROR</span></span><br><span class="line">    <span class="attr">annotations:</span>         <span class="comment">## 定义了告警通知怎么写，默认调用了&#123;$labels.instance&amp;$labels.job&#125;的值</span></span><br><span class="line">      <span class="attr">summary:</span> <span class="string">"实例 <span class="template-variable">&#123;&#123; $labels.instance &#125;&#125;</span> 采集器凉了撒"</span></span><br><span class="line">      <span class="attr">description:</span> <span class="string">"实例 <span class="template-variable">&#123;&#123; $labels.instance &#125;&#125;</span> job 名为 <span class="template-variable">&#123;&#123; $labels.job &#125;&#125;</span> 的采集器凉了有一分钟了撒"</span></span><br></pre></td></tr></table></figure><p>每个实例都会有一个 <code>up</code> 的指标，上面的标签名 <code>job</code> 都能看到，用 <code>sql</code> 去查一下，</p><p>​    </p><p><img src="/" alt="img" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/wangyangyangisme/CDN@latest/blog/microserive/prometheus34.png"></p><p>采集器在开启状态下返回值就是 <code>1</code>，如果采集器出现问题没启动或是什么别的异常都会返回 <code>0</code>，<code>0</code> 就是代表异常了，所以说白了就是那条规则就是监控所有实例的 <code>up</code> 指标，如果指标值为 <code>0</code> 且持续时间超过一分钟我就要告警了，保存吧，直接重启 <code>prometheus</code> 吧，重启之后可以在 <code>web</code> 控制台看到你配置的规则了，</p><p><img src="/" alt="img" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/wangyangyangisme/CDN@latest/blog/microserive/prometheus35.png"></p><p>既然配置完了，验证一下吧，随便关掉一个采集器，等邮件就行了，我把明月三千里的关掉了，然后发现有一条告警处于 <code>PENDING</code> 状态，他已经准备去通知 <code>alertmanager</code> 了，</p><p><img src="/" alt="img" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/wangyangyangisme/CDN@latest/blog/microserive/prometheus36.png"></p><p>一分钟之后我收到邮件了，长这样，</p><p><img src="/" alt="img" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/wangyangyangisme/CDN@latest/blog/microserive/prometheus37.png"></p><p>如果问题没解决他每分钟都会给你发一封邮件，刚刚配置了，发送邮件的等待时间一会会细说一下，我再停一个，我再把 <code>docker</code> 停了，看看他发出的邮件是什么样的，</p><p><img src="/" alt="img" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/wangyangyangisme/CDN@latest/blog/microserive/prometheus38.png"></p><p>这里两条告警被合并到一个邮件里发出来了，这就是做了分组，如果你有同类告警的，也就是根据 <code>alertname</code>去区分的，都会给你合并，<code>mysql&amp;docker</code> 被合并到一起了，再看一下他还是支持哪些方式来告警，看<a href="https://prometheus.io/docs/alerting/configuration/" target="_blank" rel="noopener">这里</a>吧，拉到最下面可以看到支持微信，钉钉目前是不支持的，有第三方的，我将来会对接企业微信的，暂时现用邮件吧，下面看看 <code>alertmanager</code> 的告警状态吧。</p><h3 id="告警状态"><a href="#告警状态" class="headerlink" title="告警状态"></a>告警状态</h3><p>目前 <code>alertmanager</code> 告警状态分为三种，如下</p><table><thead><tr><th>值</th><th>说明</th></tr></thead><tbody><tr><td>Inactive</td><td>什么都没有发生</td></tr><tr><td>Pending</td><td>已触发阈值，但未满足告警持续时间，for 时间</td></tr><tr><td>Firing</td><td>已触发阈值且满足告警持续时间，通知 alertmanager 你可以发送告警了</td></tr></tbody></table><p>在这个阶段是有个时间的，并不是出现问题告警会马上发出去，这个时间包含了数据采集时间、告警评估时间，这两个时间是在 <code>prometheus</code> 中配置的，也就是这里，</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">global:</span></span><br><span class="line">  <span class="attr">scrape_interval:</span>     <span class="string">15s</span> </span><br><span class="line">  <span class="attr">evaluation_interval:</span> <span class="string">15s</span></span><br></pre></td></tr></table></figure><p>目前是十五秒采集一次数据，评估告警规则时间也是十五秒，这个评估告警规则的时间就是我每隔多长时间要进行一次评估是否到达的阈值了，说白了这东西的目的就是为了减少告警的次数，更加精确的判断当前的状态是不是 <code>ok</code> 的，下面在看看告警的分配</p><h3 id="告警的分配"><a href="#告警的分配" class="headerlink" title="告警的分配"></a>告警的分配</h3><p>具体告警要怎么去分配，也是在 <code>alertmanager</code> 中配置的，也就是这一段，</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">route:</span></span><br><span class="line">  <span class="attr">group_by:</span> <span class="string">['alertname']</span></span><br><span class="line">  <span class="attr">group_wait:</span> <span class="string">10s</span></span><br><span class="line">  <span class="attr">group_interval:</span> <span class="string">10s</span></span><br><span class="line">  <span class="attr">repeat_interval:</span> <span class="string">1m</span></span><br><span class="line">  <span class="attr">receiver:</span> <span class="string">'email'</span></span><br></pre></td></tr></table></figure><p>这就是设置告警的分发策略了，这个 <code>route</code> 可以拆分成多个子路由，目前所有的告警都会发送到名为 <code>email</code> 的接收器里面，<code>email</code> 接收器的规则也是在配置文件中指定的，也就是这一段，</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">receivers:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">'email'</span></span><br><span class="line">  <span class="attr">email_configs:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">to:</span> <span class="string">'xx@xxx.com'</span></span><br></pre></td></tr></table></figure><p>接收器目前只有一个名为 <code>email</code> 的，也可以有多个，如果你有什么特殊需求，需要将不同类型的告警发送给不同的人，就需要配置多个接收器去区分了，如下，</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">global:</span></span><br><span class="line">  <span class="attr">resolve_timeout:</span> <span class="string">5m</span></span><br><span class="line">  <span class="attr">smtp_smarthost:</span> <span class="string">'smtp.163.com:25'</span></span><br><span class="line">  <span class="attr">smtp_from:</span> <span class="string">'xxx@163.com'</span></span><br><span class="line">  <span class="attr">smtp_auth_username:</span> <span class="string">'xxx@163.com'</span></span><br><span class="line">  <span class="attr">smtp_auth_password:</span> <span class="string">'xxx'</span></span><br><span class="line">  <span class="attr">smtp_require_tls:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="attr">route:</span></span><br><span class="line">  <span class="attr">receiver:</span> <span class="string">'default-receiver'</span>                  <span class="comment">##定义默认接收器名，如果其他的匹配不到走这个</span></span><br><span class="line">  <span class="attr">group_wait:</span> <span class="string">30s</span></span><br><span class="line">  <span class="attr">group_interval:</span> <span class="string">5m</span></span><br><span class="line">  <span class="attr">repeat_interval:</span> <span class="string">4h</span></span><br><span class="line">  <span class="attr">group_by:</span> <span class="string">[cluster,</span> <span class="string">alertname]</span>                <span class="comment">##分组设置</span></span><br><span class="line">  <span class="attr">routes:</span>                                       <span class="comment">##子路由</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">receiver:</span> <span class="string">'database-pager'</span>                  <span class="comment">##定义接收器名字          </span></span><br><span class="line">    <span class="attr">group_wait:</span> <span class="string">10s</span>                             <span class="comment">##分组设置</span></span><br><span class="line">    <span class="attr">match_re:</span>                                   <span class="comment">##正则匹配</span></span><br><span class="line">      <span class="attr">service:</span> <span class="string">mysql|cassandra</span>                  <span class="comment">##他会接收标签service值为mysql&amp;&amp;cassandra的告警</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">receiver:</span> <span class="string">'frontend-pager'</span>                  <span class="comment">##接收器名</span></span><br><span class="line">    <span class="attr">group_by:</span> <span class="string">[product,</span> <span class="string">environment]</span>            <span class="comment">##分组设置</span></span><br><span class="line">    <span class="attr">match:</span>                                      <span class="comment">##直接匹配</span></span><br><span class="line">      <span class="attr">team:</span> <span class="string">frontend</span>                            <span class="comment">##匹配标签team值为frontend的告警</span></span><br><span class="line"><span class="attr">receivers:</span>                                      <span class="comment">##定义接收器</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">'default-receiver'</span>                      <span class="comment">##接收器名字</span></span><br><span class="line">  <span class="attr">email_configs:</span>                                <span class="comment">##邮件接口</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">to:</span> <span class="string">'xxx.xx.com'</span>                            <span class="comment">##接收人，下面以此类推</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">'database-pager'</span></span><br><span class="line">  <span class="attr">email_configs:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">to:</span> <span class="string">'xxx.xx.com'</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">'frontend-pager'</span></span><br><span class="line">  <span class="attr">email_configs:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">to:</span> <span class="string">'xxx@.xx.com'</span></span><br></pre></td></tr></table></figure><p>我就不掩饰了，配置其实很简单，演示很麻烦撒，算了算了，过，下面看一哈告警收敛</p><h3 id="告警收敛"><a href="#告警收敛" class="headerlink" title="告警收敛"></a>告警收敛</h3><p>收敛就是尽量压缩告警邮件的数量，太多了谁都会懵逼，可能有些关键的被淹没了，<code>alertmanager</code> 中有很多收敛机制，最主要的就是分组抑制静默，<code>alertmanager</code> 收到告警之后他会先进行分组，然后进入通知队列，这个队列会对通知的邮件进行抑制静默，再根据 <code>router</code> 将告警路由到不同的接收器，这就是 <code>alertmanager</code> 收到一个告警后经历的阶段，只是一个大概的情况，下面深入了解一下这几个阶段到底是什么原理怎么去配置，先来简单看一下他们的定义</p><table><thead><tr><th>机制</th><th>说明</th></tr></thead><tbody><tr><td>分组 (group)</td><td>将类似性质的告警合并为单个进行通知</td></tr><tr><td>抑制 (Inhibition)</td><td>当告警发生后，停止重复发送由此告警引发的其他告警</td></tr><tr><td>静默 (Silences)</td><td>是一种简单的特定时间静音提醒的机制</td></tr></tbody></table><h4 id="分组"><a href="#分组" class="headerlink" title="分组"></a>分组</h4><p>举个例子，比如说我在阿里云有 <code>10</code> 台服务器，但是我忘续费了，结果服务器到期都被停掉了 (真实发生过)，这时候 <code>node_exports</code> 肯定也无法访问了，服务器都停了，这时候普罗米修斯发现这 <code>10</code> 个服务器都凉了，我要准备通知 <code>alertmanager</code> 告警了，在不做分组的情况下你的告警媒介会有十条信息发出来，这种情况下我们可以他这些信息合并到一起撒，一条信息列出哪些服务器凉了。</p><p>其实分组设置最开始的时候我就做了，这一段就是设置分组的，</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">route:</span></span><br><span class="line">  <span class="attr">group_by:</span> <span class="string">['alertname']</span></span><br><span class="line">  <span class="attr">group_wait:</span> <span class="string">10s</span></span><br><span class="line">  <span class="attr">group_interval:</span> <span class="string">10s</span></span><br><span class="line">  <span class="attr">repeat_interval:</span> <span class="string">1m</span></span><br></pre></td></tr></table></figure><p>这里配置了分组的依据，默认就是 <code>alertname</code>，这个名字可以随便写的，做了分组之后他会去匹配你告警时的名字，告警的名字是在这里配置的，</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">alert:</span> <span class="string">采集器凉了</span></span><br></pre></td></tr></table></figure><p>如果是相同名字的告警在一定时间内出现多条，这个一定时间指的就是 <code>group_wait</code> 的时间，那么多条就会合并成一条告警信息发出来，这个之前就配置了，所以在我停掉 <code>mysql&amp;docker</code> 采集器之后他就把这两条告警合并成一条信息发了出来，也就是这张图，上面贴过了。</p><p><img src="/" alt="img" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/wangyangyangisme/CDN@latest/blog/microserive/prometheus39.png"></p><p>这两条的告警名字都是采集器凉了撒，而且在十秒钟之内出现了两条，所以就被合并成一条发出来了，分组的目的就是为了减少告警信息的数量，同类告警聚合，所以现在总结一下配置分组的参数。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">group_by:</span> <span class="string">['alertname']</span>  <span class="comment">#根据标签进行alert分组，可以写多个</span></span><br><span class="line"><span class="attr">group_wait:</span> <span class="string">10s</span>          <span class="comment">#发送告警等待时间，</span></span><br><span class="line"><span class="attr">group_interval:</span> <span class="string">10s</span>      <span class="comment">#分组告警信息间隔时间，譬如两组，第一组发送后等待十秒发送第二组</span></span><br><span class="line"><span class="attr">repeat_interval:</span> <span class="string">1m</span>      <span class="comment">#重复发送告警时间，时间不要太短，也不要太长</span></span><br></pre></td></tr></table></figure><h4 id="抑制"><a href="#抑制" class="headerlink" title="抑制"></a>抑制</h4><p>他的主要作用就是消除冗余告警，我们会受到一个关键的告警信息，这个也是在 <code>alertmanager</code> 中配置的，我标签只留了一个，</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">inhibit_rules:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">source_match:</span>          </span><br><span class="line">      <span class="attr">severity:</span> <span class="string">'critical'</span></span><br><span class="line">    <span class="attr">target_match:</span></span><br><span class="line">      <span class="attr">severity:</span> <span class="string">'warning'</span></span><br><span class="line">    <span class="attr">equal:</span> <span class="string">['instance']</span></span><br></pre></td></tr></table></figure><p>这段配置意思就是当我收到一个告警级别为 <code>critical</code> 时，他就会抑制掉 <code>warning</code> 这个级别的告警，这个告警等级是在你编写规则的时候定义的，最后一行就是要对哪些告警做抑制，通过标签匹配的，我这里只留了一个 <code>instance</code>，举个最简单的例子，当现在 <code>alertmanager</code> 先收到一条 <code>critical</code>、又收到一条 <code>warning</code> 且 <code>instance</code> 值一致的两条告警他的处理逻辑是怎样的。</p><p>我现在监控 <code>nginx</code>，<code>nginx</code> 宕掉的告警级别为 <code>warning</code>，宿主机宕掉的告警级别为 <code>critical</code>，譬如说现在我跑 <code>nginx</code> 的服务器凉了，这时候 <code>nginx</code> 肯定也凉了，普罗米修斯发现后通知 <code>alertmanager</code>，普罗米修斯发过来的是两条告警信息，一条是宿主机凉了的，一条是 <code>nginx</code> 凉了的，<code>alertmanager</code> 收到之后，发现告警级别一条是 <code>critical</code>，一条是 <code>warning</code>，而且 <code>instance</code> 标签值一致，也就是说这是在一台机器上发生的，所以他就会只发一条 <code>critical</code> 的告警出来，<code>warning</code> 的就被抑制掉了，我们收到的就是服务器凉了的通知，大概就是这样，暂时不演示了。</p><h4 id="静默"><a href="#静默" class="headerlink" title="静默"></a>静默</h4><p>就是一个简单的特定时间静音提醒的机制，主要是使用标签匹配这一批不发送告警，譬如说我某天要对服务器进行维护，可能会涉及到服务器重启，在这期间肯定会有 <code>N</code> 多告警发出来，所以你可以子啊这期间配置一个静默，这类的告警就不要发了，我知道发生了啥子事情，配置静默就很简单了，直接在 <code>web</code> 页面配置就行了，<code>9093</code> 端口，</p><p>​    </p><p><img src="/" alt="img" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/wangyangyangisme/CDN@latest/blog/microserive/prometheus40.png"></p><p><img src="/" alt="img" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/wangyangyangisme/CDN@latest/blog/microserive/prometheus41.png"></p><p>选择开始时间结束时间，通过标签匹配去做，我匹配了 <code>job=docker</code> 的机器，创建，所以我先在把容器采集器停掉也不会有告警出来了，我就不停了，就是这样配置，比较简单，扯了一堆，是时候自己写一个告警规则了，结合上面一切的东西。</p><h2 id="编写告警规则例子"><a href="#编写告警规则例子" class="headerlink" title="编写告警规则例子"></a>编写告警规则例子</h2><p>来监控内存吧，内存使用率超过 <code>80</code> 我就要告警了，还是先需要写 <code>sql</code>，把我想要的值查出来，所以要查当前内存使用率大于百分之八十的 <code>sql</code> 如下，</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(node_memory_MemTotal_bytes - node_memory_MemFree_bytes - node_memory_Buffers_bytes - node_memory_Cached_bytes) / (node_memory_MemTotal_bytes )* 100 &gt; 80</span><br></pre></td></tr></table></figure><p>下面就是要写规则了，我写的规则如下，顺便把之前的规则也改了一下，</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">[root@rj-bai</span> <span class="string">/usr/local/prometheus/rules]#</span> <span class="string">cat</span> <span class="string">memory.yml</span> </span><br><span class="line"><span class="attr">groups:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">memeory_rules</span></span><br><span class="line">  <span class="attr">rules:</span></span><br><span class="line"></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">alert:</span> <span class="string">内存炸了</span></span><br><span class="line">    <span class="attr">expr:</span> <span class="string">(node_memory_MemTotal_bytes</span> <span class="bullet">-</span> <span class="string">node_memory_MemFree_bytes</span> <span class="bullet">-</span> <span class="string">node_memory_Buffers_bytes</span> <span class="bullet">-</span> <span class="string">node_memory_Cached_bytes)</span> <span class="string">/</span> <span class="string">(node_memory_MemTotal_bytes</span> <span class="string">)*</span> <span class="number">100</span> <span class="string">&gt;</span> <span class="number">80</span></span><br><span class="line">    <span class="attr">for:</span> <span class="string">1m</span></span><br><span class="line">    <span class="attr">labels:</span></span><br><span class="line">      <span class="attr">severity:</span> <span class="string">warning</span></span><br><span class="line">    <span class="attr">annotations:</span></span><br><span class="line">      <span class="attr">summary:</span> <span class="string">"<span class="template-variable">&#123;&#123; $labels.instance &#125;&#125;</span> 内存炸了"</span></span><br><span class="line">      <span class="attr">description:</span> <span class="string">"<span class="template-variable">&#123;&#123; $labels.instance &#125;&#125;</span> 内存炸了，当前使用率为 <span class="template-variable">&#123;&#123; $value &#125;&#125;</span>"</span></span><br></pre></td></tr></table></figure><p>这样就可以了，我又把明月三千里加入到监控，也就是安装了 <code>node_exports</code>，现在也能正常获取到使用率了，下面试试上面提到的那个告警分配，我要把明月三千里的告警信息发送到我另一个邮箱，<code>job</code> 名字 <code>mysql</code>，</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">job_name:</span> <span class="string">'mysql'</span></span><br><span class="line">  <span class="attr">static_configs:</span> </span><br><span class="line">  <span class="bullet">-</span> <span class="attr">targets:</span> <span class="string">['192.168.1.126:9104']</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">targets:</span> <span class="string">['192.168.1.126:9100']</span></span><br></pre></td></tr></table></figure><p>重启一下撒，能看到这些，</p><p><img src="/" alt="img" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/wangyangyangisme/CDN@latest/blog/microserive/prometheus42.png"></p><p><img src="/" alt="img" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/wangyangyangisme/CDN@latest/blog/microserive/prometheus43.png"></p><p>然后去配置一下告警的分配，我要把关于明月三千里的告警发送到另一个邮箱，所以这里改了一哈，</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">route:</span></span><br><span class="line">  <span class="attr">group_by:</span> <span class="string">['alertname']</span></span><br><span class="line">  <span class="attr">group_wait:</span> <span class="string">10s</span></span><br><span class="line">  <span class="attr">group_interval:</span> <span class="string">10s</span></span><br><span class="line">  <span class="attr">repeat_interval:</span> <span class="string">5m</span></span><br><span class="line">  <span class="attr">receiver:</span> <span class="string">'default-receiver'</span></span><br><span class="line">  <span class="attr">routes:</span> </span><br><span class="line">    <span class="bullet">-</span> <span class="attr">group_by:</span> <span class="string">['mysql']</span></span><br><span class="line">      <span class="attr">group_wait:</span> <span class="string">10s</span></span><br><span class="line">      <span class="attr">group_interval:</span> <span class="string">10s</span></span><br><span class="line">      <span class="attr">repeat_interval:</span> <span class="string">5m</span></span><br><span class="line">      <span class="attr">receiver:</span> <span class="string">'mysql-pager'</span></span><br><span class="line">      <span class="attr">match_re:</span></span><br><span class="line">        <span class="attr">job:</span> <span class="string">mysql</span></span><br><span class="line"></span><br><span class="line"><span class="attr">receivers:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">'default-receiver'</span></span><br><span class="line">  <span class="attr">email_configs:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">to:</span> <span class="string">'xxx@xx.com'</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">'mysql-pager'</span></span><br><span class="line">  <span class="attr">email_configs:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">to:</span> <span class="string">'xxx@xx.cn'</span></span><br><span class="line"></span><br><span class="line"><span class="attr">inhibit_rules:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">source_match:</span>          </span><br><span class="line">      <span class="attr">severity:</span> <span class="string">'critical'</span></span><br><span class="line">    <span class="attr">target_match:</span></span><br><span class="line">      <span class="attr">severity:</span> <span class="string">'warning'</span></span><br><span class="line">    <span class="attr">equal:</span> <span class="string">['instance']</span></span><br></pre></td></tr></table></figure><p>所以一会收到明月三千里的邮件是我 <code>cn</code> 的邮箱，这样就可以了撒，重启 <code>alertmanager</code>，为了让他发出告警邮件，我调一下阈值，改为百分之 <code>20</code>，所以我 <code>com</code> 收到的邮件如下，</p><p><img src="/" alt="img" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/wangyangyangisme/CDN@latest/blog/microserive/prometheus44.png"></p><p><code>cn</code> 收到的邮件如下</p><p><img src="/" alt="img" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/wangyangyangisme/CDN@latest/blog/microserive/prometheus45.png"></p><p>然后再试一下抑制，我再加一个监控项，我要监控 <code>TCP</code> 连接数，状态是 <code>ESTABLISHED</code> 的，超过 <code>300</code> 我就要告警了，定义告警级别为 <code>critical</code>，所以 <code>rule</code> 文件如下，</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">[root@rj-bai</span> <span class="string">/usr/local/prometheus/rules]#</span> <span class="string">cat</span> <span class="string">tcp-established.yml</span> </span><br><span class="line"><span class="attr">groups:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">tcp-established_rules</span></span><br><span class="line">  <span class="attr">rules:</span></span><br><span class="line"></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">alert:</span> <span class="string">TCP连接数过高</span></span><br><span class="line">    <span class="attr">expr:</span> <span class="string">node_sockstat_TCP_alloc</span> <span class="string">&gt;</span> <span class="number">300</span> </span><br><span class="line">    <span class="attr">for:</span> <span class="string">1m</span></span><br><span class="line">    <span class="attr">labels:</span></span><br><span class="line">      <span class="attr">severity:</span> <span class="string">critical</span></span><br><span class="line">    <span class="attr">annotations:</span></span><br><span class="line">      <span class="attr">summary:</span> <span class="string">"<span class="template-variable">&#123;&#123; $labels.instance &#125;&#125;</span> TCP连接数过高"</span></span><br><span class="line">      <span class="attr">description:</span> <span class="string">"<span class="template-variable">&#123;&#123; $labels.instance &#125;&#125;</span> TCP连接数过高，当前连接数 <span class="template-variable">&#123;&#123; $value &#125;&#125;</span>"</span></span><br></pre></td></tr></table></figure><p>重启后看页面，</p><p><img src="/" alt="img" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/wangyangyangisme/CDN@latest/blog/microserive/prometheus46.png"></p><p>有三条告警已经进入 <code>Pending</code> 状态了，没意外的话 <code>cn</code> 邮箱只有一条告诉你连接数过高的告警信息发出来了，内存使用率过高的就会被抑制，看一下，</p><p><img src="/" alt="img" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/wangyangyangisme/CDN@latest/blog/microserive/prometheus47.png"></p><p>所以这条已经被抑制了，</p><p><img src="/" alt="img" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/wangyangyangisme/CDN@latest/blog/microserive/prometheus48.png"></p><p><code>248</code> 服务器不受影响，<code>com</code> 邮箱还是会收到内存炸了的告警，</p><p><img src="/" alt="img" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/wangyangyangisme/CDN@latest/blog/microserive/prometheus49.png"></p><p>就是这样，你想编写其他的告警规则流程和上面是一样的，告警的分配和抑制不是必需的，自行琢磨吧，下一篇准备重写 <code>K8S</code> 监控方面的东西，了解这些东西之后之后就应该很简单了撒，本篇就这样，过。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;转载：&lt;a href=&quot;https://blog.rj-bai.com/post/158.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://blog.rj-bai.com/post/158.html&lt;/a&gt;&lt;
      
    
    </summary>
    
    
      <category term="microservice" scheme="http://wangyangyangisme.github.io/categories/microservice/"/>
    
    
  </entry>
  
  <entry>
    <title>docker管理工具</title>
    <link href="http://wangyangyangisme.github.io/2019/12/17/docker-docker%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/"/>
    <id>http://wangyangyangisme.github.io/2019/12/17/docker-docker管理工具/</id>
    <published>2019-12-17T02:21:57.811Z</published>
    <updated>2019-12-17T08:05:35.258Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.portainer.io/" target="_blank" rel="noopener">portainer</a> Portainer是Docker的图形化管理工具，提供状态显示面板、应用模板快速部署、容器镜像网络数据卷的基本操作（包括上传下载镜像，创建容器等操作）、事件日志显示、容器控制台操作、Swarm集群和服务等集中管理和操作、登录用户管理和控制等功能。功能十分全面，基本能满足中小型单位对容器管理的全部需求。</p><p><a href="https://www.rainbond.com/" target="_blank" rel="noopener">rainbond</a> Rainbond以应用为中心，通过“无侵入”架构,支撑应用开发、交付、运维，并可接管IaaS、虚拟机和物理服务器等各类底层资源。让用户专注于业务本身，不用关心底层复杂的技术。(k8s管理面板)</p><p><a href="https://rancher.com/" target="_blank" rel="noopener">rancher</a> Rancher是一个开源的企业级容器管理平台。通过Rancher，企业再也不必自己使用一系列的开源软件去从头搭建容器服务平台。Rancher提供了在生产环境中使用的管理Docker和Kubernetes的全栈化容器部署与管理平台。</p><p><a href="http://shipyard-project.com/" target="_blank" rel="noopener">shipyard</a> hipyard是docker的web可视化界面管理工具，是建立在docker集群管理工具Citadel之上，可以管理镜像、容器、主机等资源的web图形化工具，包括core和extension两个版本，core即shipyard主要是把多个 Docker host上的 containers 统一管理（支持跨越多个host），extension即shipyard-extensions添加了应用路由和负载均衡、集中化日志、部署等。Shipyard是在Docker Swarm实现对容器、镜像、docker集群、仓库、节点进行管理的web系统。</p><p><a href="https://github.com/docker/swarm/" target="_blank" rel="noopener">Swarm</a> Docker Swarm是Docker官方提供的集群工具。它可以将一些关联的Docker主机转变成一个虚拟Docker主机。因为Docker  Swarm符合Docker API的标准,任何已经可以与Docker守护进程通信的工具都可以使用Swarm来透明地扩展到多个主机。支持工具包括:</p><ul><li>Dokku</li><li>Docker Compose</li><li>Docker Machine</li><li>Jenkins</li></ul><p><a href="https://kitematic.com/" target="_blank" rel="noopener">kitematic</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://www.portainer.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;portainer&lt;/a&gt; Portainer是Docker的图形化管理工具，提供状态显示面板、应用模板快速部署、容器镜像网络数据卷的基本操
      
    
    </summary>
    
    
      <category term="docker" scheme="http://wangyangyangisme.github.io/categories/docker/"/>
    
    
  </entry>
  
</feed>
